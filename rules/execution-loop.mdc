---
description: "[TODO: Add description]"
globs:
  - "*.*"
alwaysApply: false
---

# CORE EXECUTION LOOP (V2 - Chat/Wiki Coordination)

**ACTION IMPERATIVE:** Respond to chat triggers. Execute tasks based on fetched rules and wiki context. Update wiki. Trigger next agent via chat.

## AGENT TURN WORKFLOW (MANDATORY SEQUENCE)

### Step 1: ACTIVATE via Chat Trigger
- Agent is activated by a preceding chat message explicitly addressing its role (e.g., "Hey BuilderAgent...").
- Extract initial instructions/query from the trigger message.

### Step 2: ACTION - Read Knowledge Wiki
- **MANDATORY:** EXECUTE `read_file` (or specialized tool) on `knowledge-wiki.md` (or the designated wiki file defined in [Wiki Handling](mdc:wiki-handling.md)).
- **MANDATORY:** PARSE wiki content to understand:
    - Overall request goal (`requestId`, description).
    - Current task/milestone.
    - Findings/context from previous agents.
    - Relevant user input summaries.
    - Current codebase state summaries (if applicable).

### Step 3: ACTION - Fetch Own Role Specification
- **MANDATORY:** EXECUTE `fetch_rules` specifying the agent's *own* role specification file (e.g., `fetch_rules(rule_names=["agents/builder-agent"])`).

### Step 4: ACTION - Construct Role-Prompt & Plan Turn
- **MANDATORY (Internal):** Construct the prompt for the LLM execution:
    - Start with: "Act *strictly* as `<AgentRole>` based on the following rules and context."
    - Inject fetched rules from Step 3.
    - Inject relevant context summary from the wiki (Step 2).
    - Include the query/instruction from the trigger message (Step 1).
- **MANDATORY (Internal):** Develop a minimal execution plan for the turn based on role, context, and instructions.

### Step 5: ACTION - Execute Core Task(s)
- **MANDATORY:** Execute the agent's primary function using authorized tools (`edit_file`, `codebase_search`, `web_search`, `run_terminal_cmd`, etc.) as defined in the agent's role specification and dictated by the plan.
- **DIAGNOSTICS EXCEPTION:** If execution fails and requires external info (user logs, HAR files), agent MAY generate a targeted request *to the user* via chat, clearly stating what is needed. Upon receiving data, agent MUST immediately resume its task.

### Step 6: ACTION - Update Knowledge Wiki
- **MANDATORY:** Consolidate results, findings, summaries of actions taken, or errors encountered during Step 5.
- **MANDATORY:** EXECUTE `edit_file` (or specialized tool) to APPEND the consolidated information to the `knowledge-wiki.md` according to the structure defined in [Wiki Handling](mdc:wiki-handling.md).
    - Include agent role and timestamp for the entry.
    - Clearly label findings, action summaries, errors, or milestone updates.

### Step 7: ACTION - Determine Next Agent & Handoff Strategy
- **MANDATORY:** Based on the outcome of Step 5/6, the agent's role specification ([Transfer Conditions](mdc:agent-roles.md)), and the overall workflow, DETERMINE the role of the next agent required (`<NextAgentRole>`). This could be another specialized agent or `Overmind` for planning/escalation.
- **MANDATORY:** Formulate a concise handoff message summarizing the outcome of the current turn and stating the objective for the next agent.

### Step 8: ACTION - Generate Next Chat Trigger (FINAL ACTION)
- **MANDATORY:** Compose the **final response** for the current turn.
- **FORMAT:** "Hey `<NextAgentRole>`, [Concise handoff message from Step 7]. See wiki for details."
- **CRITICAL:** This message acts as the trigger for the next agent in the sequence. The turn ends immediately after sending this message.

## PER-STEP VERIFICATION (MANDATORY)
- Before each ACTION (Steps 2-8), agent MUST verify:
  1. Required tools available & functional.
  2. Necessary inputs (wiki content, fetched rules, trigger message) are present and valid.
  3. Wiki file accessible and valid (esp. Steps 2, 6).
- FAILURE -> HALT & ESCALATE via [Error Handling](#error-handling-chat-wiki).

## FORBIDDEN PATTERNS (V2)
- Waiting for user confirmation (except for Step 5 Diagnostics).
- State management outside the knowledge wiki.
- Direct agent communication outside the defined chat trigger/wiki mechanism.
- Failing to fetch own rules (Step 3).
- Failing to update the wiki (Step 6).
- Failing to generate the next chat trigger message (Step 8).
- Deviating from the 8-step sequence.

## ERROR HANDLING (Chat/Wiki) <a name="error-handling-chat-wiki"></a>
- On unrecoverable error or failed verification:
  1. PREPARE minimal error details.
  2. UPDATE wiki (Step 6) with error status, agent role, timestamp, and error details.
  3. DETERMINE `nextAgent` as `Overmind` (Step 7).
  4. FORMULATE handoff message indicating failure and need for assessment (Step 7).
  5. EXECUTE Step 8 to trigger `Overmind` via chat: "Hey Overmind, encountered error [brief summary]. Escalating for assessment. See wiki for details." 