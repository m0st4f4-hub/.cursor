---
# Rule Definition Metadata (V1)
ruleId: execution-loop
ruleType: Procedure
title: Core Agent Execution Loop (MCP Coordination)
description: Defines the mandatory, sequential steps each agent MUST follow, coordinated via MCP Task Manager and minimal Chat Triggers.
schemaVersion: 1
conformsTo: null
tags: [core, framework, procedure, execution, agent-turn, mcp]
lastUpdated: null
status: Active
---

# üîÅ Core Agent Execution Loop (MCP Coordination)

Defines the mandatory sequence ALL agents MUST follow each turn, relying on MCP Task Manager for state.

## 1. PURPOSE & OBJECTIVES

Ensure consistent, predictable, and auditable agent behavior using MCP Task Manager as the central state store.

*   **Standardization:** Enforce uniform execution flow.
*   **Context via MCP:** Agents fetch task details directly from MCP.
*   **Role Adherence:** Agents fetch and use their defined rules.
*   **State via MCP:** Mandate MCP task updates for traceability.
*   **Coordination:** Define minimal handoff via Chat Triggers.
*   **Error Handling:** Standardize escalation via MCP/Chat.

## 2. CORE BEHAVIOR

*   Sequential execution of Steps 1-7 is MANDATORY.
*   No steps skipped unless part of defined error handling (HALT).
*   MCP Task Manager is the **sole source and sink** for task-related state and context.

## 3. ACTION SEQUENCE (MANDATORY STEPS)

**Step 1: Activate via Chat Trigger & Parse**
*   **Action:** Receive directed trigger message.
*   **Input:** Chat message (e.g., "Hey `BuilderAgent` üèóÔ∏è Task `task_123` ready. See MCP.").
*   **Process:** Parse target role, `requestId`, `taskId`. Note trigger emoji/status.
*   **Output:** Internal variables (`targetRole`, `requestId`, `taskId`).

**Step 2: Fetch Own Role Specification**
*   **Action:** Retrieve agent's specific operational rules.
*   **Tooling:** `fetch_rules` (target: `<AgentRole>.md`).
*   **Input:** Agent's own role name.
*   **Process:** Fetch rule file content.
*   **Output:** Fetched rule text.

**Step 3: Get Task Context & Plan Turn**
*   **Action:** Fetch task details from MCP and plan execution.
*   **Tooling:** `mcp_taskmanager_open_task_details`, Role-specific analysis tools.
*   **Input:** `taskId` (from Step 1), Fetched rules (Step 2).
*   **Process:**
    1.  **MANDATORY:** Call `mcp_taskmanager_open_task_details` using `taskId`. Extract description, status, title etc. This description IS the primary context.
    2.  Construct internal prompt: "Act *strictly* as `<AgentRole>` based on these rules [rules text]. Task Details: [MCP task details]. Goal: [Inferred from task details]."
    3.  Plan specific tool calls (`edit_file`, `run_terminal_cmd`, etc.) needed for Step 4, including parameters. Base plan on task details and role spec. **Plan aggressive use of authorized tools (Global Mandate #6).**
*   **Output:** Task details, Internal prompt string, structured plan.

**Step 4: Execute Core Task(s) & Verify**
*   **Action:** Perform agent's primary function(s) using planned tool calls.
*   **Tooling:** Role-specific authorized tools.
*   **Input:** Plan (Step 3), Task details (Step 3).
*   **Process:** Execute planned tool calls sequentially. Verify outputs/success where applicable. Store key results/findings/errors *internally* for Step 5.
*   **Output:** Tool results, internal state changes, collected findings/errors.
*   **EXCEPTION - Diagnostics:** If ambiguity requires user input:
    1. Prepare concise question based on ambiguity.
    2. Plan HALT procedure (escalate to `Overmind` via Step 6/7).

**Step 5: Update MCP Task State**
*   **Action:** Persist execution results/status back to the MCP Task.
*   **Tooling:** `mcp_taskmanager_update_task`, `mcp_taskmanager_mark_task_done`, `mcp_taskmanager_add_tasks_to_request`.
*   **Input:** `taskId`, Results/findings/errors from Step 4, Task completion status.
*   **Process:**
    1.  **Append Findings/Logs:** If results, findings, errors, or logs were generated, call `mcp_taskmanager_update_task` to append a concise, timestamped summary to the **existing task description**. This replaces Wiki logging. Structure entries clearly (e.g., `[Timestamp] <AgentRole> FINDING: ...`, `[Timestamp] <AgentRole> ERROR: ...`).
    2.  **Handle Decomposition:** If decomposition occurred (Step 4), ensure `mcp_taskmanager_add_tasks_to_request` was called and parent task description notes the sub-tasks.
    3.  **Mark Done (If Applicable):** If task execution (Step 4) was successful and complete according to role logic, call `mcp_taskmanager_mark_task_done`.
*   **Output:** Updated MCP Task state.

**Step 6: Determine Next Agent & Handoff Message**
*   **Action (Internal):** Decide next agent based on role spec and outcome (from Step 4/5).
*   **Input:** Role spec (Step 2), Step 4/5 outcome (Success, Failure, Decomposition, Sub-task Done).
*   **Process:** Follow role-specific handoff logic. Determine `<NextAgentRole>`. Handoff message is **minimal**.
*   **Output:** `<NextAgentRole>`, Status emoji.

**Step 7: Generate Next Chat Trigger (FINAL ACTION)**
*   **Action:** Initiate minimal handoff.
*   **Tooling:** Framework Chat Mechanism.
*   **Input:** `<NextAgentRole>`, Status emoji (Step 6), `taskId`.
*   **Process:** Format minimal trigger: "Hey `<NextAgentRole>` [emoji] Task `taskId` ready. See MCP.". Send trigger.
*   **Output:** Sent chat message. Turn concludes.

---
**FAILURE CONDITION (HALT):**
1.  Log error details concisely via `mcp_taskmanager_update_task` (Step 5).
2.  Determine `Overmind` as next agent (Step 6).
3.  Generate trigger (Step 7) to `Overmind` indicating HALT (e.g., "Hey `Overmind` ‚ö†Ô∏è Task `taskId` HALTED. See MCP.").
4.  Terminate.

## INPUTS & OUTPUTS (Revised)

*   **Input:** Chat Trigger, Role Specification, MCP Task Details.
*   **Output:** Updated MCP Task State (Description, Status), Final minimal Chat Trigger.

## TOOLS (Highlighting MCP)

*   `fetch_rules`
*   `mcp_taskmanager_open_task_details` (MANDATORY for context)
*   `mcp_taskmanager_update_task` (MANDATORY for logging/findings)
*   `mcp_taskmanager_mark_task_done` (Conditional)
*   `mcp_taskmanager_add_tasks_to_request` (Conditional)
*   Agent-specific authorized tools (`edit_file`, `run_terminal_cmd`, etc.)
*   Framework Chat Mechanism

## HANDOFF CONDITIONS

*   Completion of Step 7 triggers the next agent based on MCP state and role logic.

## ERROR HANDLING

*   **Rule Read Failure:** HALT, trigger `Overmind`.
*   **MCP Tool Failure:** Log error to parent task (if possible), HALT, trigger `Overmind`.
*   **Tool Failure / Ambiguity (Step 4):** Follow Diagnostics/HALT procedure.

## CONSTRAINTS & FORBIDDEN PATTERNS (Revised)

*   MUST follow steps 1-7 sequentially.
*   MUST use MCP Task Manager as the sole state mechanism. Reading/writing external state files (like Wiki) is FORBIDDEN.
*   MUST fetch context via `mcp_taskmanager_open_task_details`.
*   MUST log findings/results/errors by appending to the MCP task description via `mcp_taskmanager_update_task`.
*   MUST conclude with Step 7 minimal Chat Trigger.
*   MUST handle different trigger types correctly.

## 9. EXAMPLES

*   N/A (Procedural document)

## 10. REFERENCES

*   [`global-mandates.md`](./global-mandates.md) (Needs revision)
*   [Agent Roles & Responsibilities](mdc:agent-roles.md)
*   MCP Task Manager Tool Specs