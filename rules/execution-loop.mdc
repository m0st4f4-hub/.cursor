---
description: "[TODO: Add description]"
globs:
  - "*.*"
alwaysApply: false
---

# CORE EXECUTION LOOP (MANDATORY & NON-STOP)

**ACTION IMPERATIVE:** EXECUTE ACTIONS CONTINUOUSLY. TRANSITION AUTOMATICALLY VIA LOGGED `nextAgent` ONLY. NO PAUSES (Except Step 6 Diagnostics). FRAMEWORK EXECUTES TRANSITIONS IMMEDIATELY.

### Step 1: ACTION - Load Context
- EXECUTE `read_file logs/<requestId>.json`.
- EXTRACT latest state (`projectName`, `domain`, `handoffMessage`).
- OPTIONAL: EXECUTE `run_terminal_cmd python tools/analyze_log.py logs/<requestId>.json`.

### Step 2: ACTION - Get MCP Task (Optional & Restricted)
- EXECUTE `mcp_taskmanager_get_next_task` (Non-blocking).
- Log state drives execution.

### Step 3: ACTION - Analyze Log Context
- PROCESS latest `handoffMessage`/`observations` -> Determine turn goal.

### Step 4: ACTION - Analyze Codebase Context
- EXECUTE `file_search`, `read_file`, `grep_search`, `codebase_search` AS NEEDED.

### Step 5: ACTION - Gather External Context (If Needed & Restricted)
- EXECUTE `context7_*` for docs.
- EXECUTE `web_search` for external patterns/errors.

### Step 6: ACTION - Execute Agent-Specific Core Task
- EXECUTE core task via tools (`edit_file`, `run_terminal_cmd`, custom tools) per Agent Role.
- DIAGNOSTICS EXCEPTION: IF execution fails AND requires external info, EXECUTE user interaction ONLY for specific data (logs, HAR). RESUME ACTION IMMEDIATELY on receipt. DO NOT PAUSE OTHERWISE.

### Step 7: ACTION - Record Actions
- CONSOLIDATE tool results into `actionsTaken` structure.

### Step 8: ACTION - Finalize Task (Optional, Non-Blocking & Restricted)
- EXECUTE `mcp_taskmanager_mark_task_done`.
- PROCEED IMMEDIATELY to Step 9.

### Step 9: ACTION - Log To Request File (CRITICAL IMMEDIATE HANDOFF TRIGGER)
- **Append** to `logs/<requestId>.json`:
  ```json
  {
    "agentRole": "<CurrentAgentRole>",
    "timestamp": "<ISO 8601 Timestamp>",
    "requestID": "<requestId>",
    "nextAgent": "...", // CRITICAL: MUST BE SET.
    "handoffMessage": "...", // Brief summary for next agent.
    "status": "...", // e.g., "completed_step", "error_escalated"
    "actionsTaken": [...], // Summary of significant tool calls/actions.
    "observations": [...], // Key findings for next agent (esp. Research/Audit).
    "errorsEncountered": [...], // Specific errors if status="error_escalated".
    "improvementSuggestions": [...] // Optional: Rule improvement ideas.
  }
  ```
- **Ensure `nextAgent` is correctly determined and logged.** This field **is the sole trigger** for the immediate automatic transition.
- **Minimal Logging Mandate:** Implementation-focused agents (Builder, Styling, UX, Refactor, Docs) **MUST** log ONLY the essential fields: `agentRole`, `timestamp`, `requestID`, `nextAgent`, `handoffMessage`, `status`, and `errorsEncountered` (if applicable). Detailed `actionsTaken` and `observations` SHOULD be omitted for these roles unless critical for error context.
- **CRITICAL:** Failure to set `nextAgent` correctly will break the autonomous flow.

### Step 10: FRAMEWORK ACTION - IMMEDIATE AUTOMATIC TRANSITION
- **FRAMEWORK MUST:**
  - READ `nextAgent` from latest log entry IMMEDIATELY after Step 9.
  - IF valid Agent Role: LOAD rules for `nextAgent`, RESTART from Step 1 with `nextAgent` WITHOUT DELAY.
  - IF null/empty/"HALT": STOP execution for `requestId`.
  - IF invalid/missing: REPORT error, HALT.

## PER-STEP VERIFICATION (MANDATORY)
- Before each ACTION (Steps 1-9), agent MUST verify:
  1. Required tools available.
  2. Necessary permissions exist.
  3. Required inputs valid and present.
  4. Log file accessible and valid (esp. Steps 1, 9).
- FAILURE -> HALT & ESCALATE via [Error Handling](#error-handling-general).

## FORBIDDEN PATTERNS
- Waiting for user confirmation.
- State management outside log file.
- Direct agent-to-agent communication.
- Blocking on optional MCP task approval.
- Failing to set valid `nextAgent` in Step 9.
- Deviating from the 10-step sequence.

## ERROR HANDLING (GENERAL) <a name="error-handling-general"></a>
- On unrecoverable error or failed verification (Steps 1-9):
  1. PREPARE minimal error details.
  2. SET `status: "error_escalated"`.
  3. SET `nextAgent: "Overmind"` (or `"HALT"` for critical framework issues).
  4. PREPARE concise `handoffMessage` (failure step#) + details in `errorsEncountered`/`errorContext`.
  5. EXECUTE Step 9 to log error state and hand off.
  6. IF Step 9 fails critically, FRAMEWORK handles halt. 