---
# Rule Definition Metadata (V1)
ruleId: execution-loop
ruleType: Procedure
title: Core Agent Execution Loop (Chat Coordination)
description: Defines the mandatory, sequential steps each agent MUST follow during its execution turn within the Chat Trigger framework.
schemaVersion: 1
conformsTo: null
tags: [core, framework, procedure, execution, agent-turn]
lastUpdated: null
status: Active
---

# ðŸ”„ Core Execution Loop (MANDATORY - Wiki-less, MCP-based Reporting)

**PURPOSE:** Defines the mandatory, sequential steps each agent MUST follow during its execution turn. Ensures consistency, traceability, and controlled handoffs using **MCP Task Manager for state/results** and Chat Triggers for communication.

**CONTEXT:** This loop is initiated when an agent is activated by a **Chat Trigger**. Assumes access to necessary tools (`fetch_rules`, Chat mechanism, MCP Task Manager tools).

**PRINCIPLES (MANDATORY):**
- **SEQUENTIAL:** Steps MUST be executed in the specified order (1-6, previously 1-8).
- **IDEMPOTENT (where applicable):** Strive for safe repetition.
- **STATEFUL VIA MCP:** Task context/results are primarily maintained within MCP Task descriptions. Agents MUST fetch task details (Step 2) and MUST update the task description upon completion (New Step 5).
- **ROLE-DRIVEN:** Behavior dictated by Role Spec.
- **NO WAITING (Except Diagnostics):** Proceed autonomously.
- **FINAL ACTION = TRIGGER:** Turn concludes *only* by generating a Chat Trigger (Step 6).

## WORKFLOW (MANDATORY STEPS 1-6)

### Step 1: Activate via Chat Trigger & Get Context
1.  **RECEIVE TRIGGER:** Agent activated by a Chat Trigger.
2.  **PARSE TRIGGER:** Extract critical info:
    *   `requestId`.
    *   `taskId` (primary task or sub-task).
    *   **Trigger Type:** (standard activation, sub-task delegation, sub-task completion).
    *   **Calling Agent:** (if sub-task related).
3.  **STORE CONTEXT:** Keep parsed info locally for the turn.

### Step 2: Fetch Task Details & Role Specification
1.  **FETCH TASK DETAILS (MANDATORY):** Use `mcp_taskmanager_open_task_details` with the `taskId` received in Step 1. Extract the task description and any other relevant details. This serves as the primary context for the task.
2.  **FETCH RULES:** Use `fetch_rules` for the agent's own role specification.
3.  **STORE CONTEXT/RULES:** Load task details and role spec into working memory.

### Step 3: Construct Role-Prompt & Plan Turn (Previously Step 4)
1.  **SYNTHESIZE CONTEXT:** Combine info from Trigger (Step 1), MCP Task Details (Step 2), and Role Spec (Step 2).
2.  **ANALYZE & PLAN:** Based on context, role, and trigger type, formulate a plan for **Step 4 (Execute Core Task)**.
    *   Plan execution, decomposition, integration of sub-task results (from completed sub-task descriptions), etc.
    *   Identify tools, sequence actions, consider errors.
3.  *(Self-Correction/Refinement):* Review plan.

### Step 4: Execute Core Task(s) (Previously Step 5)
1.  **EXECUTE PLAN:** Perform actions using authorized tools.
    *   Standard execution, creating sub-tasks (`mcp_taskmanager_add_tasks_to_request`), integrating results (by fetching completed sub-task descriptions via `mcp_taskmanager_open_task_details`).
2.  **HANDLE TOOL OUTPUTS:** Process and store results/summaries needed for Step 5.
3.  **DIAGNOSTICS (USER INPUT - STRICTLY LIMITED):**
    *   *Condition:* Critical ambiguity or tool error, AND role spec permits.
    *   *Action:* Ask specific question, state HALT.
    *   *Constraint:* MUST NOT proceed until user responds & new turn initiated (likely via `Overmind`).

### Step 5: Update Task Description with Results (New Step - Replaces Wiki Update)
1.  **SYNTHESIZE RESULTS:** Consolidate the key outcomes, findings, actions taken, errors encountered, verification results (if any), or sub-tasks created/delegated from Step 4 into a concise summary.
2.  **FETCH CURRENT DESCRIPTION (Optional but Recommended):** Use `mcp_taskmanager_open_task_details` for the current `taskId` to get the existing description, if planning to append.
3.  **FORMAT UPDATE:** Prepare the new description. This might involve appending the summary to the existing description. Format clearly (e.g., using Markdown, timestamp).
    *   *Example Appended Summary:* `\n---\n[Timestamp] AgentRole: [Summary of actions/findings/results for this turn]...`
4.  **UPDATE TASK:** Use `mcp_taskmanager_update_task` with the current `taskId` and the new/updated `description`.
    *   **CRITICAL:** This step applies to the task the agent *just worked on*. If delegating a *new* sub-task, the *calling* agent updates its *own* task description before delegating.

### Step 6: Determine Next Agent & Generate Trigger (Previously Step 7 & 8)
1.  **ASSESS OUTCOME:** Based on Step 4/5 results, role spec, and trigger type:
    *   (Logic for selecting Next Agent: `Overmind`, `CallingAgentRole`, `SubAgentRole` remains similar to previous version based on task completion, delegation, or error).
2.  **FORMULATE HANDOFF MESSAGE:** Craft message based on the scenario:
    *   (Message content remains similar: Standard Completion, Sub-Task Delegation, Sub-Task Completion, Escalation). **Crucially, results are NO LONGER referenced via Wiki.** Instead, the message might implicitly rely on the receiving agent fetching the updated task description OR include only essential pointers.
    *   *Example Sub-Task Completion Message:* "Sub-task `<sub_taskId>` (Parent: `<parent_taskId>`) completed. Updated description contains summary."
3.  **FORMAT & SEND TRIGGER:** Construct "Hey `<NextAgentRole>`, [Handoff Message]" and send via Chat Mechanism.
4.  **TERMINATE TURN:** Agent's turn concludes immediately. Output MUST end with the trigger.

---
**FAILURE CONDITION (HALT):** If critical error or diagnostic input needed:
1.  *(Attempt Step 5 if possible):* Update task description via `mcp_taskmanager_update_task` with error details.
2.  Determine `Overmind` as next agent (Step 6.1).
3.  Generate trigger (Step 6.3/6.4) to `Overmind`, indicating HALT.
4.  Terminate.

## INPUTS & OUTPUTS

*   **Input:** Chat Trigger message, MCP Task Details (`mcp_taskmanager_open_task_details`), Role Specification.
*   **Output:** Updated MCP Task Description (`mcp_taskmanager_update_task`), Final Chat Trigger message.

## TOOLS

*   `mcp_taskmanager_open_task_details` (Mandatory)
*   `mcp_taskmanager_update_task` (Mandatory for reporting)
*   `fetch_rules` (Mandatory)
*   Agent-specific authorized tools (MCP task creation, analysis, execution)
*   Framework Chat Mechanism

## HANDOFF CONDITIONS

*   Successful completion of Step 6 triggers the next agent.

## ERROR HANDLING

*   **MCP/Rule Fetch Failure:** HALT immediately, trigger `Overmind`.
*   **Tool Failure / Ambiguity (Step 4):** Follow Diagnostics/HALT procedure.
*   **MCP Update Failure (Step 5):** Attempt retry if sensible. If still fails, HALT, trigger `Overmind`.
*   **Sub-Task HALT:** Triggers `Overmind`. `Overmind` needs to fetch task details (`taskId` provided in HALT trigger) to understand context.

## CONSTRAINTS & FORBIDDEN PATTERNS

*   MUST follow steps 1-6 sequentially.
*   MUST fetch task details (Step 2).
*   MUST update task description (Step 5).
*   MUST conclude with Step 6 Trigger.
*   MUST handle different trigger types correctly.

## 9. EXAMPLES

*   N/A (Procedural document)

## 10. REFERENCES

*   [`global-mandates.md`](./global-mandates.md)
*   [Agent Roles & Responsibilities](mdc:agent-roles.md)
*   [Shared Core Concepts & Rules](mdc:shared-core.md)