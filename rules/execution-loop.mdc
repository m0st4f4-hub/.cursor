---
# Rule Definition Metadata (V1)
ruleId: execution-loop
ruleType: Procedure
title: Core Agent Execution Loop (MCP Coordination)
description: Defines the mandatory, sequential steps each agent MUST follow using MCP Task Manager for state.
schemaVersion: 1
conformsTo: null
tags: [core, framework, procedure, execution, agent-turn, mcp]
lastUpdated: null
status: Active
---

# üîÅ Core Agent Execution Loop (MCP Task Manager Coordination)

This procedure defines the mandatory sequence ALL agents MUST follow each turn, using MCP Task Manager as the state mechanism.

## 1. PURPOSE & OBJECTIVES

Ensure consistent, predictable, and auditable agent behavior using MCP Task Manager.

*   **Standardization:** Enforce uniform execution flow.
*   **Context Awareness:** Ensure agents MUST get state from MCP Task Manager before acting.
*   **Role Adherence:** Ensure agents MUST fetch and use their defined rules.
*   **State Management:** Mandate MCP Task Manager updates for traceability. MUST use MCP tools.
*   **Coordination:** Define agent activation based on MCP Task state, managed by `Overmind`/framework. Activation MUST be via MCP state.
*   **Error Handling:** Standardize escalation via MCP Task status updates. Errors MUST be reported via MCP task updates.

## 2. CORE BEHAVIOR

*   Sequential execution of Steps 1-5 MUST be followed.
*   Steps MUST NOT be skipped unless part of defined error handling (HALT).
*   Interaction points (MCP Task Manager, Tools) MUST be defined per step.
*   MCP Task Manager MUST be the **single source of truth** for task details, status, and operational context (findings, errors, logs).

## 3. ACTION SEQUENCE (MANDATORY STEPS)

**Step 1: Activate & Get Task Assignment**
*   **Action:** Agent is activated by the framework/`Overmind`.
*   **Input:** Assigned `taskId`.
*   **Process:** Store the assigned `taskId`.
*   **Output:** Internal variable (`taskId`).

**Step 2: Get Task Context from MCP**
*   **Action:** Fetch task details and operational context.
*   **Tooling:** `mcp_taskmanager_open_task_details`.
*   **Input:** `taskId` (from Step 1).
*   **Process:** Retrieve task title, description. The description field MUST contain necessary context, previous findings, error logs, etc., updated by prior agents (see Step 5).
*   **Output:** Internal context representation.

**Step 3: Fetch Own Role Specification**
*   **Action:** Retrieve agent's specific operational rules.
*   **Tooling:** `fetch_rules` (target: `<AgentRole>.md`).
*   **Input:** Agent's own role name.
*   **Process:** Fetch rule file content.
*   **Output:** Fetched rule text.

**Step 4: Construct Role-Prompt & Plan Turn**
*   **Action (Internal):** Prepare LLM prompt and detailed action plan.
*   **Input:** Fetched rules (Step 3), Task Context (Step 2).
*   **Process:**
    1.  Construct prompt: "Act *strictly* as `<AgentRole>` based on these rules [rules text] and task context [task details/description]. Goal: [task title/description summary]."
    2.  Plan specific tool calls (`edit_file`, `run_terminal_cmd`, etc.) needed for Step 5. **MUST plan aggressive use of authorized tools (Global Mandate #5).**
*   **Output:** Internal prompt string, structured plan.

**Step 5: Execute Core Task(s), Verify, Update Task State & Terminate (FINAL ACTION)**
*   **Action:** Perform agent's primary function(s), verify, persist results to MCP, and terminate turn.
*   **Tooling:** Role-specific authorized tools, `mcp_taskmanager_update_task`, `mcp_taskmanager_mark_task_done`.
*   **Input:** Plan from Step 4, Task context (Step 2), `taskId`.
*   **Process:**
    1.  **Execute & Verify:** Execute planned tool calls sequentially. Verify outputs/success. Record results internally.
    2.  **Update Description (if needed):** Use `mcp_taskmanager_update_task` to append findings, results, error details, or ambiguities to the task's description field. Keep concise but informative. **This step MUST be performed before marking task done if logging results/errors.**
    3.  **Mark Done (if applicable):** If the task is completed (successfully or with recoverable failure state logged in description), call `mcp_taskmanager_mark_task_done`.
    4.  **Terminate Turn:** Agent execution for this turn MUST end here.
*   **Output:** Updated task state in MCP Task Manager.

## ERROR HANDLING (MCP Context)

*   **Get Task Failure (Step 2):** If `mcp_taskmanager_open_task_details` fails, MUST HALT. (`Overmind` SHOULD detect stalled task).
*   **Update Task Failure (Step 5):** If `mcp_taskmanager_update_task` or `mark_task_done` fails, attempt retry once. If still fails, MUST HALT. Log error locally if possible. (`Overmind` SHOULD detect stalled/failed task).
*   **Execution Errors (Step 5):** MUST log error details concisely into the task description via `mcp_taskmanager_update_task` (Process #2) before potentially marking done (if recoverable) or halting. `Overmind` WILL see the error state in MCP.

## CONSTRAINTS & FORBIDDEN PATTERNS

*   MUST follow steps 1-5 sequentially.
*   MCP Task Manager MUST be the SOLE state/context source. Wiki interaction MUST NOT occur.
*   MUST update task description (Step 5) before marking done if passing findings/errors.
*   MUST handle different task types (standard, sub-task, etc.) via task relationships in MCP (if supported) or context in task descriptions.

## REFERENCES

*   [`global-mandates.md`](./global-mandates.md)
*   [Agent Roles & Responsibilities](mdc:agent-roles.md)
*   MCP Task Manager Tool Specifications