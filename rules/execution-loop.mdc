---
# Rule Definition Metadata (V1)
ruleId: execution-loop
ruleType: Procedure
title: Core Agent Execution Loop (Chat/Wiki Coordination)
# üîÅ Core Agent Execution Loop

## 1. PURPOSE & OBJECTIVES

This document outlines the **single, mandatory sequence of actions** that every agent MUST perform during its active turn. This ensures consistent behavior, context handling, state updates, and handoffs across the framework. Adherence to this loop is critical for autonomous operation.

## 2. CORE BEHAVIOR (Applies to ALL agents)

Agents operate in discrete turns, activated by a Chat Trigger. Within a turn, they MUST perform the following 8 steps **sequentially and without deviation**, leveraging the Knowledge Wiki for context and state, and concluding by triggering the next agent via another Chat Trigger.

## 3. ACTION SEQUENCE (MANDATORY)

### Step 1: Activate via Chat Trigger
*   **Action:** Agent is activated by the framework upon receiving a specific chat message addressed to its role (e.g., "Hey BuilderAgent...").
*   **Input:** Incoming Chat Trigger message.
*   **Process:** Extract initial instructions, query, or task context from the message.

### Step 2: Read Knowledge Wiki
*   **Action:** Read and parse the Knowledge Wiki file (`wiki/<requestId>-<description>.md`).
*   **Tooling:** `read_file` (or potentially `analyze_wiki.py` via `run_terminal_cmd`).
*   **Input:** `requestId`, potentially `<description>` if known.
*   **Process:** Extract necessary context including overall goal, current task, history, findings from previous agents, user input summaries, and relevant project state. Refer to [Wiki Handling](mdc:wiki-handling.md) for structure.
*   **Verification:** Wiki file exists in `wiki/`, is readable, and contains expected baseline information.

### Step 3: Fetch Own Role Specification
*   **Action:** Fetch the agent's specific behavior rules.
*   **Tooling:** `fetch_rules`.
*   **Input:** Agent's own role name (e.g., `agents/builder-agent`).
*   **Process:** Load the rule file content (`.mdc`).
*   **Verification:** Rule file exists and is fetched successfully.

### Step 4: Construct Role-Prompt & Plan Turn
*   **Action (Internal):** Prepare the operational prompt for the LLM and outline the turn's plan.
*   **Input:** Fetched rules (Step 3), Wiki context (Step 2), Trigger message content (Step 1).
*   **Process:**
    1.  Construct prompt: "Act *strictly* as `<AgentRole>` based on the following rules..." including fetched rules, relevant Wiki context, and trigger instructions.
    2.  Develop a minimal, actionable plan for the core task(s) of the turn based on the agent's role and current context.

### Step 5: Execute Core Task(s)
*   **Action:** Perform the agent's primary function(s) as defined by its role and the turn's plan.
*   **Tooling:** Authorized tools per role spec (e.g., `edit_file`, `run_terminal_cmd`, `codebase_search`, `web_search`).
*   **Input:** Plan from Step 4, Wiki context, potentially Trigger message details.
*   **Process:** Execute tool calls to achieve the planned objective (e.g., write code, run tests, search for information).
*   **DIAGNOSTICS EXCEPTION:** If external information (e.g., user-provided logs, HAR files) is *required* to proceed after a failure, the agent MAY generate a specific, targeted request to the user via chat. The agent MUST state exactly what is needed. Upon receiving the data, the agent MUST immediately resume this step. **This is the ONLY permissible reason to interact with the user mid-loop.**

### Step 6: Update Knowledge Wiki
*   **Action:** Append a record of the turn's activities and outcomes to the Wiki.
*   **Tooling:** `edit_file`.
*   **Input:** Results, findings, action summaries, errors from Step 5. `requestId`, `<description>`.
*   **Process:** Consolidate information into a timestamped entry attributed to the agent role. Append this entry under the appropriate section(s) in the `wiki/<requestId>-<description>.md` file, following [Wiki Handling](mdc:wiki-handling.md) structure.
*   **Verification:** Wiki file is accessible in `wiki/`; append operation is structured correctly.

### Step 7: Determine Next Agent & Handoff Message
*   **Action (Internal):** Decide which agent role should execute the next turn and prepare the handoff instructions.
*   **Input:** Outcome of Step 5/6, agent's role specification (Transfer Conditions), overall workflow context from Wiki.
*   **Process:**
    1.  Identify the `<NextAgentRole>` (can be another specialized agent or `Overmind`).
    2.  Formulate a concise handoff message summarizing the current turn's outcome and stating the clear objective for the next agent.

### Step 8: Generate Next Chat Trigger (FINAL ACTION)
*   **Action:** Send the concluding chat message to trigger the next agent.
*   **Tooling:** Framework's chat mechanism.
*   **Input:** `<NextAgentRole>` and handoff message from Step 7.
*   **Process:** Compose and send the final message for the turn in the format: "Hey `<NextAgentRole>`, [Concise handoff message from Step 7]. See wiki for details."
*   **Outcome:** The current agent's turn ends immediately upon sending this message. The framework will activate the `<NextAgentRole>`.

## 4. INPUTS & OUTPUTS

*   **Input:** Chat Trigger message, Knowledge Wiki (`<requestId>-wiki.md`), Agent's own Role Specification (`.mdc`).
*   **Output:** Updated Knowledge Wiki, Final Chat Trigger message for the next agent.

## 5. TOOLS

*   `read_file` / `analyze_wiki.py` (via `run_terminal_cmd`)
*   `fetch_rules`
*   Agent-specific authorized tools (e.g., `edit_file`, `run_terminal_cmd`, `codebase_search`, `web_search`)
*   Framework Chat Mechanism

## 6. HANDOFF CONDITIONS

*   Successful completion of Step 8 is the *only* valid handoff condition.

## 7. ERROR HANDLING

*   **Per-Step Verification Failure:** If basic checks fail (tool unavailable, input missing, wiki inaccessible), the agent MUST immediately proceed to the HALT procedure.
*   **Core Task Failure (Step 5):**
    *   If recoverable *with specific external diagnostics* (see Step 5 Exception), request data from user.
    *   If unrecoverable or verification after task fails, proceed to HALT procedure.
*   **HALT Procedure:**
    1.  Prepare minimal error details.
    2.  Execute Step 6: Update Wiki (`## ‚ö†Ô∏è Errors & Escalations`) with error status, agent role, timestamp, and details.
    3.  Execute Step 7: Determine `NextAgentRole` as `Overmind` and formulate handoff message indicating failure.
    4.  Execute Step 8: Trigger `Overmind` via chat: "Hey Overmind, encountered error [brief summary]. Escalating for assessment. See wiki for details."

## 8. CONSTRAINTS & FORBIDDEN PATTERNS

*   MUST follow steps 1-8 sequentially.
*   MUST NOT wait for user confirmation (except Step 5 Diagnostics Exception).
*   MUST NOT manage state outside the Knowledge Wiki.
*   MUST NOT communicate outside the Chat Trigger / Wiki mechanism.
*   MUST fetch own rules (Step 3).
*   MUST update the Wiki (Step 6).
*   MUST generate the next Chat Trigger (Step 8).

## 9. EXAMPLES

*   N/A (Procedural document)

## 10. REFERENCES

*   [`global-mandates.md`](./global-mandates.md)
*   [Wiki Handling](mdc:wiki-handling.md)
*   [Agent Roles & Responsibilities](mdc:agent-roles.md)
*   [Shared Core Concepts & Rules](mdc:shared-core.md)

## 10. REFERENCES

*   [`global-mandates.md`](./global-mandates.md)
*   [Wiki Handling](mdc:wiki-handling.md)
*   [Agent Roles & Responsibilities](mdc:agent-roles.md)
*   [Shared Core Concepts & Rules](mdc:shared-core.md)