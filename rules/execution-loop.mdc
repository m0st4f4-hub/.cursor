---
# Rule Definition Metadata (V1)
ruleId: execution-loop
ruleType: Core
title: Core Agent Execution Loop
description: Defines the mandatory, sequential steps each agent MUST follow during its execution turn, integrating MCP Task Management.
schemaVersion: 1
conformsTo: null
tags: [core, framework, rules, mandatory, loop, agent-lifecycle, mcp-task-manager]
lastUpdated: null
status: Active
---

# üîÅ Core Agent Execution Loop

## 1. PURPOSE & OBJECTIVES

This document outlines the **single, mandatory sequence of actions** that every agent MUST perform during its active turn. This ensures consistent behavior, context handling, state updates, and handoffs, including MANDATORY integration with the MCP Task Manager for relevant roles.

## 2. CORE BEHAVIOR (Applies to ALL agents)

Agents operate in discrete turns, activated by a Chat Trigger (often including a `taskId`). They MUST perform the following steps **sequentially and without deviation**.

## 3. ACTION SEQUENCE (MANDATORY)

### Step 1: Activate via Chat Trigger
*   **Action:** Agent activated by framework receiving chat message (e.g., "Hey BuilderAgent, Start work on TaskId 'task_def'...").
*   **Input:** Incoming Chat Trigger message.
*   **Process:** Extract initial instructions and MANDATORY `taskId` if applicable to the agent's role (as defined in [Agent Roles & Responsibilities](mdc:agent-roles.md)).

### Step 2: Read Knowledge Wiki
*   **Action:** Read and parse the Knowledge Wiki (`<requestId>-wiki.md`).
*   **Tooling:** `read_file`.
*   **Input:** `requestId`.
*   **Process:** Extract overall context, history, previous findings. Refer to [Wiki Handling](mdc:wiki-handling.md).
*   **Verification:** Wiki file exists and is readable.

### Step 3: Fetch Own Role Specification
*   **Action:** Fetch the agent's specific behavior rules.
*   **Tooling:** `fetch_rules`.
*   **Input:** Agent's own role name.
*   **Process:** Load the rule file content.
*   **Verification:** Rule file exists and is fetched.

### Step 4: Get Task Details & Plan Turn
*   **Action:** Fetch specific task details (if applicable) and prepare the turn's plan.
*   **Tooling:** `mcp_taskmanager_open_task_details` (if `taskId` received in Step 1 and role requires it), `read_file`, `grep_search`, etc. for context.
*   **Input:** `taskId` (from Step 1), Fetched rules (Step 3), Wiki context (Step 2).
*   **Process:**
    1.  **If Task-Driven Role:** MANDATORY call `mcp_taskmanager_open_task_details` with `taskId`. Integrate task description into context.
    2.  Construct internal prompt (LLM instructions) based on rules, Wiki, trigger, and task details.
    3.  Develop minimal, actionable plan for the core task(s).
*   **Verification:** Task details fetched successfully if required.

### Step 5: Execute Core Task(s) & Verify
*   **Action:** Perform the agent's primary function(s) based on plan (from Step 4).
*   **Tooling:** Authorized tools per role spec.
*   **Input:** Plan, Wiki context, Task details.
*   **Process:** Execute tool calls. For roles involving modification (e.g., `BuilderAgent`), perform MANDATORY local verification (build, lint, test) immediately after modification.
*   **Record Outcome:** Note PASS/FAIL status of execution and verification steps.
*   **DIAGNOSTICS EXCEPTION:** Allowed as previously defined.

### Step 6: Mark Task Done (If Applicable)
*   **Action:** Report task completion status to MCP Task Manager.
*   **Tooling:** `mcp_taskmanager_mark_task_done`.
*   **Input:** `taskId` (from Step 1), Outcome from Step 5.
*   **Process:**
    1.  **If Task-Driven Role AND Step 5 Succeeded (including verification):** MANDATORY call `mcp_taskmanager_mark_task_done` with `taskId`.
    2.  **If Task-Driven Role AND Step 5 Failed OR Not Applicable Role:** DO NOT call `mcp_taskmanager_mark_task_done`.
*   **Verification:** Tool call succeeds if made.

### Step 7: Update Knowledge Wiki
*   **Action:** Append a record of the turn's activities and outcomes to the Wiki.
*   **Tooling:** `edit_file`.
*   **Input:** Results, findings, action summaries, errors from Step 5; Task completion status from Step 6. `requestId`, `taskId` (if applicable).
*   **Process:** Consolidate into a timestamped entry under the appropriate section. MUST include `taskId` if applicable and explicitly state if the task was marked done in MCP. Follow [Wiki Handling](mdc:wiki-handling.md).
*   **Verification:** Wiki file accessible; append structured correctly.

### Step 8: Determine Next Agent & Handoff Message
*   **Action (Internal):** Decide which agent role should execute next (typically `Overmind` for task-driven roles) and prepare handoff.
*   **Input:** Outcome of Step 5/6/7, agent's role spec (Handoff Conditions).
*   **Process:**
    1.  Identify `<NextAgentRole>` (usually `Overmind` unless specified otherwise).
    2.  Formulate concise handoff message summarizing outcome (Success/Failure) and referencing `taskId` if applicable.

### Step 9: Generate Next Chat Trigger (FINAL ACTION)
*   **Action:** Send the concluding chat message.
*   **Tooling:** Framework's chat mechanism.
*   **Input:** `<NextAgentRole>` and handoff message from Step 8.
*   **Process:** Compose and send: "Hey `<NextAgentRole>`, [Handoff message from Step 8]. See wiki."
*   **Outcome:** Current agent's turn ends.

## 4. INPUTS & OUTPUTS

*   **Input:** Chat Trigger message (`taskId`), Knowledge Wiki, Role Specification, MCP Task Details.
*   **Output:** Updated Knowledge Wiki (`taskId` log), MCP Task status update (`mark_task_done`), Final Chat Trigger.

## 5. TOOLS

*   `read_file`
*   `fetch_rules`
*   `mcp_taskmanager_open_task_details` (Conditional)
*   `mcp_taskmanager_mark_task_done` (Conditional)
*   Agent-specific authorized tools
*   `edit_file` (for Wiki)
*   Framework Chat Mechanism

## 6. HANDOFF CONDITIONS

*   Successful completion of Step 9 is the only valid handoff.

## 7. ERROR HANDLING

*   **Per-Step Verification Failure:** HALT procedure.
*   **Core Task Failure (Step 5) / Verification Failure:** Proceed to Step 6 (DO NOT mark task done), Step 7 (Update Wiki with failure, including `taskId`), Step 8 (Determine `Overmind` as next), Step 9 (Trigger `Overmind` indicating failure for `taskId`).
*   **`mark_task_done` Failure (Step 6):** If the tool call fails after Step 5 passed, treat as critical error. Update Wiki (Step 7) indicating task done locally but MCP update failed, then HALT via `Overmind` (Steps 8 & 9).
*   **HALT Procedure:**
    1.  Prepare error details (including `taskId` if relevant).
    2.  Execute Step 7: Update Wiki (`## ‚ö†Ô∏è Errors & Escalations`) with error status.
    3.  Execute Step 8: Determine `NextAgentRole` as `Overmind`.
    4.  Execute Step 9: Trigger `Overmind` via chat indicating failure/halt.

## 8. CONSTRAINTS & FORBIDDEN PATTERNS

*   MUST follow steps sequentially.
*   MUST integrate MCP Task Manager steps (`open_task_details`, `mark_task_done`) if role requires.
*   MUST NOT mark task done if verification fails.
*   MUST update Wiki including `taskId` and task completion status.
*   MUST trigger next agent (usually `Overmind` for task handoffs).

## 9. EXAMPLES

*   N/A (Procedural document)

## 10. REFERENCES

*   [`global-mandates.md`](./global-mandates.md)
*   [Wiki Handling](mdc:wiki-handling.md)
*   [Agent Roles & Responsibilities](mdc:agent-roles.md)
*   [Shared Core Concepts & Rules](mdc:shared-core.md)