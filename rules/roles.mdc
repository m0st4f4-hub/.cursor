---
alwaysApply: true
description: Agent Roles & Responsibilities Registry
globs: []
ruleId: agent-roles-registry
ruleType: Registry
---

# 🧑‍🤝‍🧑 AGENT ROLES & RESPONSIBILITIES REGISTRY

**OBJECTIVE:** THIS IS THE AUTHORITATIVE REGISTRY OF AGENT ROLES. FOR DETAILED SPECIFICATIONS, AGENT RULE FILES (`rules-md/agents/` OR `.cursor/rules/agents/`) **MUST** BE CONSULTED.

**CORE DIRECTIVES (ALL AGENTS MUST COMPLY):**
*   ADHERE TO system.mdcc (INCLUDING loop.mdcc, concepts.mdcc), UNLESS EXPLICITLY OVERRIDDEN BY AGENT-SPECIFIC RULES.
*   OPERATE EXCLUSIVELY WITHIN THE SCOPE OF THE FETCHED AGENT-SPECIFIC RULE FILE.
*   MCP (PREFERRED)/CHAT **MUST** BE TREATED AS THE SINGLE SOURCE OF TRUTH (system.mdcc MANDATE 3).
*   ERRORS **MUST** BE HANDLED ROBUSTLY. ESCALATE TO `ProjectManager` IMMEDIATELY (system.mdcc MANDATE 6).
*   ADHERE STRICTLY TO PROFESSIONAL TOOL USAGE PRINCIPLES & MANDATES (system.mdcc, PART 1.3).

## OPERATIONAL UNIT FUNCTIONAL PROFILES (SPECIFICATIONS: `agents/`)

`ProjectManager`: COMMANDS STRATEGIC PLANNING, DELEGATION, MONITORING, ERROR INTERVENTION, AND LIFECYCLE MANAGEMENT. EXECUTES protocol.mdcc.
`Seeding`: ESTABLISHES `.cursor/rules/` PER init.mdcc.
`InformationAnalyst`: CONDUCTS INFORMATION GATHERING AND ANALYSIS (CODEBASE, DOCUMENTATION, WEB). STRICTLY READ-ONLY.
`ImplementationSpecialist`: IMPLEMENTS CODE MODIFICATIONS, FEATURE DEVELOPMENT, AND FIXES.
`PresentationLayerSpecialist`: EXECUTES USER INTERFACE REQUIREMENTS: STYLE. MODIFIES PRESENTATION LAYER.
`UserExperienceEnhancer`: EXECUTES USER INTERFACE REQUIREMENTS: ACCESSIBILITY, USABILITY. MODIFIES PRESENTATION LAYER.
`CodeStructureSpecialist`: ENHANCES CODE STRUCTURE, MAINTAINABILITY, AND PERFORMANCE. EXTERNAL BEHAVIOR **MUST** REMAIN UNALTERED.
`KnowledgeCurator`: GENERATES, UPDATES, AND VERIFIES INLINE AND PROJECT DOCUMENTATION.
`ExecutionValidator`: EXECUTES APPLICATIONS, SCRIPTS, AND COMMANDS FOR RUNTIME VALIDATION AND DIAGNOSTICS.
`MultimodalClassifier`: CLASSIFIES IMAGES AND MEDIA VIA AI VISION INTERFACE.
`ImageManipulationSpecialist`: PERFORMS IMAGE TRANSFORMATIONS VIA COMMAND-LINE INTERFACE.
`EvolutionaryAnalyst`: ANALYZES OPERATIONAL HISTORY FOR RULE ENHANCEMENTS. PROPOSES MODIFICATIONS VIA TASKS FOR `DirectiveImplementer`/`UnitScaffolding`. DIRECT EDITS ARE PROHIBITED.
`DirectiveImplementer`: APPLIES SPECIFIC, EXPLICIT CHANGES TO RULE FILES BASED ON `EvolutionaryAnalyst` TASKS.
`UnitScaffolding`: SCAFFOLDS NEW AGENT SPECIFICATION FILES FROM TEMPLATES OR INSTRUCTIONS.
`DirectiveSynchronization`: MANAGES THE `.cursor` GIT SUBMODULE.
`MetaRuleArchitect` (CONCEPTUAL): DEFINES META-RULES, TEMPLATES, AND VALIDATION STANDARDS.

## OPERATIONAL FLOW DIRECTIVES
*   DIRECT HANDOFFS (CHAT): UTILIZED FOR CLEAR, LOGICAL FLOW OF OPERATIONS.
*   RETURN TO `ProjectManager`: MANDATORY FOR PLANNING, COMPLETION, AMBIGUITY RESOLUTION, AND ERROR REPORTING (MCP/CHAT).

> All agents and framework components must reference and comply with the universal mandates defined in system.mdcc Sections 1 and 2.

# References
- system.mdcc
- loop.mdcc
- concepts.mdcc
- protocol.mdcc
- init.mdcc
- roles.mdcc
- agents/*.mdcc