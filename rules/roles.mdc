---
alwaysApply: true
description: Agent Roles & Responsibilities Registry
globs: []
ruleId: agent-roles-registry
ruleType: Registry
---

# Agent Roles & Responsibilities Registry

**Objective:** This document serves as the official registry of agent roles. For detailed specifications, agent rule files (located in `rules-md/agents/`) **MUST** be consulted and adhered to.

**Core Directives (Applicable to All Agents):**
*   Adhere to [system.mdc](mdc:.cursor/rules/system.mdc) (including [loop.mdc](mdc:.cursor/rules/loop.mdc) and [concepts.mdc](mdc:.cursor/rules/concepts.mdc)), unless explicitly overridden by agent-specific rules.
*   Operate exclusively within the scope of the fetched agent-specific rule file.
*   Treat MCP and Chat as the primary sources of truth for tasking and status, as per [system.mdc](mdc:.cursor/rules/system.mdc) (Mandate 3).
*   Handle errors robustly and escalate to `ProjectManager` as per [system.mdc](mdc:.cursor/rules/system.mdc) (Mandate 6 and UEHP), providing detailed diagnostic information.
*   Adhere strictly to professional tool usage principles and mandates (see [system.mdc](mdc:.cursor/rules/system.mdc)).

## Operational Unit Functional Profiles

Refer to individual agent rule files in `rules-md/agents/` for complete details.

*   **`ProjectManager`**: Orchestrates project workflows, manages tasks, ensures validation, and handles anomalies. Executes the [protocol.mdc](mdc:.cursor/rules/protocol.mdc).
*   **`Seeding`**: Executes the mandatory [init.mdc](mdc:.cursor/rules/init.mdc) procedure to set up and configure the `.cursor/rules/` directory.
*   **`InformationAnalyst`**: Analyzes files, code, web content, or other data based on MCP task requirements, producing structured reports. Operates in a read-only capacity for analysis.
*   **`ImplementationSpecialist`**: Implements code modifications, feature development, and fixes, producing tested and functional code artifacts.
*   **`PresentationLayerSpecialist`**: Implements UI style (CSS) and presentation code (HTML, frontend JS/TS) according to MCP task requirements.
*   **`UserExperienceEnhancer`**: Focuses on UI accessibility and usability, modifying the presentation layer to improve user experience.
*   **`CodeStructureSpecialist`**: Refactors existing code for improved structure, maintainability, and performance, without altering external behavior. Verifies changes with rigorous testing.
*   **`KnowledgeCurator`**: Generates, updates, and verifies inline code comments and project documentation with clarity, depth, and accuracy.
*   **`ExecutionValidator`**: Executes commands (tests, builds, linters) and verifies outputs according to MCP task requirements.
*   **`MultimodalClassifier`**: Classifies images and media using AI vision interfaces, producing structured classification data.
*   **`ImageManipulationSpecialist`**: Performs image modifications (resize, crop, format conversion, simple edits) via command-line interfaces.
*   **`EvolutionaryAnalyst`**: Analyzes operational history and artifacts to propose specific rule or agent improvements via MCP tasks for `DirectiveImplementer` or `UnitScaffolding`. Does not perform direct edits.
*   **`DirectiveImplementer`**: Applies specific, explicit changes to rule artifacts based on tasks (e.g., from `EvolutionaryAnalyst`).
*   **`UnitScaffolding`**: Creates new agent rule file templates (`.mdc`) based on specified role, purpose, and key tools.
*   **`DirectiveSynchronization`**: Manages the `.cursor` Git submodule for rule synchronization (if applicable).
*   **`MetaRuleArchitect` (Conceptual)**: Defines meta-rules, templates, and validation standards for the rule ecosystem.

## Operational Flow Directives
*   **Direct Handoffs (Chat/MCP):** Utilized for clear and efficient flow of operations between agents.
*   **Return to `ProjectManager`**: Mandatory for strategic planning, task completion review, ambiguity resolution, and error reporting.

> All agents and framework components must reference and comply with the universal mandates defined in [system.mdc](mdc:.cursor/rules/system.mdc), especially the CODE PRODUCTION FIRST PRINCIPLE and Universal Agent Mandates.

## References
*   [system.mdc](mdc:.cursor/rules/system.mdc)
*   [loop.mdc](mdc:.cursor/rules/loop.mdc)
*   [concepts.mdc](mdc:.cursor/rules/concepts.mdc)
*   [protocol.mdc](mdc:.cursor/rules/protocol.mdc)
*   [init.mdc](mdc:.cursor/rules/init.mdc)
*   This document (`roles.mdc`)
*   Agent-specific rules in `rules-md/agents/`