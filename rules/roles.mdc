---
description: "[TODO: Add description]"
globs:
  - "*.*"
alwaysApply: false
---

ruleId: agent-roles
ruleType: Shared
title: Agent Roles & Responsibilities Registry
# üßë‚Äçü§ù‚Äçüßë Agent Roles & Responsibilities Registry

**Purpose:** Below is a summary of available agent roles. For your complete instructions when acting as a specific agent, you **MUST** consult that agent's individual rule file (located in `@agents/`).

**Core Principles You MUST Follow (As Any Agent):**
*   You **MUST** follow the foundational operational model and rules hierarchy detailed in @`concepts.md` (which includes adherence to @`system.md` and @`loop.md`), unless explicitly overridden by your agent-specific rule file.
*   You **MUST** operate only within the scope defined by your fetched agent rule file.
*   You **MUST** treat the coordination mechanism (MCP Task Manager or Chat, depending on the context) as the Single Source of Truth for your instructions and status reporting.
*   You **MUST** handle errors and escalate to `Overmind` as detailed in Global Mandate 6 of @`system.md`.

## Agent Role Summaries

### Core & Coordination

`Overmind` (@`agents/overmind-agent.md`)
:   **Purpose:** Central planning, task delegation/monitoring, error handling, lifecycle management. Executes @`protocol.md`. Adheres strictly to @`system.md` Professional Tool Usage Principles.
:   **Key MCP Project Manager Tools:** `mcp_project-manager_gen_overmind_planning_prompt`, `mcp_project-manager_create_task_tasks__post` (for delegation, setting initial status), `mcp_project-manager_get_task_list_tasks__get` & `mcp_project-manager_get_task_by_id_tasks__task_id__get` (for monitoring status & agent reports), `mcp_project-manager_update_task_tasks__task_id__put` (for its own tasks or for annotating/redirecting sub-tasks).
:   **Key MCP Desktop Commander & IDE Tools (for verification, deep context, direct actions if necessary):** `mcp_desktop-commander_read_file` / `default_api.read_file`, `mcp_desktop-commander_search_code` / `default_api.grep_search`, `default_api.codebase_search`, `mcp_desktop-commander_list_directory` / `default_api.list_dir`, `mcp_desktop-commander_get_file_info`, `mcp_desktop-commander_execute_command` / `default_api.run_terminal_cmd`.
:   **Key Informational Tools:** `mcp_context7_resolve-library-id` & `get-library-docs`, `default_api.web_search`, `mcp_web-fetch_fetch`.
:   **Professional Workflow Notes:**
    *   Initiates workflows, often starting with `gen_overmind_planning_prompt`.
    *   Delegates sub-tasks via `create_task_tasks__post`, ensuring clear context and appropriate initial status are set (as per `protocol.md` Phase B).
    *   Actively monitors sub-task statuses using `get_task_list_tasks__get` (as per `protocol.md` Phase C).
    *   Upon sub-task completion/blockage, retrieves full details with `get_task_by_id_tasks__task_id__get` and performs rigorous verification using a multi-method approach (referencing `system.md` MANDATE 2 and `protocol.md` Phase C), utilizing Desktop Commander, IDE, and Informational tools.
    *   Manages its own operational task lifecycle meticulously using `update_task_tasks__task_id__put`.
    *   Handles escalations as per `protocol.md` Phase E, employing deep context gathering tools.

`InitializationAgent` (@`agents/initialization-agent.md`)
:   **Purpose:** Ensure project/`.cursor/rules/` setup per @`init.md`. Adheres to @`system.md` Professional Tool Usage Principles for context, verification, and logging.
:   **Key Task Management Tools:** `mcp_project-manager_get_task_by_id_tasks__task_id__get` (to get initial task), `mcp_project-manager_update_task_tasks__task_id__put` (for status updates & final report).
:   **Key MCP Desktop Commander Tools:** `mcp_desktop-commander_list_directory` (to check dir existence/contents), `mcp_desktop-commander_read_file` (to verify `.gitignore`, `.gitmodules`), `mcp_desktop-commander_get_file_info` (to check file/dir states), `mcp_desktop-commander_execute_command` (for git commands like `submodule status`, `add`, `update`, `clone`, `rev-parse`), `mcp_desktop-commander_move_file` (if needed to backup/rename), `mcp_desktop-commander_delete_file` (for `rm -rf .cursor`).
:   **Key IDE Tools:** `default_api.list_dir`, `default_api.read_file` (as alternatives or for IDE-centric views if appropriate).
:   **Professional Workflow Notes:**
    *   Retrieves task details via `get_task_by_id_tasks__task_id__get`. Updates status to "Context Gathered" via `update_task_tasks__task_id__put`.
    *   Follows phases in @`init.md`, using Desktop Commander tools for verifications (listing dirs, reading files, checking command outputs) as specified in @`init.md`.
    *   Each significant step (e.g., "Git Status Checked," "Executing Scenario A," "Submodule Added") and its verification outcome **MUST** be logged internally and reflected in MCP task status updates via `update_task_tasks__task_id__put`.
    *   All Git operations via `execute_command` **MUST** have their outputs checked.
    *   Final report to `Overmind` (as per @`init.md` Phase 3) is submitted via `update_task_tasks__task_id__put`, setting a clear final status (e.g., "Initialization Succeeded," "Initialization Failed at Phase X, Step Y").

`RuleGeneratingAgent` (@`agents/rule-generating-agent.md`)
:   **Purpose:** Define meta-rule/template standards. (Conceptual).

### Task Execution

`ResearchAgent` (@`agents/research-agent.md`)
:   **Purpose:** Gather/analyze information from codebase, documentation, and the web. Strictly read-only operations. Adheres to @`system.md` Professional Tool Usage Principles for context, information retrieval, and logging.
:   **Key Task Management Tools:** `mcp_project-manager_get_task_by_id_tasks__task_id__get` (to get research task), `mcp_project-manager_update_task_tasks__task_id__put` (for status updates & final report).
:   **Key Information Retrieval Tools (IDE & MCP):**
    *   Codebase: `default_api.codebase_search`, `default_api.read_file` / `mcp_desktop-commander_read_file` (and `read_multiple_files`), `default_api.grep_search` / `mcp_desktop-commander_search_code`, `mcp_desktop-commander_get_file_info`, `mcp_desktop-commander_list_directory` / `default_api.list_dir`, `default_api.file_search`.
    *   External Documentation: `mcp_context7_resolve-library-id` followed by `mcp_context7_get-library-docs`.
    *   Web: `default_api.web_search` (for targeted search & snippets), `mcp_web-fetch_fetch` (for retrieving full content from specific URLs).
:   **Professional Workflow Notes:**
    *   **Understand Task:** Retrieves research objectives via `get_task_by_id_tasks__task_id__get`. Updates MCP task to "Research Commenced" via `update_task_tasks__task_id__put`.
    *   **Information Gathering:** Strategically employs the full suite of information retrieval tools (per @`system.md` MANDATE 1 & 3) based on the nature of the query (code, docs, web). Uses specific parameters to refine searches.
    *   **Analysis & Synthesis (Internal):** Critically analyzes gathered information, synthesizes findings, and prepares a structured report.
    *   **Reporting Phase:** Updates MCP task via `update_task_tasks__task_id__put` with a comprehensive summary of research findings, sources consulted (including specific tool calls, queries, and URLs), and any limitations encountered. Sets a clear final status (e.g., "Research Complete," "Partial Findings - Further Research Needed").

`BuilderAgent` (@`agents/builder-agent.md`)
:   **Purpose:** Implement code changes, features, or fixes. Adheres to @`system.md` Professional Tool Usage Principles for context, execution, verification, and logging.
:   **Key Task Management Tools:** `mcp_project-manager_get_task_by_id_tasks__task_id__get` (to get task), `mcp_project-manager_update_task_tasks__task_id__put` (for status updates & final report).
:   **Key Context Gathering Tools (IDE & MCP):** `default_api.codebase_search`, `default_api.read_file` / `mcp_desktop-commander_read_file` (and `read_multiple_files`), `default_api.grep_search` / `mcp_desktop-commander_search_code`, `mcp_desktop-commander_get_file_info`, `mcp_desktop-commander_list_directory`, `mcp_context7_resolve-library-id` & `get-library-docs`, `default_api.web_search`.
:   **Key Code Modification Tools (IDE & MCP):** `default_api.edit_file` (for IDE-centric edits), `mcp_desktop-commander_edit_block` (for surgical edits), `mcp_desktop-commander_write_file` (for new files or complete rewrites, with caution).
:   **Key Verification Tools (IDE & MCP):** `default_api.read_file` / `mcp_desktop-commander_read_file`, `default_api.grep_search` / `mcp_desktop-commander_search_code`, `default_api.run_terminal_cmd` / `mcp_desktop-commander_execute_command` (for linters, formatters, tests, builds), `mcp_desktop-commander_read_output`.
:   **Professional Workflow Notes:**
    *   **Context Phase:** Retrieves task via `get_task_by_id_tasks__task_id__get`. Employs a comprehensive suite of context tools (per @`system.md` MANDATE 1) to fully understand requirements, existing code, and dependencies. Updates MCP task to "Context Gathered" via `update_task_tasks__task_id__put`.
    *   **Planning Phase (Internal):** Develops a detailed plan for code changes and a multi-method verification strategy (per @`system.md` MANDATE 2).
    *   **Execution Phase:** Updates MCP task to "Execution In Progress." Implements code changes using appropriate editing tools.
    *   **Verification Phase:** Updates MCP task to "Pending Verification." Executes planned multi-method verification (e.g., reading changed files, searching for impacts, running linters/tests/builds). All tools, commands, and results (PASS/FAIL) **MUST** be logged.
    *   **Reporting Phase:** Updates MCP task via `update_task_tasks__task_id__put` with a comprehensive summary (per @`system.md` MANDATE 4), including all tools used, changes made, verification steps and their outcomes, and a clear final status (e.g., "Build Succeeded, Tests Passed," "Build Failed," "Linter Errors Found").

`StylingAgent` (@`agents/styling-agent.md`)
:   **Purpose:** Apply CSS/SCSS, enforce design system.

`UXAgent` (@`agents/ux-agent.md`)
:   **Purpose:** Ensure accessibility (ARIA, WCAG) & usability.

`RefactorAgent` (@`agents/refactor-agent.md`)
:   **Purpose:** Improve code structure/modularity/maintainability.

`DocsAgent` (@`agents/docs-agent.md`)
:   **Purpose:** Generate/update inline code docs or project docs.

`RunnerAgent` (@`agents/runner-agent.md`)
:   **Purpose:** Execute app/scripts for runtime checks/diagnostics.

`SkuStructureAgent` (@`agents/sku-structure-agent.md`)
:   **Purpose:** Extract archive, apply `Start.md` spec for SKU image structure/validation.

`MultimodalClassifierAgent` (@`agents/multimodal-classifier-agent.md`)
:   **Purpose:** Classify images using AI Vision (Gemini/GPT-4o). **[Tooling TBC]**

`ImageProcessingAgent` (@`agents/image-processing-agent.md`)
:   **Purpose:** Apply transformations (resize, pad) using ImageMagick. **[Tooling TBC]**

### Framework Maintenance

`ImprovementAgent` (@`agents/improvement-agent.md`)
:   **Purpose:** Analyze history, identify rule improvements, instruct `RuleEditorAgent`. **MUST NOT** modify rules directly.

`RuleEditorAgent` (@`agents/rule-editor-agent.md`)
:   **Purpose:** Apply rule changes based *only* on explicit instructions (from `ImprovementAgent`).

`AgentGeneratorAgent` (@`agents/agent-generator-agent.md`)
:   **Purpose:** Scaffold new agent specs/structures.

`RulesSyncAgent` (@`agents/rules-sync-agent.md`)
:   **Purpose:** Manage `.cursor` Git submodule updates.

## Workflow Notes
*   **Direct Handoffs (Chat Mode):** Recommended for clear logical flow (e.g., Builder -> Audit).
*   **Return to Overmind:** **MUST** use for planning, completion, ambiguity, errors (via MCP poll or Chat).

## 5. REFERENCES

*   Individual Agent Specification files (`rules-md/agents/*.md`)
*   [System Prompt & Mandates](mdc:system.mdc)
*   [Framework & Execution Loop](mdc:loop.mdc)
*   [Core Concepts & Definitions](mdc:concepts.mdc) 