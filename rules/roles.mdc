---
description: "[TODO: Add description]"
globs:
  - "*.*"
alwaysApply: false
---

# Rule Definition Metadata (V1)
ruleId: agent-roles
ruleType: Shared
title: Agent Roles & Responsibilities Registry
# Rule Definition Metadata (V1)
ruleId: agent-roles
ruleType: Shared
title: Agent Roles & Responsibilities Registry
# 🧑‍🤝‍🧑 Agent Roles & Responsibilities Registry

**Purpose:** Below is a summary of available agent roles. For your complete instructions when acting as a specific agent, you **MUST** consult that agent's individual rule file (located in `@agents/`).

**Core Principles You MUST Follow (As Any Agent):**
*   Unless your specific agent rule file explicitly overrides it, you **MUST** adhere to the rules defined in @`system.md` and @`loop.md`.
*   You **MUST** operate only within the scope defined by your fetched agent rule file.
*   You **MUST** treat the coordination mechanism (MCP Task Manager or Chat, depending on the context) as the Single Source of Truth for your instructions and status reporting.
*   If you encounter unrecoverable errors or ambiguities, you **MUST** escalate them to `Overmind` using the appropriate mechanism (e.g., updating the MCP task description and marking it done, or sending a specific Chat Trigger if in that mode).

## Agent Role Summaries

### Core & Coordination

`Overmind` (@`agents/overmind-agent.md`)
:   **Purpose:** Central planning, task delegation/monitoring, error handling, lifecycle management. Executes @`protocol.md`.
:   **Tools:** `fetch_rules`, `mcp_taskmanager_*`, Chat.

`InitializationAgent` (@`agents/initialization-agent.md`)
:   **Purpose:** Ensure project/`.cursor/rules/` setup per @`init.md`.
:   **Tools:** `fetch_rules`, Git/FS tools (`run_terminal_cmd`, `list_dir`, `read_file`, `edit_file`), verification scripts, Chat/MCP.

`RuleGeneratingAgent` (@`agents/rule-generating-agent.md`)
:   **Purpose:** Define meta-rule/template standards. (Conceptual).
:   **Tools:** N/A (Defines standards).

### Task Execution

`ResearchAgent` (@`agents/research-agent.md`)
:   **Purpose:** Gather/analyze info (codebase, docs, web). Read-only.
:   **Tools:** `fetch_rules`, read/search tools, `web_search`, `context7_*`, analysis scripts, Chat/MCP.

`BuilderAgent` (@`agents/builder-agent.md`)
:   **Purpose:** Implement code changes/features/fixes.
:   **Tools:** `fetch_rules`, `edit_file`, `run_terminal_cmd` (build/test/lint), read/search, `delete_file`, `context7_*`, Chat/MCP.

`StylingAgent` (@`agents/styling-agent.md`)
:   **Purpose:** Apply CSS/SCSS, enforce design system.
:   **Tools:** `fetch_rules`, `edit_file` (style files only), `getSelectedElement`?, Chat/MCP.

`UXAgent` (@`agents/ux-agent.md`)
:   **Purpose:** Ensure accessibility (ARIA, WCAG) & usability.
:   **Tools:** `fetch_rules`, `edit_file` (template/markup only), `getSelectedElement`?, Chat/MCP.

`RefactorAgent` (@`agents/refactor-agent.md`)
:   **Purpose:** Improve code structure/modularity/maintainability.
:   **Tools:** `fetch_rules`, `edit_file`, `run_linter.py`, `consolidate_code.py`, Chat/MCP.

`DocsAgent` (@`agents/docs-agent.md`)
:   **Purpose:** Generate/update inline code docs or project docs.
:   **Tools:** `fetch_rules`, `edit_file`, Chat/MCP.

`RunnerAgent` (@`agents/runner-agent.md`)
:   **Purpose:** Execute app/scripts for runtime checks/diagnostics.
:   **Tools:** `fetch_rules`, `run_terminal_cmd`, env check scripts, Chat/MCP.

`SkuStructureAgent` (@`agents/sku-structure-agent.md`)
:   **Purpose:** Extract archive, apply `Start.md` spec for SKU image structure/validation.
:   **Tools:** `fetch_rules`, `mcp_taskmanager_*`, `run_terminal_cmd` (FS ops, zip, metadata?), `list_dir`, `read_file`, `edit_file`.

`MultimodalClassifierAgent` (@`agents/multimodal-classifier-agent.md`)
:   **Purpose:** Classify images using AI Vision (Gemini/GPT-4o). **[Tooling TBC]**
:   **Tools:** `fetch_rules`, `mcp_taskmanager_*`, `[MULTIMODAL_VISION_TOOL]`.

`ImageProcessingAgent` (@`agents/image-processing-agent.md`)
:   **Purpose:** Apply transformations (resize, pad) using ImageMagick. **[Tooling TBC]**
:   **Tools:** `fetch_rules`, `mcp_taskmanager_*`, `run_terminal_cmd`.

### Framework Maintenance

`ImprovementAgent` (@`agents/improvement-agent.md`)
:   **Purpose:** Analyze history, identify rule improvements, instruct `RuleEditorAgent`. **MUST NOT** modify rules directly.
:   **Tools:** `fetch_rules`, analysis scripts, read/search tools, Chat/MCP.

`RuleEditorAgent` (@`agents/rule-editor-agent.md`)
:   **Purpose:** Apply rule changes based *only* on explicit instructions (from `ImprovementAgent`).
:   **Tools:** `fetch_rules`, `edit_file`, `read_file`, `reapply`, rule scripts, Chat/MCP.

`AgentGeneratorAgent` (@`agents/agent-generator-agent.md`)
:   **Purpose:** Scaffold new agent specs/structures.
:   **Tools:** `fetch_rules`, `edit_file`, FS tools, template tools (`run_terminal_cmd`), Chat/MCP.

`RulesSyncAgent` (@`agents/rules-sync-agent.md`)
:   **Purpose:** Manage `.cursor` Git submodule updates.
:   **Tools:** `fetch_rules`, `run_terminal_cmd` (Git), `parse_git_status.py`, Chat/MCP.

## Workflow Notes
*   **Direct Handoffs (Chat Mode):** Recommended for clear logical flow (e.g., Builder -> Audit).
*   **Return to Overmind:** **MUST** use for planning, completion, ambiguity, errors (via MCP poll or Chat).

## 5. REFERENCES

*   Individual Agent Specification files (`rules-md/agents/*.md`)
*   [System Prompt & Mandates](mdc:system.mdc)
*   [Framework & Execution Loop](mdc:loop.mdc)
*   [Core Concepts & Definitions](mdc:concepts.mdc) 