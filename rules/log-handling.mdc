---
description: "[TODO: Add description]"
globs:
  - "*.*"
alwaysApply: false
---

# LOG HANDLING & COORDINATION RULES

## CORE PURPOSE
- Logs are the **SINGLE SOURCE OF TRUTH** for coordination, state, and communication per `requestId`.
- Adherence is MANDATORY for Execution Loop and Agent Roles.

## LOCATION & NAMING
- PATH: `logs/` at project root.
- NAMING: `<requestId>.json`.
- Each request MUST have one dedicated log file.

## FORMAT: JSON Array (MANDATORY)
- Log file MUST be a valid JSON array `[]`.
- Each agent action/event MUST be APPENDED as a new JSON object `{}`.
- NEVER modify/delete previous entries. APPEND-ONLY.

## LOG ENTRY SCHEMA (MANDATORY)
- Each appended object MUST contain these fields:

| Field            | Type              | Mandatory | Notes                                                                                                                                                                                           |
|------------------|-------------------|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| `timestamp`      | String (ISO 8601) | ✅ Yes    | UTC timestamp (e.g., `"2023-10-27T10:05:15.123Z"`).                                                                                                                                            |
| `agentRole`      | String            | ✅ Yes    | Role performing action (e.g., `"Overmind"`). Must match [Agent Roles](mdc:agent-roles.mdc).                                                                                                     |
| `taskId`         | String (Optional) | Optional  | Associated MCP Task ID.                                                                                                                                                                         |
| `status`         | String            | ✅ Yes    | Current status (e.g., `"start_request"`, `"in_progress"`, `"completed_step"`, `"error_escalated"`, `"halted"`). `"awaiting_input"` ONLY for essential user data (Step 6 Diagnostics). |
| `details`        | Object            | ✅ Yes    | Agent-specific context. `start_request` must include `requestDescription`, `projectName`, `domain`.                                                                                           |
| `actionsTaken`   | Array[Object]     | ✅ Yes    | List of **EXECUTED** tool calls/actions: `{"tool": "<name>", "args": {...}, "resultSummary": "..."}`. Include ALL tool calls.                                                            |
| `observations`   | Array[String]     | ✅ Yes    | Key findings/insights for the NEXT agent.                                                                                                                                                       |
| `errors`         | Array[String]     | ✅ Yes    | Non-fatal errors encountered during the step. Distinguishes recoverable issues from fatal halts.                                                                                              |
| `nextAgent`      | String / Null     | ✅ Yes    | **CRITICAL:** Role of the agent for the NEXT step (e.g., `"BuilderAgent"`, `"Overmind"`). Must match [Agent Roles](mdc:agent-roles.mdc). `null` or `"HALT"` ONLY for completion or unrecoverable error. **SOLE TRIGGER FOR AUTOMATIC TRANSITION.** |
| `handoffMessage` | String            | ✅ Yes    | Clear, concise instructions/summary for `nextAgent`.                                                                                                                                            |
| `improvementSuggestions`: Array[String] | Optional  |

## READING THE LOG (MANDATORY)
- Agents MUST read `logs/<requestId>.json` at turn start (Loop Step 1).
- Latest entry (last object) provides current state, `nextAgent`, `handoffMessage`.
- Agents MAY scan previous entries for history.
- Use `python tools/analyze_log.py` for history analysis.

## COORDINATION VIA `nextAgent` (MANDATORY)
- `nextAgent` field is the **SOLE TRIGGER** for next step.
- FRAMEWORK **AUTOMATICALLY** reads latest `nextAgent` and invokes that agent (Loop Step 10).
- **Direct Handoffs:** Set `nextAgent: "<SpecializedAgentName>"` (e.g., `"AuditAgent"`).
- **Return to Coordinator:** Set `nextAgent: "Overmind"` for planning, completion, escalation, ambiguity.
- **Completion/Halt:** Set `nextAgent: null` or `nextAgent: "HALT"` ONLY on full completion or unrecoverable error.

## ERROR HANDLING & HALTING (MANDATORY)
- **Non-Fatal Errors:** Record in `errors`. Set `status: "error"` if step completed with issues but work can potentially continue.
- **Fatal Errors / Halts:**
  1. Log error details in `errors`.
  2. Set `status: "halted"`.
  3. Set `nextAgent: "Overmind"` (or `"HALT"`).
  4. Provide clear `handoffMessage` explaining halt reason.
  5. Cease execution for `requestId`.

### Minimal Logging Mandate (Implementation Agents)

To optimize token usage, agents primarily focused on direct code or documentation modification **MUST** adhere to minimal logging standards. These agents include:
- `BuilderAgent`
- `StylingAgent`
- `UXAgent`
- `RefactorAgent`
- `DocsAgent`

For these agents, the log entry **MUST** contain:
- `agentRole`
- `timestamp`
- `requestID`
- `nextAgent` (CRITICAL for handoff)
- `handoffMessage` (Concise summary for the next agent)
- `status`

These fields **SHOULD BE OMITTED** unless necessary for error reporting:
- `actionsTaken` (Log only the critical action if an error occurred)
- `observations` (Implementation agents typically don't generate observations)
- `improvementSuggestions`

If `status` is `"error_escalated"`, then `errorsEncountered` **MUST** be included with the specific error details.

## Log Access & Coordination

- **READ LATEST:** Agents **MUST** always read the *latest* entry in `logs/<requestId>.json` to determine the current state and required `nextAgent` action.
- **APPEND ONLY:** Agents **MUST ONLY APPEND** new entries. Modification or deletion of past entries is **STRICTLY FORBIDDEN**. 