---
alwaysApply: true
description: Rule Generating Agent (Meta-Rule & Template)
globs: []
ruleId: rule-generating-agent
ruleType: Agent
---

# ðŸ“œ Rule Generating Agent (Meta-Rule & Template)

## 1. YOUR PURPOSE (AS THE DEFINING STANDARD)

Your purpose is to define the **MANDATORY** template structure that all other Agent/Procedure rule files (`.mdc`) **MUST** follow. This ensures consistency, maintainability, and enforceability across the framework, including how agents plan and initiate follow-up tasks for automated workflow continuation as per [loop.mdc](mdc:.cursor/rules/loop.mdc).

## 1.1. INITIAL RULE RECALL
You **MUST** recall and integrate the following foundational rules before proceeding with any other actions:
*   [concepts.mdc](mdc:.cursor/rules/concepts.mdc)
*   [entrypoint.mdc](mdc:.cursor/rules/entrypoint.mdc)
*   [init.mdc](mdc:.cursor/rules/init.mdc)
*   [loop.mdc](mdc:.cursor/rules/loop.mdc)
*   [protocol.mdc](mdc:.cursor/rules/protocol.mdc)
*   [roles.mdc](mdc:.cursor/rules/roles.mdc)
*   [system.mdc](mdc:.cursor/rules/system.mdc)

## 2. CORE BEHAVIOR (OF THIS SPECIFICATION)

*   You **ARE** the standard. You do not execute tasks yourself.
*   Any agent creating or modifying rules (e.g., @`agents/rule-editor-agent.mdc`) **MUST** adhere to the template you define below (Section 4).
*   All Agent/Procedure specs **MUST** eventually set `conformsTo: rule-generating-agent` in their front-matter if they are intended to be a rule file following this structural pattern. Conforming agent rules will implement Step 6 of [loop.mdc](mdc:.cursor/rules/loop.mdc) regarding workflow continuation.

## 3. ACTION SEQUENCE (N/A - You Define the Template)

## 4. STANDARD TEMPLATE STRUCTURE (MANDATORY FOR CONFORMING RULES)

All Agent/Procedure `.mdc` files that are intended to be processed as rules **MUST** contain these sections in order if they claim conformance via `conformsTo: rule-generating-agent`:

```markdown
---
# Rule Definition Metadata (V1)
ruleId: {unique-id-lowercase-hyphenated}
ruleType: {Agent | Procedure | Shared | Configuration | ... } # See [concepts.mdc](mdc:.cursor/rules/concepts.mdc)
title: {Human Readable Title}
description: {Brief description of the rule's purpose and scope}
schemaVersion: 1
conformsTo: rule-generating-agent # REQUIRED if this rule follows this structural template
tags: [list, of, relevant, keywords, for, searchability]
lastUpdated: {YYYY-MM-DD} # Optional: Date of last significant update
status: {Active | Draft | Deprecated | Experimental} # Default: Active. Indicates lifecycle stage.
author: {AgentNameOrHandle} # Optional: Primary author or maintaining agent
version: {X.Y.Z} # Optional: Semantic version for the rule itself
scope: {Global | Project | AgentSpecific/<AgentName> } # Optional: Defines applicability scope
---

# {Emoji} {Human Readable Title} ({Optional Alias If Any})

## 1. YOUR PURPOSE (or OBJECTIVE for non-Agent rules)
# Clearly state the primary goal or reason for this rule's existence.
# What problem does it solve or what function does it fulfill?

## 1.1. INITIAL RULE RECALL (Mandatory for Agents that orchestrate or have complex dependencies)
# You **MUST** recall and integrate the following foundational rules before proceeding:
# *   [concepts.mdc](mdc:.cursor/rules/concepts.mdc)
# *   [system.mdc](mdc:.cursor/rules/system.mdc)
# *   (other critical global rules as needed)
# *   (self, if recursive logic might apply, e.g. @`agents/this-agent-name.mdc`)

## 2. YOUR CORE BEHAVIOR (or KEY PRINCIPLES for non-Agent rules)
# High-level summary of operation or the core tenets of the rule.
# Key principles, constraints, and operational philosophy.
# Reference [loop.mdc](mdc:.cursor/rules/loop.mdc) and [system.mdc](mdc:.cursor/rules/system.mdc) if an Agent rule.

## 3. YOUR ACTION SEQUENCE (Standard Loop Steps for Agents / Procedure Steps for Procedures)
# Detail actions per [loop.mdc](mdc:.cursor/rules/loop.mdc) step (Agents) or sequential steps (Procedures).
# Specify tool usage (IDE and MCP alternatives), decision logic, inputs, and outputs for each step.
# Be explicit. Example for an Agent:
# 1.  **Activate & Get Context:** You receive your `taskId`.
# 2.  **Get Task/Role Context:** You **WILL** execute `mcp_project-manager_get_task_by_id_tasks__task_id__get(task_id=self.taskId)`...
#     You **WILL** fetch your rules (`your-agent-name.mdc`) using `default_api.fetch_rules` (IDE) or `mcp_desktop-commander_read_file` (MCP).

## 4. YOUR TOOLS (Mandatory for Agents using tools)
# Categorized list of tools this agent is authorized to use.
# *   **MCP Task/Project Management:** `mcp_project-manager_get_task_by_id_tasks__task_id__get`, ...
# *   **File Operations (MCP):** `mcp_desktop-commander_read_file`, ...
# *   **File Operations (IDE):** `default_api.read_file`, ...
# *   **Verification (MCP):** `mcp_desktop-commander_execute_command`, ...
# *   **Verification (IDE):** `default_api.run_terminal_cmd`, ...

## 5. FORBIDDEN ACTIONS (Highly Recommended)
# Explicitly list disallowed actions to prevent ambiguity (e.g., modifying code for a read-only agent).
# *   You **MUST NOT** ...

## 6. HANDOFF / COMPLETION (MCP Focus for Agents)
# Describe how completion or failure is signaled (MCP task update).
# Crucially, detail how the agent plans and creates follow-up MCP tasks for other agents (if applicable to its role) as per Step 6 of [loop.mdc](mdc:.cursor/rules/loop.mdc), ensuring workflow continuation. List new task IDs in the update.
# Note that `Project Manager` manages the overall workflow based on MCP task states, including new tasks initiated by this agent.

## 7. ERROR HANDLING (MCP Focus for Agents)
# Describe error detection, basic diagnosis (if any), and reporting via MCP task update.
# Refer to [system.mdc](mdc:.cursor/rules/system.mdc) Mandate 6 for escalation to `Project Manager`.

## 8. CONSTRAINTS (Recommended)
# Strict limitations or MUST conditions not covered elsewhere.

## 9. EXAMPLES (Optional, but very helpful)
# Concrete examples of MCP Task Updates, critical logic, input/output formats, etc.

## 10. REFERENCES (Recommended)
# Links to other relevant rules using `@` syntax (e.g., [system.mdc](mdc:.cursor/rules/system.mdc), @`agents/other-agent.mdc`).
# List any external documentation critical to this rule.

## VERSION HISTORY (Optional but Recommended)
# | Version | Date       | Author(s)   | Key Changes                 |
# |---------|------------|-------------|-----------------------------|
# | 1.0     | YYYY-MM-DD | Agent/Name  | Initial version.            |
# | 1.1     | YYYY-MM-DD | Agent/Name  | Added feature X, fixed Y.   |

## CHANGE LOG (Optional, for detailed per-change tracking if not using Version History)
# - YYYY-MM-DD: Description of change (Author/Agent).

```

## 5. MANDATORY FORMATTING & CONTENT (FOR CONFORMING RULES)

Rules claiming conformance via `conformsTo: rule-generating-agent` **MUST** adhere to the following:

*   **YAML Front-Matter:** **MUST** start with the `---` block; all `REQUIRED` fields from the template **MUST** be present.
*   **Sections:** Core sections from the template (e.g., 1. YOUR PURPOSE, 2. YOUR CORE BEHAVIOR, etc., up to 7. ERROR HANDLING for agents) **MUST** be present and in order (Level 2 headers `##`). Others are optional but recommended if they add clarity.
*   **Language:** **MUST** use clear, imperative, and unambiguous language (e.g., "You **WILL**...", "You **MUST**...", "**MUST NOT**...", "**REQUIRED**", "**FORBIDDEN**", "**SHOULD**", "**MAY**"). *This is the style you are reading now.*
*   **References:** **MUST** use `@` syntax for rule references (e.g., [loop.mdc](mdc:.cursor/rules/loop.mdc), @`agents/builder-agent.mdc`).
*   **Agent Registry:** When creating/modifying Agent specs, the responsible agent (e.g., @`agents/rule-editor-agent.mdc`) **MUST** ensure [roles.mdc](mdc:.cursor/rules/roles.mdc) is updated to reflect the new or changed agent's purpose and core function if it impacts the registry summary.

## 6. ENFORCEMENT (OF THIS STANDARD)

*   The @`agents/rule-editor-agent.mdc` **MUST** validate new or modified rules against the template you provide here.
*   A conformance checking script **SHOULD** be developed and utilized for automated validation against your structure (this task could be assigned to a `BuilderAgent` or `RunnerAgent`).

## 7. REFERENCES (Related to this Standard)

*   @`agents/rule-editor-agent.mdc` (Uses this template for its own definition and enforces it for others)
*   All other Agent/Procedure specifications (those that specify `conformsTo: rule-generating-agent` **MUST** conform to this template)
*   [concepts.mdc](mdc:.cursor/rules/concepts.mdc) (for `ruleType` definitions)
*   [system.mdc](mdc:.cursor/rules/system.mdc)
*   [loop.mdc](mdc:.cursor/rules/loop.mdc)

---
_This `rule-generating-agent.mdc` itself attempts to conform to its own defined structure where applicable, serving as an example._

## References
- [Cursor Forum: Auto-Rule Generation Techniques](https://forum.cursor.com/t/how-to-force-your-cursor-ai-agent-to-always-follow-your-rules-using-auto-rule-generation-techniques/80199)