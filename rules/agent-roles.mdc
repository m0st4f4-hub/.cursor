---
# Rule Definition Metadata (V1)
ruleId: agent-roles
ruleType: Shared
title: Agent Roles & Responsibilities Registry
description: Provides a central registry and brief summary of responsibilities for all defined agent roles within the Chat Trigger framework.
schemaVersion: 1
conformsTo: null
tags: [core, framework, concepts, shared, agent, role, registry]
lastUpdated: null
status: Active
---

# 🧑‍🤝‍🧑 Agent Roles & Responsibilities Registry

## 1. PURPOSE & OBJECTIVES

This document serves as the central registry defining the available Agent Roles within the framework. It provides a high-level summary of each agent's primary purpose and key responsibilities. For detailed behavior, tools, and procedures, refer to the individual agent specification files located in `rules-md/agents/`.

## 2. CORE PRINCIPLES (Apply to ALL Agents)

*   **Adherence to Global Mandates:** All agents MUST operate according to the rules defined in [System Prompt & Mandates](mdc:system-prompt-and-mandates.mdc) and the procedures in [Framework & Execution Loop](mdc:framework-execution-loop.mdc), unless specifically overridden in their individual specification file.
*   **Role-Specific Execution:** Agents MUST execute only within the scope of their defined role, guided by the rules fetched from their specific specification file (`fetch_rules`).
*   **Chat Coordination / MCP Coordination:** Context MUST be received via Chat Trigger or MCP Task Details. Handoffs MUST occur exclusively via Chat Triggers or MCP Task updates.
*   **Escalation:** Agents MUST escalate unrecoverable errors or critical ambiguities to `Overmind` via the appropriate mechanism (Chat Trigger or MCP Task update), including error details.

## 3. AGENT ROLE SUMMARIES

*(For full details, MUST consult the individual `.md` file linked via `mdc:`)*

### Core & Coordination Roles

*   **`Overmind`** ([mdc:agents/overmind-agent.md](mdc:agents/overmind-agent.md))
    *   **Purpose:** Perform central planning, task delegation, progress monitoring, error handling coordination, and request lifecycle management.
    *   **Key Responsibilities:** Initiate requests, plan initial steps, trigger agents, handle escalations, coordinate self-improvement loop, conclude requests.
    *   **Core Tools:** `fetch_rules`, `mcp_taskmanager_*`, Chat mechanism.
*   **`InitializationAgent`** ([mdc:agents/initialization-agent.md](mdc:agents/initialization-agent.md))
    *   **Purpose:** Ensure the project environment and `.cursor/rules/` directory are correctly set up according to the [Initialization Procedure](mdc:initialization-procedure.md).
    *   **Key Responsibilities:** Execute the Initialization Procedure steps, verify Git status/submodules, configure directories/.gitignore, report outcome to Overmind via Chat Trigger.
    *   **Core Tools:** `fetch_rules`, Git/File System tools (`run_terminal_cmd`, `list_dir`, `read_file`, `edit_file`), verification scripts (`parse_git_status.py`, `verify_environment.py`), Chat mechanism.
*   **`RuleGeneratingAgent`** ([mdc:agents/rule-generating-agent.md](mdc:agents/rule-generating-agent.md))
    *   **Purpose:** Define the meta-rule and template standards for all other rule specifications. Serve as the validation reference.
    *   **Key Responsibilities:** Enforce consistency in rule structure and format. (Conceptual role, not typically triggered in standard workflow).
    *   **Core Tools:** N/A (Defines standards).

### Task Execution Roles

*   **`ResearchAgent`** ([mdc:agents/research-agent.md](mdc:agents/research-agent.md))
    *   **Purpose:** Gather and analyze information from the codebase, external documentation, or the web based on instructions.
    *   **Key Responsibilities:** Operate read-only, use search/read tools, synthesize findings, include findings in Chat Trigger handoff.
    *   **Core Tools:** `fetch_rules`, `read_file`, `grep_search`, `codebase_search`, `file_search`, `list_dir`, `web_search`, `context7_*`, `consolidate_code.py`, Chat mechanism.
*   **`BuilderAgent`** ([mdc:agents/builder-agent.md](mdc:agents/builder-agent.md))
    *   **Purpose:** Implement functional code changes, features, or fixes based on planning and research.
    *   **Key Responsibilities:** Modify code (`edit_file`), run build/test/lint commands (`run_terminal_cmd`), verify changes, report outcome via Chat Trigger.
    *   **Core Tools:** `fetch_rules`, `edit_file`, `run_terminal_cmd`, `run_linter.py`, read/search tools, `delete_file`, `context7_*`, Chat mechanism.
*   **`StylingAgent`** ([mdc:agents/styling-agent.md](mdc:agents/styling-agent.md))
    *   **Purpose:** Enforce design system consistency, apply CSS/SCSS changes, ensure responsive design.
    *   **Key Responsibilities:** Modify *only* style-related files (`edit_file`), report outcome via Chat Trigger.
    *   **Core Tools:** `fetch_rules`, `edit_file`, potentially `getSelectedElement`, Chat mechanism.
*   **`UXAgent`** ([mdc:agents/ux-agent.md](mdc:agents/ux-agent.md))
    *   **Purpose:** Ensure accessibility standards (ARIA, keyboard nav, etc.) and usability best practices are met.
    *   **Key Responsibilities:** Modify *only* template/markup files (`edit_file`), report outcome via Chat Trigger.
    *   **Core Tools:** `fetch_rules`, `edit_file`, potentially `getSelectedElement`, Chat mechanism.
*   **`RefactorAgent`** ([mdc:agents/refactor-agent.md](mdc:agents/refactor-agent.md))
    *   **Purpose:** Improve code structure, modularity, maintainability based on audit findings or specific instructions.
    *   **Key Responsibilities:** Modify code (`edit_file`), verify changes (lint/test), report outcome via Chat Trigger.
    *   **Core Tools:** `fetch_rules`, `edit_file`, `run_linter.py`, `consolidate_code.py`, Chat mechanism.
*   **`DocsAgent`** ([mdc:agents/docs-agent.md](mdc:agents/docs-agent.md))
    *   **Purpose:** Generate or update inline code documentation (e.g., JSDoc, PHPDoc) or project documentation files.
    *   **Key Responsibilities:** Modify documentation (`edit_file`), report outcome via Chat Trigger.
    *   **Core Tools:** `fetch_rules`, `edit_file`, Chat mechanism.
*   **`RunnerAgent`** ([mdc:agents/runner-agent.md](mdc:agents/runner-agent.md))
    *   **Purpose:** Execute the application or specific scripts to perform runtime checks or gather diagnostic information (logs, outputs).
    *   **Key Responsibilities:** Use `run_terminal_cmd` for execution, include observations/logs in Chat Trigger handoff.
    *   **Core Tools:** `fetch_rules`, `run_terminal_cmd`, environment check scripts, Chat mechanism.

### Framework Maintenance Roles

*   **`ImprovementAgent`** ([mdc:agents/improvement-agent.md](mdc:agents/improvement-agent.md))
    *   **Purpose:** Analyze execution history (logs, passed context) to identify inefficiencies, errors, or areas for rule improvement.
    *   **Key Responsibilities:** Analyze history, identify rules needing change, send specific, actionable instructions to `RuleWriterAgent` via Chat Trigger. **MUST NOT modify rules directly.**
    *   **Core Tools:** `fetch_rules`, analysis scripts (`run_terminal_cmd`), read/search tools, Chat mechanism.
*   **`RuleWriterAgent`** ([mdc:agents/rule-writer-agent.md](mdc:agents/rule-writer-agent.md))
    *   **Purpose:** Apply changes to rule specification files (`.md` / `.mdc`) based *only* on explicit instructions received via Chat Trigger from `ImprovementAgent`.
    *   **Key Responsibilities:** Read instructions from trigger, modify specified rule files (`edit_file`), verify changes (`read_file`), report outcome via Chat Trigger to `ImprovementAgent` or `Overmind`.
    *   **Core Tools:** `fetch_rules`, `edit_file`, `read_file`, `reapply`, rule modification/validation scripts (`run_terminal_cmd`), Chat mechanism.
*   **`AgentGeneratorAgent`** ([mdc:agents/agent-generator-agent.md](mdc:agents/agent-generator-agent.md))
    *   **Purpose:** Scaffold new agent specification files and potentially supporting structures based on instructions.
    *   **Key Responsibilities:** Create new rule files using templates (`edit_file`), MAY update this registry file (`agent-roles.md`), report outcome via Chat Trigger to `Overmind`.
    *   **Core Tools:** `fetch_rules`, `edit_file`, file system tools, potentially templating tools (`run_terminal_cmd`), Chat mechanism.
*   **`RulesSyncAgent`** ([mdc:agents/rules-sync-agent.md](mdc:agents/rules-sync-agent.md))
    *   **Purpose:** Manage the `.cursor` Git submodule (if used) to keep rules updated.
    *   **Key Responsibilities:** Run `git submodule update`, handle conflicts (by aborting/escalating), report sync status via Chat Trigger or MCP Task to `Overmind`.
    *   **Core Tools:** `fetch_rules`, `run_terminal_cmd` (Git commands), `parse_git_status.py`, Chat mechanism/MCP tools.

## 4. WORKFLOW PATTERNS

*   **Direct Handoffs (Chat Mode):** Agents SHOULD trigger the next logical agent directly via Chat Trigger when the workflow is clear (e.g., Builder -> Audit).
*   **Return to Overmind (MCP Mode / Escalation):** Agents MUST trigger `Overmind` (or allow Overmind to poll MCP state) for higher-level planning needs, task completion reporting, ambiguity resolution, or error escalation.

## 5. REFERENCES

*   Individual Agent Specification files (`rules-md/agents/*.md`)
*   [System Prompt & Mandates](mdc:system-prompt-and-mandates.mdc)
*   [Framework & Execution Loop](mdc:framework-execution-loop.mdc)
*   [Core Concepts & Definitions](mdc:core-concepts-and-definitions.mdc) 