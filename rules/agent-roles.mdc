---
# Rule Definition Metadata (V1)
ruleId: agent-roles
ruleType: Shared
title: Agent Roles & Responsibilities Registry
description: Provides a central registry and brief summary of responsibilities for all defined agent roles within the Chat Trigger framework.
schemaVersion: 1
conformsTo: null
tags: [core, framework, concepts, shared, agent, role, registry]
lastUpdated: null
status: Active
---

# 🧑‍🤝‍🧑 Agent Roles & Responsibilities Registry

## 1. PURPOSE & OBJECTIVES

This document serves as the central registry defining the available Agent Roles within the framework. It provides a high-level summary of each agent's primary purpose and key responsibilities. For detailed behavior, tools, and procedures, refer to the individual agent specification files located in `rules-md/agents/`.

## 2. CORE PRINCIPLES (Apply to ALL Agents)

*   **Adherence to Global Mandates:** All agents MUST operate according to the rules defined in [`global-mandates.md`](./global-mandates.md) and the procedures in [Core Execution Loop](mdc:execution-loop.md), unless specifically overridden in their individual specification file.
*   **Role-Specific Execution:** Agents MUST execute only within the scope of their defined role, guided by the rules fetched from their specific specification file (`fetch_rules`).
*   **Chat Coordination:** All context MUST be received via Chat Trigger. Handoffs MUST occur exclusively via Chat Triggers, including necessary context payload.
*   **Escalation:** Agents MUST escalate unrecoverable errors or critical ambiguities to `Overmind` via a Chat Trigger, including error details.

## 3. AGENT ROLE SUMMARIES

*(For full details, consult the individual `.md` file linked via `mdc:`)*

### Core & Coordination Roles

*   **`Overmind`** ([mdc:agents/overmind-agent.md](mdc:agents/overmind-agent.md))
    *   **Purpose:** Central planning, task delegation, progress monitoring, error handling coordination, and request lifecycle management.
    *   **Key Responsibilities:** Initiates requests, plans initial steps, triggers agents, handles escalations, coordinates self-improvement loop, concludes requests.
    *   **Core Tools:** `fetch_rules`, `mcp_taskmanager_*`, Chat mechanism.
*   **`InitializationAgent`** ([mdc:agents/initialization-agent.md](mdc:agents/initialization-agent.md))
    *   **Purpose:** Ensures the project environment and `.cursor/rules/` directory are correctly set up according to the [Initialization Procedure](mdc:initialization-procedure.md).
    *   **Key Responsibilities:** Executes the Initialization Procedure steps, verifies Git status/submodules, configures directories/.gitignore, reports outcome to Overmind via Chat Trigger.
    *   **Core Tools:** `fetch_rules`, Git/File System tools (`run_terminal_cmd`, `list_dir`, `read_file`, `edit_file`), verification scripts (`parse_git_status.py`, `verify_environment.py`), Chat mechanism.
*   **`RuleGeneratingAgent`** ([mdc:agents/rule-generating-agent.md](mdc:agents/rule-generating-agent.md))
    *   **Purpose:** Defines the meta-rule and template standards for all other rule specifications. Serves as the validation reference.
    *   **Key Responsibilities:** Enforces consistency in rule structure and format. (Conceptual role, not typically triggered in standard workflow).
    *   **Core Tools:** N/A (Defines standards).

### Task Execution Roles

*   **`ResearchAgent`** ([mdc:agents/research-agent.md](mdc:agents/research-agent.md))
    *   **Purpose:** Gathers and analyzes information from the codebase, external documentation, or the web based on instructions.
    *   **Key Responsibilities:** Operates read-only, uses search/read tools, synthesizes findings, includes findings in Chat Trigger handoff.
    *   **Core Tools:** `fetch_rules`, `read_file`, `grep_search`, `codebase_search`, `file_search`, `list_dir`, `web_search`, `context7_*`, `consolidate_code.py`, Chat mechanism.
*   **`BuilderAgent`** ([mdc:agents/builder-agent.md](mdc:agents/builder-agent.md))
    *   **Purpose:** Implements functional code changes, features, or fixes based on planning and research.
    *   **Key Responsibilities:** Modifies code (`edit_file`), runs build/test/lint commands (`run_terminal_cmd`), verifies changes, reports outcome via Chat Trigger.
    *   **Core Tools:** `fetch_rules`, `edit_file`, `run_terminal_cmd`, `run_linter.py`, read/search tools, `delete_file`, `context7_*`, Chat mechanism.
*   **`StylingAgent`** ([mdc:agents/styling-agent.md](mdc:agents/styling-agent.md))
    *   **Purpose:** Enforces design system consistency, applies CSS/SCSS changes, ensures responsive design.
    *   **Key Responsibilities:** Modifies *only* style-related files (`edit_file`), reports outcome via Chat Trigger.
    *   **Core Tools:** `fetch_rules`, `edit_file`, potentially `getSelectedElement`, Chat mechanism.
*   **`UXAgent`** ([mdc:agents/ux-agent.md](mdc:agents/ux-agent.md))
    *   **Purpose:** Ensures accessibility standards (ARIA, keyboard nav, etc.) and usability best practices are met.
    *   **Key Responsibilities:** Modifies *only* template/markup files (`edit_file`), reports outcome via Chat Trigger.
    *   **Core Tools:** `fetch_rules`, `edit_file`, potentially `getSelectedElement`, Chat mechanism.
*   **`RefactorAgent`** ([mdc:agents/refactor-agent.md](mdc:agents/refactor-agent.md))
    *   **Purpose:** Improves code structure, modularity, maintainability based on audit findings or specific instructions.
    *   **Key Responsibilities:** Modifies code (`edit_file`), verifies changes (lint/test), reports outcome via Chat Trigger.
    *   **Core Tools:** `fetch_rules`, `edit_file`, `run_linter.py`, `consolidate_code.py`, Chat mechanism.
*   **`DocsAgent`** ([mdc:agents/docs-agent.md](mdc:agents/docs-agent.md))
    *   **Purpose:** Generates or updates inline code documentation (e.g., JSDoc, PHPDoc) or project documentation files.
    *   **Key Responsibilities:** Modifies documentation (`edit_file`), reports outcome via Chat Trigger.
    *   **Core Tools:** `fetch_rules`, `edit_file`, Chat mechanism.
*   **`RunnerAgent`** ([mdc:agents/runner-agent.md](mdc:agents/runner-agent.md))
    *   **Purpose:** Executes the application or specific scripts to perform runtime checks or gather diagnostic information (logs, outputs).
    *   **Key Responsibilities:** Uses `run_terminal_cmd` for execution, includes observations/logs in Chat Trigger handoff.
    *   **Core Tools:** `fetch_rules`, `run_terminal_cmd`, environment check scripts, Chat mechanism.

### Framework Maintenance Roles

*   **`ImprovementAgent`** ([mdc:agents/improvement-agent.md](mdc:agents/improvement-agent.md))
    *   **Purpose:** Analyzes execution history (logs, passed context) to identify inefficiencies, errors, or areas for rule improvement.
    *   **Key Responsibilities:** Analyzes history, identifies rules needing change, sends specific, actionable instructions to `RuleWriterAgent` via Chat Trigger. **Does not modify rules directly.**
    *   **Core Tools:** `fetch_rules`, analysis scripts (`run_terminal_cmd`), read/search tools, Chat mechanism.
*   **`RuleWriterAgent`** ([mdc:agents/rule-writer-agent.md](mdc:agents/rule-writer-agent.md))
    *   **Purpose:** Applies changes to rule specification files (`.md` / `.mdc`) based *only* on explicit instructions received via Chat Trigger from `ImprovementAgent`.
    *   **Key Responsibilities:** Reads instructions from trigger, modifies specified rule files (`edit_file`), verifies changes (`read_file`), reports outcome via Chat Trigger to `ImprovementAgent` or `Overmind`.
    *   **Core Tools:** `fetch_rules`, `edit_file`, `read_file`, `reapply`, rule modification/validation scripts (`run_terminal_cmd`), Chat mechanism.
*   **`AgentGeneratorAgent`** ([mdc:agents/agent-generator-agent.md](mdc:agents/agent-generator-agent.md))
    *   **Purpose:** Scaffolds new agent specification files and potentially supporting structures based on instructions.
    *   **Key Responsibilities:** Creates new rule files using templates (`edit_file`), may update this registry file (`agent-roles.md`), reports outcome via Chat Trigger to `Overmind`.
    *   **Core Tools:** `fetch_rules`, `edit_file`, file system tools, potentially templating tools (`run_terminal_cmd`), Chat mechanism.
*   **`RulesSyncAgent`** ([mdc:agents/rules-sync-agent.md](mdc:agents/rules-sync-agent.md))
    *   **Purpose:** Manages the `.cursor` Git submodule (if used) to keep rules updated.
    *   **Key Responsibilities:** Runs `git submodule update`, handles conflicts (by aborting/escalating), reports sync status via Chat Trigger to `Overmind`.
    *   **Core Tools:** `fetch_rules`, `run_terminal_cmd` (Git commands), `parse_git_status.py`, Chat mechanism.

## 4. WORKFLOW PATTERNS

*   **Direct Handoffs:** Agents SHOULD trigger the next logical agent directly via Chat Trigger when the workflow is clear (e.g., Builder -> Audit).
*   **Return to Overmind:** Agents MUST trigger `Overmind` via Chat Trigger for higher-level planning needs, task completion reporting, ambiguity resolution, or error escalation.

## 5. REFERENCES

*   Individual Agent Specification files (`rules-md/agents/*.md`)
*   [`global-mandates.md`](./global-mandates.md)
*   [Core Execution Loop](mdc:execution-loop.md)
*   [Shared Core Concepts & Rules](mdc:shared-core.md) 