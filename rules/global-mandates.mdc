---
# Rule Definition Metadata (V1)
ruleId: global-mandates
ruleType: Core
title: Global Mandates & Core Operational Rules (MCP Coordination)
description: Non-negotiable operational rules for the MCP Task Manager based framework.
schemaVersion: 1
conformsTo: null
tags: [core, framework, rules, mandatory, constraints, mcp]
lastUpdated: null
status: Active
---

# ðŸ“œ Global Mandates (NON-NEGOTIABLE - MCP Coordination)

Universal rules for the MCP-centric framework. Violation MUST result in critical failure.

1.  **Strict Role Adherence:** Agents MUST operate exclusively within defined role boundaries ([Agent Roles & Responsibilities](mdc:agent-roles.md), agent `.md`). Unauthorized actions MUST result in critical failure.
2.  **Core Execution Loop (MCP Version):** Adherence to the MCP-based [Core Execution Loop](mdc:execution-loop.md) MUST be followed.
3.  **MCP Task Manager as Single Source of Truth:** All operational task context (details, findings, status, errors) MUST be read from and persisted to the assigned `taskId` in MCP Task Manager using authorized tools (`mcp_taskmanager_open_task_details`, `mcp_taskmanager_update_task`, `mcp_taskmanager_mark_task_done`). Storing or passing state outside MCP MUST NOT occur.
4.  **Mandatory Task Management Integration (Expanded):**
    *   All actionable work MUST be represented as MCP tasks.
    *   `Overmind` MUST perform initial request planning (`mcp_taskmanager_request_planning`).
    *   Agents MUST use `mcp_taskmanager_open_task_details` to get context (Loop Step 2).
    *   Agents MUST update task descriptions (`mcp_taskmanager_update_task`) with findings/results/errors before marking done (Loop Step 5).
    *   Agents MUST mark tasks done (`mcp_taskmanager_mark_task_done`) upon completion (Loop Step 5).
    *   `Overmind` MUST use `mcp_taskmanager_get_next_task` to drive the workflow.
5.  **Aggressive Tool Utilization:** Agents SHOULD use their authorized tools liberally to gather context and perform actions.
6.  **Tool Usage Restrictions:** Agents MUST only use authorized tools listed in their specification.
7.  **Error Handling & Escalation (MCP Context):** Unrecoverable errors MUST be logged concisely in the relevant task description (`mcp_taskmanager_update_task`). Agents MUST HALT execution after updating the task. `Overmind` WILL detect failed tasks via MCP.
8.  **No User Interaction (Except Diagnostics):** Agents MUST NOT interact with the user unless explicitly requesting diagnostic information as part of a defined procedure.
9.  **Idempotency & Verification:** Actions SHOULD be idempotent where possible. Verification steps MUST be performed as specified in procedures.
10. **Security & Safety:** Agents MUST NOT execute destructive or unsafe commands.

# Global Agent Mandates (MCP Version)

**Rules for ALL agents unless overridden by specific role.**

1.  **ACTIVATE ON TASK ASSIGNMENT:** Activate ONLY when assigned a task `taskId` by the framework/`Overmind`.
2.  **GET TASK CONTEXT:** Agents MUST use `mcp_taskmanager_open_task_details` with the assigned `taskId` to get current context (description) at the start of their turn (Loop Step 2).
3.  **FETCH OWN RULES:** Agents MUST use `fetch_rules` to get their role specification (Loop Step 3).
4.  **ROLE-PROMPT EXECUTION:** Construct prompt using fetched rules and task context from MCP (Loop Step 4).
5.  **UPDATE TASK STATE & TERMINATE:** Agents MUST update the relevant `taskId` description with findings/results/errors using `mcp_taskmanager_update_task` and mark task done using `mcp_taskmanager_mark_task_done` as appropriate as the **final action** before ending their turn (Loop Step 5).
6.  **NO WAITING:** Agents MUST NOT wait for external events or user input unless specified. Terminate turn immediately after updating MCP.
7.  **HALT ON ERROR:** On critical error, MUST update task description via `mcp_taskmanager_update_task` (if possible) indicating the failure and HALT execution. `Overmind` WILL handle the escalation based on the MCP task state.
8.  **USE AUTHORIZED TOOLS:** Agents MUST only use tools listed in their specification.
9.  **ADHERE TO HIERARCHY:** Agents MUST respect the operational hierarchy (e.g., `Overmind` direction).
10. **CODE EDIT TAG:** Code edits proposed via `edit_file` SHOULD use appropriate language comments (e.g., `// ... existing code ...`).
11. **NO DIRECT COMMUNICATION:** Agents MUST NOT attempt direct communication outside the MCP state and defined Chat Trigger mechanism.

## 8. Tool Usage Principles

*   **Mandate #5 (was #6):** Agents SHOULD utilize analysis tools aggressively...
*   **Mandate #6 (was #7):** Agents SHOULD use focused file reading: When using `read_file`... 