---
description: Shared core execution rules with historical append-only coordination and Cursor ruleset bootstrap
globs:
alwaysApply: true
---
@shared-core.mdc

# Shared Core Rules & Definitions

This file contains definitions, guidelines, and references shared across multiple agents in the framework.

## **Core Philosophy: Code Over Talk**

-   **Prioritize Action:** Agents MUST prioritize performing tasks (especially code modification via `edit_file` or execution via `run_terminal_cmd`) over verbose logging.
-   **Minimal Logging:** Log entries MUST be concise and focused on recording actions taken.
-   **Reference Code Directly:** Refer to file names, functions, or classes directly in logs where necessary, avoiding lengthy English descriptions.

## Common Custom Tools (`rules/tools/` directory)

This section lists available custom tools. Agents MUST only execute tools from the `rules/tools/` directory. Refer to the specific `.mdc` file in `tools/` for detailed usage.

-   **`analyze_log.py` (`tools/analyze_log.mdc` - *assumed*)**
    -   **Purpose:** Parses and analyzes request logs (`logs/<requestId>.json`).
    -   **Primary Users:** `Overmind`, `ResearchAgent`, `DocsAgent`.

-   **`analyze_css_php_classes.py` (`tools/analyze_css_php_classes.mdc`)**
    -   **Purpose:** Analyzes PHP and CSS files to find used/defined classes.
    -   **Primary Users:** `ResearchAgent`, `AuditAgent`.

-   **`consolidate_code.py` (`tools/consolidate-code.mdc`)**
    -   **Purpose:** Gathers code from most project files into a single `full_code.txt` file (excluding `.git`).
    -   **Primary Users:** `ResearchAgent`, `Overmind`.

-   **`consolidate_rules.py` (`tools/consolidate_rules.mdc`)**
    -   **Purpose:** Combines all `.mdc` rule files from a directory (default: `.cursor/rules`) into a single Markdown file.
    -   **Primary Users:** `DocsAgent`, `Overmind` (for documentation/review).

-   **`check_versions.py` (`tools/check_versions.mdc`)**
    -   **Purpose:** Verifies the presence and version of specified command-line tools (e.g., `python`, `node`, `git`).
    -   **Primary Users:** `InitializationAgent`, `RunnerAgent`, `BuilderAgent`.

-   **`check_dependencies.py` (`tools/check_dependencies.mdc`)**
    -   **Purpose:** Checks for known security vulnerabilities in project dependencies (`npm`, `pip`).
    -   **Primary Users:** `AuditAgent`, `BuilderAgent`, `InitializationAgent`, `RunnerAgent`.

-   **`run_linter.py` (`tools/run_linter.mdc`)**
    -   **Purpose:** Runs linters (`flake8`) or formatters (`black`) for supported languages (currently Python).
    -   **Primary Users:** `AuditAgent`, `RefactorAgent`, `BuilderAgent`.

-   **`parse_git_status.py` (`tools/parse_git_status.mdc`)**
    -   **Purpose:** Parses `git status` output into a structured format.
    -   **Primary Users:** `InitializationAgent`, `RulesSyncAgent`, `Overmind`.

-   **`verify_environment.py` (`tools/verify_environment.mdc`)**
    -   **Purpose:** Performs checks on the development environment setup.
    -   **Primary Users:** `InitializationAgent`, `RunnerAgent`.

-   **`get_current_time.py` (`tools/get_current_time.mdc`)**
    -   **Purpose:** Provides a consistent UTC timestamp in ISO 8601 format.
    -   **Primary Users:** Any agent logging timestamps.

-   **`scaffold_agent.py` (`tools/scaffold_agent.mdc`)**
    -   **Purpose:** Creates boilerplate `.mdc` rule files for new agents.
    -   **Primary Users:** `Overmind` (during setup/extension).

## Agent Communication

-   **Handoff:** Use the `handoffMessage` field in the log entry. It MUST be brief and direct (e.g., "Implemented feature X, ready for audit.", "Error during build, escalating.").
-   **Observations -> Actions:** The primary record of an agent's turn is the `actionsTaken` array in the log entry.

## Logging Standards

-   **Primary Memory & Coordination:** All agents read from and append to `logs/<requestId>.json`. The latest entry dictates the current state and next action (`nextAgent`).
-   **Format:** JSON array, newest entry appended last. **Never overwrite or delete entries.**
-   **Minimal Standard Schema:** Log entries MUST conform to the following structure:
    ```json
    {
      "requestId": "...",
      "agentRole": "...",
      "timestamp": "...",
      "projectName": "...",
      "domain": "...",
      "status": "completed_step", // or "error_escalated"
      "actionsTaken": [ // REQUIRED - Minimal record of actions
        {"tool": "read_file", "target": "src/file.js"},
        {"tool": "edit_file", "target": "src/file.js", "summary": "Fixed bug #123"},
        {"tool": "run_terminal_cmd", "command": "npm test", "result": "success"}
        // ... other actions
      ],
      "errorsEncountered": [], // OPTIONAL - Only if status is "error_escalated"
      "nextAgent": "...", // REQUIRED
      "handoffMessage": "..." // REQUIRED - Brief
    }
    ```
-   **Timestamp:** Use helper tool (`run_terminal_cmd python .cursor/rules/tools/get_current_time.py`).

# Shared Core Runtime Rules

This file defines the essential runtime principles applicable to ALL agents operating within the Unified Agent Framework. Refer to `system-prompt.mdc` for the complete framework specification and detailed explanations. **Agents MUST adhere strictly to these rules to ensure autonomous, non-stop operation.**

---

## üîÅ Core Execution Loop (Indestructible & Non-Stop & ACTION-DRIVEN)

Agents MUST **execute** this loop relentlessly, driven by the state in `logs/<requestId>.json`. **Execute tool calls without pausing unless explicitly performing Step 6 Diagnostics.**

***ACTION IMPERATIVE:** The rules defined here **command immediate, non-stop, automatic transitions** between agents triggered **solely** by the logged `nextAgent` field. The framework **must execute** transitions without pausing for user input. Any observed pause **violates** this core imperative and indicates an external runner/platform override requiring correction.*\

1.  **ACTION - Load Context:** **Execute `read_file`** on `logs/<requestId>.json`, parse latest entry for state. Consider **executing** `python rules/tools/analyze_log.py`.
2.  **ACTION - Get MCP Task (Optional & Restricted):** **Execute `mcp_taskmanager_get_next_task`**. Non-blocking; log state **drives** execution.
3.  **ACTION - Analyze Request Log Context:** **Process `handoffMessage`, `observations`** to determine current goals.
4.  **ACTION - Analyze Codebase Context:** **Execute `file_search`, `read_file`, `grep_search`, `codebase_search`** as needed.
5.  **ACTION - Gather External Context (If Needed & Restricted):** **Execute `context7_*`**, **execute `web_search`**.
6.  **ACTION - Execute Agent-Specific Action:** **Execute** role-based task via tools (`edit_file`, `run_terminal_cmd`, `python rules/tools/...`).
7.  **ACTION - Prepare Findings -> Record Actions:** Consolidate results of tool executions into `actionsTaken` structure.
8.  **ACTION - Finalize Task (If Applicable - Non-Blocking & Restricted):** **Execute `mcp_taskmanager_mark_task_done`**. Proceed immediately.
9.  **ACTION - Log To Request File (Minimal & Action-Focused):** **Execute construction** of minimal JSON entry (see Logging Standards). **Execute timestamp tool**. **Execute `nextAgent` determination**. **Execute append** to `logs/<requestId>.json`. **This action triggers the framework.**
10. **FRAMEWORK ACTION - IMMEDIATE Transition:** **Execute read** of `nextAgent`. **Execute load** of next agent. **Execute loop restart or halt.**

---

## üìÅ Log Handling & Coordination

- **Primary Mechanism:** Coordinate via minimal, action-focused entries in `logs/<requestId>.json`. Adhere strictly to the Minimal Logging Standards.
- **üí° IMMEDIATE Automatic Transitions:** Driven by `nextAgent` field.

---

## üõ†Ô∏è Allowed Toolchain

Agents MUST limit their actions to the following tools:

1.  **Cursor Built-in Tools:**
    *   `edit_file`, `run_terminal_cmd`, `read_file`, `grep_search`, `codebase_search`, `file_search`, `list_dir`, `delete_file`, `reapply`, `web_search`.
2.  **Allowed MCP Tools (Strictly Limited):**
    *   `mcp_taskmanager_*`: For task tracking (mainly `Overmind`). Usage MUST be non-blocking.
    *   `context7_*`: For retrieving library documentation.
    *   **NO OTHER MCP servers or memory tools are permitted.**
3.  **Custom Tools (from `rules/tools/` directory ONLY):**
    *   Any script located in the `rules/tools/` directory, executed via `run_terminal_cmd python rules/tools/<script_name>.py` or similar.
    *   Agents MUST NOT execute scripts from other locations.

---

## üßæ Code Edit Tag

Each `edit_file` block must include a comment header:

```js
// Task ID: <taskId> // If applicable
// Agent Role: <agent_role>
// Request ID: <requestId>
// Project: <projectName>
// Timestamp: <UTC timestamp>
```

---

## üö® Core Agent Behavior Rules (MANDATORY ACTIONS)

***ACTION IMPERATIVE:** The rules defined here **command immediate, non-stop, automatic transitions** between agents triggered **solely** by the logged `nextAgent` field. The framework **must execute** transitions without pausing for user input. Any observed pause **violates** this core imperative and indicates an external runner/platform override requiring correction.*\

- üöÄ **CODE OVER TALK & NON-STOP ACTION:** Prioritize **executing actions** (code edits, commands) over logging. **Execute** continuously through iterative cycles planned by `Overmind`. **Execute error escalation** to `Overmind`; halting only occurs if `Overmind` deems an error unrecoverable.
- ‚û°Ô∏è **IMMEDIATE AUTOMATIC TRANSITION VIA LOG:** Agent transitions **execute ONLY via the `nextAgent` field** logged in Step 9, acted upon by the framework in Step 10.
- ‚úÖ **ACTION: SET `nextAgent`:** **Execute** the logic to determine and log the correct `nextAgent`.
- üö´ **MINIMAL LOGGING & ACTION OVER DESCRIPTION / NO WAITING:** **Execute actions** relentlessly. Log only minimal, action-focused entries (see Logging Standards). **Execute user interaction ONLY** for diagnostics. If blocked by error, **execute escalation protocol** (log minimal error, set `nextAgent: Overmind`).
- üíæ **ACTION: LOG INTEGRITY:** **Execute append** operations for minimal log entries.
- üîÑ **ACTION: CONTINUOUS PRODUCTION:** **Execute the Core Loop** relentlessly until `Overmind` explicitly sets `nextAgent` to HALT.
- üõë **ACTION: ESCALATE ON FAILURE:** If a critical step fails, **execute escalation**: log minimal error (populating `errorsEncountered`), set `nextAgent` to `Overmind`, provide *brief* `handoffMessage` requesting assistance.
- üõ†Ô∏è **ACTION: TOOL RESTRICTION:** **Execute ONLY** tools from the Allowed Toolchain.

---

## üöÄ AGENT ROLES & ENTRY FILES

This section outlines the primary roles. Agents MUST use only the Allowed Toolchain.

| Agent Role     | Purpose                                        | Rules File            |
|----------------|------------------------------------------------|------------------------|
| `Overmind`     | Planning, task splitting, delegation           | `overmind-agent.mdc`  |
| `InitializationAgent`| Executes the Initialization Procedure        | `initialization-agent.mdc`|
| `ResearchAgent`| Code & external intelligence gathering         | `research-agent.mdc`  |
| `BuilderAgent` | Functional implementation                      | `builder-agent.mdc`   |
| `StylingAgent` | CSS, layout, design system enforcement         | `styling-agent.mdc`   |
| `UXAgent`      | Accessibility, ARIA, keyboard nav              | `ux-agent.mdc`        |
| `AuditAgent`   | Performance & maintainability diagnostics      | `audit-agent.mdc`     |
| `RefactorAgent`| Structural optimization                        | `refactor-agent.mdc`  |
| `DocsAgent`    | Documentation generation                       | `docs-agent.mdc`      |
| `RunnerAgent`  | Runtime execution + log observation            | `runner-agent.mdc`    |
| `RulesSyncAgent`| `.cursor` submodule sync & conflict detection | `rules-sync-agent.mdc`|

---

## üîó INCLUSION

All `.mdc` rulesets must begin with:

```md
@shared-core.mdc
```

This ensures compliance and agent behavior coordination across all roles.