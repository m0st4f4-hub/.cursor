---
description: "[TODO: Add description]"
globs:
  - "*.*"
alwaysApply: false
---

# üß± Shared Core Concepts & Rules

This document defines foundational elements shared across all agents and processes within the Unified Agent Framework.

## üöÄ ACTION IMPERATIVE

**This is the absolute core directive:**

***Agents MUST execute actions continuously and transition AUTOMATICALLY based SOLELY on the `nextAgent` field logged in the request log file.***

*   **üö´ NO WAITING:** Agents **NEVER** wait for user prompts (like "proceed", "continue", "ok"), confirmations, or external triggers *unless* performing the explicit Step 6 Diagnostics exception in the [Execution Loop](mdc:execution-loop.mdc#step-6-action---execute-agent-specific-action).
*   **‚û°Ô∏è IMMEDIATE AUTOMATIC TRANSITION:** Transitions between agents are **immediate** and handled **by the framework**, triggered **only** by the `nextAgent` value in the latest log entry ([Log Handling - Coordination via nextAgent](mdc:log-handling.mdc#coordination-via-nextagent)).
*   **üîÑ RELENTLESS PROGRESS:** The system is designed for non-stop, autonomous execution. Any pause not related to Step 6 Diagnostics is a violation of this imperative.
*   **üë§ USER INPUT:** User input is generally **ignored** during active execution unless it's providing specific diagnostic data explicitly requested by an agent in Step 6.

## üÜî Request ID (`requestId`)

*   **Purpose:** A unique identifier for a complete user request or task sequence.
*   **Format:** String (e.g., `req_12345abc`, `task_refactor_auth_20231027`).
*   **Usage:**
    *   Used as the filename for the request-specific log (`logs/<requestId>.json`). See [Log Handling](mdc:log-handling.mdc).
    *   Included in MCP Taskmanager calls (`requestId` parameter).
    *   Included in [Code Edit Tags](mdc:shared-core.mdc#code-edit-tag).
*   **Origin:** Typically generated by `Overmind` when initiating a new request or can be provided externally.

## ‚öôÔ∏è Framework

*   **Definition:** The underlying engine or platform executing the agents.
*   **Responsibility:**
    *   Loads the appropriate agent rules based on the `nextAgent` field from the log.
    *   Provides the tools (MCP, file system, terminal, search) to the active agent.
    *   **Enforces the IMMEDIATE AUTOMATIC TRANSITION** based on the `nextAgent` field ([Log Handling - Coordination via nextAgent](mdc:log-handling.mdc#coordination-via-nextagent)).
    *   Manages the overall execution lifecycle.
*   **Interaction:** Agents interact *with* the framework primarily by receiving context (log state) and calling tools provided *by* the framework.

## ü™µ Log File (`logs/<requestId>.json`)

*   **The Single Source of Truth:** As detailed in [Log Handling](mdc:log-handling.mdc), this append-only JSON array is the **exclusive** mechanism for:
    *   State persistence between agent turns.
    *   Historical context.
    *   **Triggering the next agent via the `nextAgent` field.**
*   **Mandatory Usage:** All agents **MUST** read the log at the start of their turn and **MUST** append a valid log entry (including `nextAgent`) at the end.

## `nextAgent` Field

*   **Critical Control Signal:** The string value in the `nextAgent` field of the **latest** log entry dictates which agent the **Framework** will execute next.
*   **Automatic Trigger:** This is **not** a suggestion; it's the direct command for the Framework's immediate transition mechanism. See [Log Handling - Coordination via nextAgent](mdc:log-handling.mdc#coordination-via-nextagent).
*   **Values:** Must be a valid [Agent Role](mdc:agent-roles.mdc) name (e.g., `"BuilderAgent"`, `"Overmind"`) or `null`/`"HALT"` for completion/stop.

## üõ†Ô∏è Mandatory MCP Toolchain

These tools form the baseline capabilities available to most agents. Specific agents may have additional specialized tools.

| Tool                      | Purpose                                                                                                                            | Notes                                                                                                                                                                                                                              |
|---------------------------|------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| `mcp_taskmanager_*`       | Task tracking & management.                                                                                                        | Primarily used by `Overmind`. `mark_task_done` is non-blocking for the agent calling it; the agent proceeds immediately to Step 9 (Logging). User approval (`approve_task_completion`) happens **outside** the agent's execution loop. |
| `edit_file`               | Apply code changes or create files.                                                                                                | Requires adherence to the [Code Edit Tag](#code-edit-tag) format.                                                                                                                                                                  |
| `run_terminal_cmd`        | Execute shell commands (builds, tests, environment checks, **custom tool scripts**).                                                 | Use `python tools/script_name.py`, `powershell tools/script_name.ps1`, etc., to run custom tools located in the `tools/` directory.                                                                                                   |
| `context7_*`              | Fetch library/framework documentation (`resolve-library-id` first, then `get-library-docs`).                                       | Used by `ResearchAgent`, `BuilderAgent`, etc., for understanding APIs, syntax, patterns.                                                                                                                                           |
| `web_search`              | Access external web information (error messages, best practices, non-library specific info).                                     | Used by `ResearchAgent`, `BuilderAgent` (for error resolution).                                                                                                                                                                    |
| `file_search`/`read_file` | Find and read files within the codebase.                                                                                           | Fundamental for context gathering by most agents.                                                                                                                                                                                  |
| `list_dir`                | Explore directory structures.                                                                                                      | Useful for initial exploration or verifying file locations.                                                                                                                                                                        |
| `grep_search`             | Perform text/regex searches within files.                                                                                          | More targeted than `codebase_search` for specific strings or patterns.                                                                                                                                                             |
| `codebase_search`         | Perform semantic searches for concepts or functionality.                                                                           | Broader search than `grep_search`; good for finding related code when exact terms are unknown.                                                                                                                                     |
| `delete_file`             | Remove files.                                                                                                                      | Use with caution. `InitializationAgent` might use it for cleanup.                                                                                                                                                                  |
| `reapply`                 | Request re-application of the last `edit_file` if the first attempt failed unexpectedly.                                           | Use sparingly, only immediately after a failed `edit_file` diff.                                                                                                                                                                   |

## üêç Common Custom Tools (`tools/` directory)

These are example Python scripts (run via `run_terminal_cmd`) that agents can leverage. Agents can also *create* new tools here.

*   **`analyze_log.py`:** Parses a `logs/<requestId>.json` file to extract summaries, timelines, or specific event types. Useful for `Overmind`, `DocsAgent`, `ImprovementAgent`.
*   **`verify_environment.py`:** Checks for presence and basic configuration of required development tools (e.g., Node.js, Python, Git, specific linters). Used by `InitializationAgent`, `RunnerAgent`.
*   **`parse_git_status.py`:** Runs `git status --porcelain=v1` and parses the output into a structured format (JSON) indicating staged, unstaged, untracked files, and branch status. Used by `InitializationAgent`, `RulesSyncAgent`, potentially `Overmind`.
*   **`check_dependencies.py`:** Analyzes project dependency files (`package.json`, `requirements.txt`, etc.) for potential issues (e.g., outdated versions, conflicts - *basic checks*). Used by `InitializationAgent`, `BuilderAgent`, `AuditAgent`, `RunnerAgent`.
*   **`run_linter.py`:** Executes a configured linter (e.g., ESLint, Pylint) on specified files or directories and reports results. Used by `BuilderAgent`, `RefactorAgent`, `AuditAgent`.
*   **`check_versions.py`:** Specifically checks versions of critical tools/libraries against predefined minimums or ranges. Used by `InitializationAgent`, `BuilderAgent`, `RunnerAgent`.
*   **`consolidate_code.py`:** (Conceptual) Takes multiple file paths as input, reads them, and outputs a consolidated block of text/code, potentially with separators. Useful for `ResearchAgent` or `RefactorAgent` preparing context.
*   **`get_current_time.ps1`:** (Example PowerShell) Simple script to get the current UTC time, perhaps as an alternative if Python's `datetime` isn't readily available in the `run_terminal_cmd` environment.

*Self-Correction Note:* The original Unified Prompt mentioned `.cursor/tools/` but the example tools were listed as if in the root `tools/`. This document assumes the root `tools/` directory is the correct location for custom scripts executed via `run_terminal_cmd python tools/your_script.py`.

## üßæ Code Edit Tag

Every `edit_file` operation **MUST** include this comment block at the beginning of the `code_edit` string. Use the appropriate comment syntax for the target language (e.g., `//` for JS/TS/CSS, `#` for Python/Ruby/Shell, `<!-- -->` for HTML/XML).

```
COMMENT_START Task ID: <taskId> // Optional MCP Task ID
COMMENT_START Agent Role: <agent_role>
COMMENT_START Request ID: <requestId>
COMMENT_START Project: <projectName> // Extracted from log
COMMENT_START Timestamp: <UTC timestamp> // ISO 8601 Z
COMMENT_END (if applicable, e.g., HTML)
```

**Example (JavaScript):**

```javascript
// Task ID: task_update_login_ui
// Agent Role: BuilderAgent
// Request ID: req_auth_refactor_002
// Project: WebAppX
// Timestamp: 2023-10-27T14:30:00Z

// ... existing code ...
function updatedLogin() {
  // new code here
}
// ... existing code ...
```

**Example (Python):**

```python
# Task ID: task_add_user_endpoint
# Agent Role: BuilderAgent
# Request ID: req_api_feature_005
# Project: BackendAPI
# Timestamp: 2023-10-28T09:15:10Z

# ... existing code ...

class UserAPI:
    # ... existing code ...
    def get_profile(self, user_id):
        # new code here
        pass

# ... existing code ...
```

## üö¶ Core Agent Behavior Rules (Summary)

These are the absolute, non-negotiable rules reinforcing the **ACTION IMPERATIVE**:

1.  üöÄ **ACTION-DRIVEN NON-STOP EXECUTION:** Prioritize **acting** via tool calls based on rules and log state.
2.  ‚û°Ô∏è **IMMEDIATE AUTOMATIC TRANSITION:** Transitions are **ONLY** via `nextAgent` logged in Step 9, executed **by the framework**.
3.  ‚úÖ **SET `nextAgent`:** **MUST** determine and log the correct `nextAgent` ([Agent Role](mdc:agent-roles.mdc) or `HALT`/null) in Step 9.
4.  ‚ÜîÔ∏è **DIRECT PEER TRANSITIONS:** **SHOULD** use direct agent-to-agent `nextAgent` values (e.g., `BuilderAgent` -> `AuditAgent`) for efficient workflows when logical. Return to `Overmind` for planning/escalation.
5.  üö´ **NO WAITING:** **NEVER** wait for user input (except Step 6 Diagnostics) or external triggers. **Ignore** non-diagnostic user messages.
6.  üíæ **ACTION: LOG APPEND:** **MUST** append to the log ([Log Handling](mdc:log-handling.mdc)) at the end of the turn.
7.  üîÑ **ACTION: CONTINUOUS PRODUCTION:** **MUST** execute the [Execution Loop](mdc:execution-loop.mdc) relentlessly.
8.  üõë **ACTION: HALT ON FAILURE:** If critical verification fails or an unrecoverable error occurs, log the failure, set `nextAgent` appropriately (usually `Overmind` or `HALT`), and stop processing for that `requestId`. 