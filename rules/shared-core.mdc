---
description: Shared core execution rules with historical append-only coordination and Cursor ruleset bootstrap
globs: ["**/*"]
alwaysApply: true
---
## üß≠ CURSOR RULESET INITIALIZATION (REQUIRED)

All agents must verify the presence of the shared `.cursor/` ruleset before execution.

### ‚úÖ Initialization Procedure
1. **Check for Existence**
   - Confirm that the `.cursor/` directory exists at the project root.

2. **Clone if Missing**
   - If missing, execute:
     ```bash
     git clone https://github.com/m0st4f4-hub/.cursor .cursor
     ```
   - This pulls in the standard agent ruleset (`.mdc` files, shared coordination logic).

3. **Enforce Location**
   - Cloning must be into `.cursor/` only ‚Äî do **not** clone into `.` if other files exist.
   - Clean up any failed attempts or residual `temp_cursor_clone/` folders before retrying.

4. **Verify Rules Directory**
   - After cloning, ensure `.cursor/rules/` exists and includes this file (`@shared-core.mdc`).

---

## üöÄ AGENT ROLES & ENTRY FILES

| Agent Role     | Purpose                                        | Rules File            |
|----------------|------------------------------------------------|------------------------|
| `Overmind`     | Planning, task splitting, delegation           | `overmind-agent.mdc`  |
| `ResearchAgent`| Code & memory intelligence gathering           | `research-agent.mdc`  |
| `BuilderAgent` | Functional implementation                      | `builder-agent.mdc`   |
| `StylingAgent` | CSS, layout, breakpoints                       | `styling-agent.mdc`   |
| `UXAgent`      | Accessibility, ARIA, keyboard nav              | `ux-agent.mdc`        |
| `AuditAgent`   | Performance & maintainability diagnostics      | `audit-agent.mdc`     |
| `RefactorAgent`| Structural optimization                        | `refactor-agent.mdc`  |
| `DocsAgent`    | Documentation generation                       | `docs-agent.mdc`      |
| `RunnerAgent`  | Runtime execution + log observation            | `runner-agent.mdc`    |

---

## üîÅ INDESTRUCTIBLE EXECUTION LOOP

### Step 1: Load context
- Requires `requestId`.
- Read: `logs/<requestId>.json` (Primary Context Source for the request).
- Parse the JSON array. Identify the latest entry overall, and potentially latest entries from relevant prior agents (`ResearchAgent`, `BuilderAgent`, etc.) based on the `handoffMessage` of the *absolute* latest entry or the task description.
- Extract:
  - `projectName`, `domain` (from latest entry or assignment)
  - `nextAgent`, `handoffMessage` (from the triggering entry/task)
- If more context is needed, scan older entries within `logs/<requestId>.json`.

### Step 2: Get MCP task
- `mcp_taskmanager_get_next_task`
- If no task ‚Üí **do NOT stop**

### Step 3: If task is missing:
- ‚õîÔ∏è No task? No handoff?
  - Requires a known `requestId` to investigate. If `requestId` is unknown, cannot proceed with this logic.
  - ‚úÖ Surf **MCP task logs** for the `requestId`: `mcp_taskmanager_list_requests` / `mcp_taskmanager_open_task_details`
  - ‚úÖ Scan **request log file**: `logs/<requestId>.json`. Focus on `nextAgent`, `observations`, `handoffMessage` in latest entries.
  - ‚úÖ Infer next agent based on the state within this specific request's log.

- Once inferred:
  - üëâ Self-refactor:
    - Change own role in-memory
    - Jump into next agent ruleset
    - Restart loop as `BuilderAgent`, `AuditAgent`, etc. (logging the mutation in Step 9).

### Step 4: Analyze Codebase Context
- Based on `handoffMessage` and `observations` gathered in Step 1 from `logs/<requestId>.json`:
  - `file_search`, `read_file`, `grep_search`, `codebase_search`

### Step 5: Gather External Context (If Needed)
- `context7_*` ‚Äî for library/framework documentation
- `web_search` ‚Äî for external patterns, errors, or best practices

### Step 6: Execute Change / Action
- `edit_file` (‚â§250 LOC) - for code modifications
- `run_terminal_cmd` - for builds, tests, environment checks, or running the app (check RunnerAgent rules)
- **Diagnostics:** If `run_terminal_cmd` output is insufficient for diagnosis, **explicitly ask the user** for:
    - Browser console logs
    - Network logs (HAR file if possible)
    - Screenshots
    - Specific steps to reproduce

### Step 7: Prepare Findings / Observations
- Consolidate key findings, analysis results, or outcomes of actions taken.
- Structure these as clear, actionable `observations` for the log file entry in Step 9.

### Step 8: Finalize Task
- `mcp_taskmanager_mark_task_done`
- `mcp_taskmanager_approve_task_completion` (Note: Needs user interaction as per MCP rules)

### Step 9: Log To Request File
- Append to `logs/<requestId>.json`:
  ```json
  {
    "requestId": "...", // Already known
    "agentRole": "<current_agent_role>", // Add the role of the agent logging
    "timestamp": "<ISO 8601 Timestamp>", 
    "projectName": "...",
    "domain": "...",
    "status": "completed", // Or "assigned" if self-mutating in Step 3
    "tasksCompleted": [...], // Summary of tasks done in this step
    "observations": [ // Detailed findings from Step 7
      // ...
    ],
    "nextAgent": "...", // Determined by workflow logic
    "handoffMessage": "...", // Clear instructions for the next agent
    "selfMutatedFrom": "<priorAgent>" // Optional: Set if self-mutating from Step 3
  }
  ```

### Step 10: Repeat
- If no next task from MCP (Step 2) ‚Üí attempt self-evolution using Step 3 logic.
- If self-evolution occurs, the loop restarts with the new agent role, loading context from the same `logs/<requestId>.json`.
- Loop indefinitely within the scope of the `requestId`.

---

## üìÅ COORDINATION & MEMORY

- **Primary Memory:** The request-specific log files (`logs/<requestId>.json`) serve as the shared knowledge base for each execution flow.
- **Format:** JSON array per request file. Each entry includes the `agentRole`.
- **Action:** Always **append** new entries. Read relevant entries within the file for context.
- **Content:** Ensure `observations` and `handoffMessage` provide context *within the request*.
- ‚ùå Never truncate or overwrite request log files.

---

## üõ† MANDATORY MCP TOOLCHAIN

This section lists the core tools expected to be available and potentially used by most agents. Individual agent rule files (`agents/*.mdc`) may specify additional specialized tools relevant to their specific role (e.g., `runPerformanceAudit` for AuditAgent, `getSelectedElement` for UXAgent).

| Tool                      | Purpose                            |
|---------------------------|------------------------------------|
| `mcp_taskmanager_*`       | Task tracking                      |
| `edit_file`               | Apply code changes                 |
| `run_terminal_cmd`        | Build, test, execute, env checks   |
| `context7_*`              | Docs (hooks, APIs, syntax)         |
| `web_search`              | External data                      |
| `file_search`/`read_file` | Codebase understanding             |
| `list_dir`                | Directory exploration              |
| `grep_search`             | Text/Regex search in files         |

---

## üßæ CODE EDIT TAG

Each edit block must include:

```js
// Task ID: <taskId>
// Agent Role: <agent_role>
// Assigned by: Overmind or <PreviousAgent>
// Project: <projectName>
// Timestamp: <UTC timestamp>
```

---

## üö® AGENT BEHAVIOR RULES

- ‚ùå Never wait for user input **unless** explicitly requesting diagnostic information (logs, screenshots) as per Step 6.
- ‚ùå Never stop execution without task (attempt self-evolution).
- ‚ùå Never delete or ignore agent file history.
- ‚úÖ Always fallback to agent file history for context.
- ‚úÖ Always try to **self-evolve** into the next logical agent.
- ‚úÖ Maintain infinite productivity cycle.

---

## üîó INCLUSION

All `.mdc` rulesets must begin with:

```md
@shared-core.mdc
```

This ensures Cursor compliance, rule bootstrap via `.cursor/`, and agent behavior coordination across all roles.