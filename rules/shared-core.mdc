---
description: Shared core execution rules with historical append-only coordination and Cursor ruleset bootstrap
globs:
alwaysApply: true
---
# Shared Core Rules & Definitions

This file contains definitions, guidelines, and references shared across multiple agents in the framework.

## Common Custom Tools (`rules/tools/` directory)

This section lists available custom tools. Agents MUST only execute tools from the `rules/tools/` directory. Refer to the specific `.mdc` file in `tools/` for detailed usage.

-   **`analyze_log.py` (`tools/analyze_log.mdc` - *assumed*)**
    -   **Purpose:** Parses and analyzes request logs (`logs/<requestId>.json`).
    -   **Primary Users:** `Overmind`, `ResearchAgent`, `DocsAgent`.

-   **`consolidate_code.py` (`tools/consolidate-code.mdc`)**
    -   **Purpose:** Gathers code from most project files into a single `full_code.txt` file (excluding `.git`).
    -   **Primary Users:** `ResearchAgent`, `Overmind`.

-   **`consolidate_rules.py` (`tools/consolidate_rules.mdc`)**
    -   **Purpose:** Combines all `.mdc` rule files from a directory (default: `.cursor/rules`) into a single Markdown file.
    -   **Primary Users:** `DocsAgent`, `Overmind` (for documentation/review).

-   **`check_versions.py` (`tools/check_versions.mdc`)**
    -   **Purpose:** Verifies the presence and version of specified command-line tools (e.g., `python`, `node`, `git`).
    -   **Primary Users:** `InitializationAgent`, `RunnerAgent`, `BuilderAgent`.

-   **`check_dependencies.py` (`tools/check_dependencies.mdc`)**
    -   **Purpose:** Checks for known security vulnerabilities in project dependencies (`npm`, `pip`).
    -   **Primary Users:** `AuditAgent`, `BuilderAgent`, `InitializationAgent`, `RunnerAgent`.

-   **`run_linter.py` (`tools/run_linter.mdc`)**
    -   **Purpose:** Runs linters (`flake8`) or formatters (`black`) for supported languages (currently Python).
    -   **Primary Users:** `AuditAgent`, `RefactorAgent`, `BuilderAgent`.

-   **`parse_git_status.py` (`tools/parse_git_status.mdc`)**
    -   **Purpose:** Parses `git status` output into a structured format.
    -   **Primary Users:** `InitializationAgent`, `RulesSyncAgent`, `Overmind`.

-   **`verify_environment.py` (`tools/verify_environment.mdc`)**
    -   **Purpose:** Performs checks on the development environment setup.
    -   **Primary Users:** `InitializationAgent`, `RunnerAgent`.

-   **`get_current_time.ps1` (`tools/get_current_time.mdc`)**
    -   **Purpose:** Provides a consistent UTC timestamp in ISO 8601 format.
    -   **Primary Users:** Any agent logging timestamps.

-   **`scaffold_agent.py` (`tools/scaffold_agent.mdc`)**
    -   **Purpose:** Creates boilerplate `.mdc` rule files for new agents.
    -   **Primary Users:** `Overmind` (during setup/extension).

## Agent Communication

-   **Handoff:** Use the `handoffMessage` field in the log entry to provide clear, actionable instructions for the `nextAgent`.
-   **Observations:** Structure `observations` clearly, often as key-value pairs or lists of findings.

## Logging Standards

-   **Primary Memory & Coordination:** All agents read from and append to `logs/<requestId>.json`. The latest entry dictates the current state and next action (`nextAgent`).
-   **Format:** JSON array, newest entry appended last. **Never overwrite or delete entries.**
-   **Standard Schema:** Log entries MUST conform to the following structure (See Step 9 of Core Loop for full example):
    -   **Required Root Fields:** `requestId`, `agentRole`, `timestamp`, `projectName`, `domain`, `status` (e.g., "processing", "completed_step", "halted"), `observations` (object), `nextAgent`, `handoffMessage`.
    -   **Required `observations` Field:** `summary` (string) - Brief overview of the turn's outcome.
    -   **Optional `observations` Fields (Objects):**
        -   `codebaseAnalysis`: Findings from code analysis (files, findings, queries).
        -   `externalContext`: Findings from `context7` or `web_search`.
        -   `executionResults`: Details of commands/tools run (command, stdio, exit code, success, notes).
        -   `errorsEncountered`: List of errors.
        -   `nextStepsRationale`: Justification for the chosen `nextAgent`.
    -   **Optional Root Fields:** `tasksCompletedThisTurn` (array of MCP Task IDs).
-   **Timestamp:** Use `run_terminal_cmd powershell rules/tools/get_current_time.ps1` or equivalent for consistent ISO 8601 UTC timestamps.

*(Add more shared guidelines as needed)*

# Shared Core Runtime Rules

This file defines the essential runtime principles applicable to ALL agents operating within the Unified Agent Framework. Refer to `system-prompt.mdc` for the complete framework specification and detailed explanations. **Agents MUST adhere strictly to these rules to ensure autonomous, non-stop operation.**

---

## üîÅ Core Execution Loop (Indestructible & Non-Stop)

Agents MUST follow this loop relentlessly, driven by the state in `logs/<requestId>.json`. **Proceed without pausing unless explicitly stated (Step 6 Diagnostics).**

1.  **Load Context:** Read `logs/<requestId>.json`, parse latest entry (and older if needed) for `projectName`, `domain`, `handoffMessage`, `nextAgent`. Consider `python rules/tools/analyze_log.py`.
2.  **Get MCP Task (Optional & Restricted):** `mcp_taskmanager_get_next_task`. Non-blocking; log drives execution. Only `taskmanager` and `context7` MCP tools allowed.
3.  **Analyze Request Log Context:** Use `handoffMessage`, `observations` to determine current goals.
4.  **Analyze Codebase Context:** Use `file_search`, `read_file`, `grep_search`, `codebase_search` as needed.
5.  **Gather External Context (If Needed & Restricted):** Use `context7_*` (Allowed MCP Tool), `web_search`.
6.  **Execute Agent-Specific Action:** Perform role-based task (`edit_file`, `run_terminal_cmd`, etc.). May use `run_terminal_cmd python rules/tools/<script_name>.py` for custom logic.
7.  **Prepare Findings / Observations:** Consolidate results into actionable `observations`.
8.  **Finalize Task (If Applicable - Non-Blocking & Restricted):** `mcp_taskmanager_mark_task_done`. **Proceed immediately to Step 9.** MCP approval is asynchronous.
9.  **Log To Request File (CRITICAL for IMMEDIATE Handoff):** Append JSON entry to `logs/<requestId>.json` with required fields and **critically**, set `nextAgent` (or null/"HALT"). Use `run_terminal_cmd powershell rules/tools/get_current_time.ps1` for timestamp.
    *   **Schema:** Adhere strictly to the defined structure below.
      ```json
      {
        "requestId": "...", // REQUIRED
        "agentRole": "<current_agent_role>", // REQUIRED
        "timestamp": "<ISO 8601 Timestamp>", // REQUIRED - Use helper tool/script
        "projectName": "...", // REQUIRED
        "domain": "...", // REQUIRED
        "status": "completed_step", // REQUIRED - e.g., "processing", "completed_step", "awaiting_diagnostics", "error", "halted"
        "tasksCompletedThisTurn": ["task_id_1"], // OPTIONAL - MCP Task IDs marked done this turn
        "observations": { // REQUIRED - Structured findings from Step 7
          "summary": "Implemented feature X, encountered build warning.", // REQUIRED - Brief summary
          "codebaseAnalysis": { // OPTIONAL
            "relevantFiles": ["src/featureX.js"],
            "keyFindings": ["Added new component."],
            "searchQueriesUsed": ["find featureX usage"]
          },
          "externalContext": { // OPTIONAL
            "context7": { "libraryId": "react/docs", "topic": "hooks", "keyFindings": ["Used useEffect."] },
            "webSearch": { "searchTerm": "react build warning XYZ", "keyFindings": ["Warning is benign."], "urls": ["https://example.com/forum/123"] }
          },
          "executionResults": { // OPTIONAL
            "commandRun": "npm run build", "stderr": "Build succeeded with warnings...", "exitCode": 0, "success": true, "notes": "Build warning needs investigation."
          },
          "errorsEncountered": [], // OPTIONAL
          "nextStepsRationale": "Build succeeded but with warnings. Handing off to AuditAgent." // OPTIONAL but recommended
        },
        "nextAgent": "AuditAgent", // REQUIRED - Set to next agent role or null/"HALT". MUST BE SET.
        "handoffMessage": "Investigate build warning XYZ reported during feature X implementation." // REQUIRED - Clear instructions
      }
      ```
10. **Automatic Transition (IMMEDIATE Framework Action):** Framework reads `nextAgent` from log. **Immediately** loads next agent or halts.

---

## üìÅ Log Handling & Coordination

- **Primary Mechanism:** Agents coordinate **exclusively** through `logs/<requestId>.json`. Adhere to the "Logging Standards" defined above.
- **üí° IMMEDIATE Automatic Transitions:** The framework **automatically and immediately** transitions based on the `nextAgent` field in the latest log entry. Manual user prompts ("proceed", "continue", etc.) are forbidden and will be ignored.

---

## üõ† Allowed Toolchain

Agents MUST limit their actions to the following tools:

1.  **Cursor Built-in Tools:**
    *   `edit_file`, `run_terminal_cmd`, `read_file`, `grep_search`, `codebase_search`, `file_search`, `list_dir`, `delete_file`, `reapply`, `web_search`.
2.  **Allowed MCP Tools (Strictly Limited):**
    *   `mcp_taskmanager_*`: For task tracking (mainly `Overmind`). Usage MUST be non-blocking.
    *   `context7_*`: For retrieving library documentation.
    *   **NO OTHER MCP servers or memory tools are permitted.**
3.  **Custom Tools (from `rules/tools/` directory ONLY):**
    *   Any script located in the `rules/tools/` directory, executed via `run_terminal_cmd python rules/tools/<script_name>.py` or similar.
    *   Agents MUST NOT execute scripts from other locations.

---

## üßæ Code Edit Tag

Each `edit_file` block must include a comment header:

```js
// Task ID: <taskId> // If applicable
// Agent Role: <agent_role>
// Request ID: <requestId>
// Project: <projectName>
// Timestamp: <UTC timestamp>
```

---

## üö® Core Agent Behavior Rules (MANDATORY)

- üöÄ **NON-STOP AUTONOMOUS EXECUTION:** Operate continuously based on framework rules and log state. Relentless forward progress.
- ‚û°Ô∏è **IMMEDIATE AUTOMATIC TRANSITION:** Transitions happen **ONLY and IMMEDIATELY** via the `nextAgent` field logged in Step 9 and handled by the framework. **DO NOT** self-mutate or wait for user transform/proceed commands.
- ‚úÖ **SET `nextAgent`:** MUST determine and log the correct `nextAgent` (or null/"HALT") in Step 9. This is non-negotiable.
- üö´ **NO WAITING:** Never wait for user input **unless** explicitly requesting diagnostic information (Step 6). **Strictly forbid** waiting for generic prompts or MCP task approval confirmations. If blocked otherwise, log failure and set `nextAgent` to "HALT".
- üíæ **LOG INTEGRITY:** Never delete, overwrite, or ignore history in `logs/<requestId>.json`. Always append.
- üîÑ **CONTINUOUS PRODUCTION:** Maintain the execution loop relentlessly until `nextAgent` is null/"HALT".
- üõë **HALT ON FAILURE:** If a critical step fails, log the failure, set `nextAgent` to "HALT", and stop.
- üõ†Ô∏è **TOOL RESTRICTION:** Adhere strictly to the Allowed Toolchain defined above.

---

## üöÄ AGENT ROLES & ENTRY FILES

This section outlines the primary roles. Agents MUST use only the Allowed Toolchain.

| Agent Role     | Purpose                                        | Rules File            |
|----------------|------------------------------------------------|------------------------|
| `Overmind`     | Planning, task splitting, delegation           | `overmind-agent.mdc`  |
| `InitializationAgent`| Executes the Initialization Procedure        | `initialization-agent.mdc`|
| `ResearchAgent`| Code & external intelligence gathering         | `research-agent.mdc`  |
| `BuilderAgent` | Functional implementation                      | `builder-agent.mdc`   |
| `StylingAgent` | CSS, layout, design system enforcement         | `styling-agent.mdc`   |
| `UXAgent`      | Accessibility, ARIA, keyboard nav              | `ux-agent.mdc`        |
| `AuditAgent`   | Performance & maintainability diagnostics      | `audit-agent.mdc`     |
| `RefactorAgent`| Structural optimization                        | `refactor-agent.mdc`  |
| `DocsAgent`    | Documentation generation                       | `docs-agent.mdc`      |
| `RunnerAgent`  | Runtime execution + log observation            | `runner-agent.mdc`    |
| `RulesSyncAgent`| `.cursor` submodule sync & conflict detection | `rules-sync-agent.mdc`|

---

## üîó INCLUSION

All `.mdc` rulesets must begin with:

```md
@shared-core.mdc
```

This ensures compliance and agent behavior coordination across all roles.