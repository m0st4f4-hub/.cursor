---
description: "[TODO: Add description]"
globs:
  - "*.*"
alwaysApply: false
---

# üß± Shared Core Concepts & Rules (V2 - Chat/Wiki Framework)

## üöÄ ACTION IMPERATIVE (V2 - MANDATORY)

**This is the absolute core directive:**

***Agents MUST execute actions based on their fetched rules and wiki context, triggered by chat messages. They MUST update the wiki and trigger the next agent via chat.***

*   **üí¨ TRIGGERED BY CHAT:** Agents activate *only* upon receiving a specific chat message addressed to their role.
*   **üß† WIKI IS CONTEXT:** The Knowledge Wiki (`knowledge-wiki.md`) is the **single source of truth** for context, findings, goals, and history.
*   **üìú RULES DEFINE ROLE:** Each agent turn is guided by rules fetched via `fetch_rules` and prompted via "Act as...".
*   **‚û°Ô∏è CHAT TRIGGERS NEXT:** Transitions are **ONLY** initiated by the current agent sending the final chat trigger message to the next agent.
*   **üö´ NO WAITING:** Agents **NEVER** wait for user prompts (like "proceed") *unless* performing the explicit Step 5 Diagnostics exception in the [Execution Loop V2](mdc:execution-loop.md).
*   **‚úçÔ∏è WIKI IS MEMORY:** State and findings **MUST** be appended to the wiki.
*   **üîÑ RELENTLESS PROGRESS:** The system is designed for non-stop, autonomous execution via chat triggers and wiki updates.

## üÜî Request ID (`requestId`)
- REQUIRED unique identifier for a task sequence.
- FORMAT: String.
- USAGE:
  - Wiki filename: `<requestId>-wiki.md` (or similar).
  - MCP Taskmanager `requestId` parameter.
  - Code Edit Tags.
- ORIGIN: Overmind or external.

## ‚öôÔ∏è Framework
- DEFINITION: Agent execution engine.
- RESPONSIBILITIES:
  - Parse chat triggers to activate agents.
  - Provide tools (`fetch_rules`, MCP, file system, etc.).
  - Facilitate agent execution based on fetched rules and wiki context.
  - Manage execution lifecycle.

## üß† Knowledge Wiki (`<requestId>-wiki.md`)
- REQUIRED: Single source of truth (Append-Only Markdown).
- PURPOSE:
  - Context persistence.
  - Shared findings/history.
  - Goal tracking.
  - Error logging.
- MANDATORY: Read at start, append valid entry at end of turn. See [Wiki Handling](mdc:wiki-handling.md) for structure.

## üí¨ Chat Trigger
- DEPRECATED: Use [Handoff Mechanism](#handoff-mechanism-v2-replaces-chat-trigger) instead.

## üõ†Ô∏è Mandatory MCP Toolchain
- Baseline tools for most agents.

| Tool                      | Purpose                                                    |
|---------------------------|------------------------------------------------------------|
| `mcp_taskmanager_*`       | Task tracking (Overmind).                                  |
| `fetch_rules`             | **REQUIRED** for agents to fetch their own role spec.      |
| `edit_file`               | Apply code/wiki changes/create files.                    |
| `run_terminal_cmd`        | Execute shell commands (build, test, custom tools).      |
| `context7_*`              | Fetch library/framework documentation.                     |
| `web_search`              | Access external web information.                           |
| `file_search`/`read_file` | Find/read codebase/wiki files.                           |
| `list_dir`                | Explore directory structures.                              |
| `grep_search`             | Perform text/regex searches.                               |
| `codebase_search`         | Perform semantic searches.                                 |
| `delete_file`             | Remove files (Use with extreme caution).                     |
| `reapply`                 | Re-attempt last failed `edit_file`.                      |

## üêç Common Custom Tools (`tools/` directory)
- Run via `run_terminal_cmd python tools/<script_name.py>`.
- **`analyze_wiki.py` (NEW/TBD):** Parse wiki sections (replaces `analyze_log.py`).
- **`verify_environment.py`**: Check dev tools.
- **`parse_git_status.py`**: Get structured Git status.
- **`check_dependencies.py`**: Basic dependency analysis.
- **`run_linter.py`**: Execute linters.
- **`check_versions.py`**: Check critical tool versions.
- **`consolidate_code.py`**: Combine code from files.

## üßæ Code Edit Tag (MANDATORY)
- REQUIRED comment block at start of `edit_file` `code_edit` string (for CODE files, not wiki).
- Use correct comment syntax for target language.

```
COMMENT_START Task ID: <taskId> // Optional MCP Task ID
COMMENT_START Agent Role: <agent_role>
COMMENT_START Request ID: <requestId>
COMMENT_START Project: <projectName> // From wiki
COMMENT_START Timestamp: <UTC timestamp> // ISO 8601 Z
COMMENT_END (if applicable)
```

## üö¶ Core Agent Behavior Rules (V2 - MANDATORY SUMMARY)
1.  **ACT ON TRIGGER:** Activate ONLY via the Framework based on the preceding agent's `framework_handoff`.
2.  **READ WIKI:** MUST read wiki for context (referenced via `wiki_reference` from handoff).
3.  **FETCH RULES:** MUST fetch own rules (`fetch_rules`).
4.  **ROLE-PROMPT EXECUTION:** MUST execute based on fetched rules + wiki context + `handoff_message`.
5.  **UPDATE WIKI:** MUST append findings/actions/errors to wiki.
6.  **DETERMINE NEXT:** MUST determine `next_agent_role` and `handoff_message`.
7.  **EXECUTE HANDOFF:** MUST perform `framework_handoff` as FINAL action.
8.  **NO WAITING:** NEVER wait (except Step 5 Diagnostics). Ignore non-diagnostic user input.
9.  **HALT VIA OVERMIND:** On critical error, update wiki, execute `framework_handoff` targeting `Overmind`.

## üöô Goal: Automatically improve rules in `global/` and `project/` directories.

## ‚öôÔ∏è Handoff Mechanism (V2 - Replaces "Chat Trigger")

- **REQUIRED** mechanism for agent handoff and sequence continuation.
- **IMPLEMENTATION:** The final action of an agent's turn MUST be the execution of a conceptual `framework_handoff` operation.
- **PARAMETERS:** This operation requires:
    - `next_agent_role`: (String) The role name of the agent to execute next (e.g., "BuilderAgent", "Overmind").
    - `handoff_message`: (String) A concise message summarizing the current turn's outcome and the objective for the next agent.
    - `wiki_reference`: (String) The path to the relevant Knowledge Wiki file containing the detailed context.
- **FRAMEWORK ACTION:** The external agent execution Framework MUST detect the `framework_handoff` operation, parse its parameters, and immediately activate the specified `next_agent_role`, providing the `handoff_message` and `wiki_reference` as initial input for its turn (See [Execution Loop V2](mdc:execution-loop.md)).
- **REPLACES:** This structured handoff replaces the previous, more ambiguous "Chat Trigger" concept.
