---
# Rule Definition Metadata (V1)
ruleId: shared-core
ruleType: Shared
title: Shared Core Concepts & Rules
description: Defines fundamental concepts, entities, and mandatory mechanisms for the Chat Trigger agent framework.
schemaVersion: 1
conformsTo: null # TBD: Link to a meta-rule definition if created
tags: [core, framework, concepts, shared]
lastUpdated: null # Will be set upon merge
status: Active
---

# ðŸ§± Shared Core Concepts & Rules

## 1. PURPOSE & OBJECTIVES

This document defines the non-negotiable core concepts, terminology, and mandatory mechanisms underpinning the autonomous agent framework coordinated via Chat Triggers. It serves as a foundational reference for all agents and rule definitions.

## 2. CORE CONCEPTS / DEFINITIONS

*   **`requestId`:**
    *   MUST be a unique identifier for a specific task sequence or workflow instance.
    *   FORMAT: String.
    *   USAGE: Used in MCP Taskmanager calls and Code Edit Tags.
    *   ORIGIN: Typically initiated by Overmind or an external trigger.
*   **Chat Trigger:**
    *   MUST be the mechanism for agent activation and handoff.
    *   FORMAT: A specific chat message directed at the next agent's role (e.g., "Hey `<NextAgentRole>`, [Concise handoff message including necessary context].").
    *   FUNCTION: The FINAL action of an agent's turn, causing the framework to activate the specified agent for the subsequent turn.
*   **Framework:**
    *   DEFINITION: The underlying execution engine that manages the agent lifecycle. See [Framework Definition](mdc:framework.md) for details.
    *   RESPONSIBILITIES: Parsing Chat Triggers, activating the correct agent, providing tools, facilitating execution based on fetched rules and context passed via trigger.
*   **Agent Roles:**
    *   DEFINITION: Specialized functional units within the framework (e.g., BuilderAgent, AuditAgent). Each role has specific responsibilities, allowed tools, and behaviors defined in its own rule specification file. See [Agent Roles & Responsibilities](mdc:agent-roles.md).

## 3. MANDATORY MECHANISMS & TOOLING

*   **Global Mandates:**
    *   All agents MUST adhere to the rules defined in [`global-mandates.md`](./global-mandates.md) unless explicitly overridden by their specific role specification or project-level rules.
*   **Mandatory Toolchain:**
    *   A baseline set of tools available to most agents. Individual agent roles may have access to additional specialized tools.
    *   Key tools include:
        *   `fetch_rules`: MUST be used by agents to load their role specification.
        *   `edit_file`: For modifying code.
        *   `run_terminal_cmd`: For executing shell commands, build steps, tests, and custom tool scripts.
        *   Context gathering tools (`web_search`, `context7_*`, `codebase_search`, `grep_search`, `file_search`, `list_dir`).
        *   `mcp_taskmanager_*`: Primarily used by Overmind for task tracking.
        *   `delete_file`: Use with extreme caution.
        *   `reapply`: To retry failed edits.
*   **Common Custom Tools (`tools/`):**
    *   Helper scripts executed via `run_terminal_cmd`. Examples:
        *   `parse_git_status.py`: Structured Git info.
        *   `verify_environment.py`, `check_dependencies.py`, `check_versions.py`: Environment checks.
        *   `run_linter.py`: Linting.
        *   `consolidate_code.py`: Code aggregation.
*   **Code Edit Tag:**
    *   MUST be a comment block at the start of the `code_edit` parameter for the `edit_file` tool when modifying CODE files.
    *   Use language-appropriate comment syntax.
    *   FORMAT:
```
COMMENT_START Task ID: <taskId> // Optional MCP Task ID
COMMENT_START Agent Role: <agent_role>
COMMENT_START Request ID: <requestId>
        COMMENT_START Project: <projectName> // Project name context if available
COMMENT_START Timestamp: <UTC timestamp> // ISO 8601 Z
        COMMENT_END (if applicable)
        ```

## 4. KEY BEHAVIORAL RULES SUMMARY

*(Refer to [`global-mandates.md`](./global-mandates.md) for the complete list and detailed descriptions)*

1.  MUST Activate via Chat Trigger.
2.  MUST Receive Context via Chat Trigger.
3.  MUST Fetch Own Role Rules.
4.  MUST Execute based on Role/Rules/Context.
5.  MUST Determine Next Agent & Construct Handoff Message.
6.  MUST Trigger Next Agent via Chat (Final Action).
7.  MUST NOT Wait (except Diagnostics).
8.  MUST Escalate Errors to Overmind via Chat.

## 5. REFERENCES

*   [`global-mandates.md`](./global-mandates.md)
*   [Agent Roles & Responsibilities](mdc:agent-roles.md)
*   [Core Execution Loop](mdc:execution-loop.md)
*   [Framework Definition](mdc:framework.md)
*   [System Prompt](mdc:system-prompt.md)
