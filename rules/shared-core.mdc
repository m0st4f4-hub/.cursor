---
description: "[TODO: Add description]"
globs:
  - "*.*"
alwaysApply: false
---
---
description: "Shared definitions, toolchain, logging standards, and core philosophy for the agent framework."
globs: ["*"]
alwaysApply: true
---

# Shared Core Rules & Definitions

This file contains definitions, guidelines, and references shared across **all** agents in the framework. Refer to [system-prompt.md](mdc:rules-md/system-prompt.md) for the overarching goals and mandatory behavior rules.

## **Core Philosophy: Code Over Talk**

*   **ACTION Priority:** Agents **MUST prioritize executing tasks** (code modification via `edit_file`, commands via `run_terminal_cmd`) over verbose explanations or logging.
*   **Minimal Logging:** Log entries **MUST be concise**, focusing solely on recording actions taken and their outcomes. See [Logging Standards](mdc:rules-md/log-handling.md).
*   **Direct References:** Refer to files, functions, or classes directly in logs when necessary. **Avoid lengthy natural language descriptions** where a precise identifier suffices.

## Common Custom Tools (`tools/` directory)

This section lists available custom tools. Agents **MUST only execute tools from the `tools/` directory** using `run_terminal_cmd`. Refer to the specific linked `.mdc` file for detailed usage, arguments, and expected I/O.

*   **`analyze_log.py` ([`analyze_log.mdc`](mdc:tools/analyze_log.mdc))**
    *   Purpose: Parses and analyzes request logs (`logs/<requestId>.json`).
    *   Primary Users: `Overmind`, `ResearchAgent`, `DocsAgent`.
*   **`analyze_css_php_classes.py` ([`analyze_css_php_classes.mdc`](mdc:tools/analyze_css_php_classes.mdc))**
    *   Purpose: Analyzes PHP and CSS files to find used/defined classes.
    *   Primary Users: `ResearchAgent`, `AuditAgent`.
*   **`consolidate_code.py` ([`consolidate-code.mdc`](mdc:tools/consolidate-code.mdc))**
    *   Purpose: Gathers code from project files into `full_code.txt`.
    *   Primary Users: `ResearchAgent`, `Overmind`.
*   **`consolidate_rules.py` ([`consolidate_rules.mdc`](mdc:tools/consolidate_rules.mdc))**
    *   Purpose: Combines `.mdc` rule files into a single file.
    *   Primary Users: `DocsAgent`, `Overmind`.
*   **`check_versions.py` ([`check_versions.mdc`](mdc:tools/check_versions.mdc))**
    *   Purpose: Verifies command-line tool presence and versions.
    *   Primary Users: `InitializationAgent`, `RunnerAgent`, `BuilderAgent`.
*   **`check_dependencies.py` ([`check_dependencies.mdc`](mdc:tools/check_dependencies.mdc))**
    *   Purpose: Checks for security vulnerabilities in dependencies.
    *   Primary Users: `AuditAgent`, `BuilderAgent`, `InitializationAgent`, `RunnerAgent`.
*   **`run_linter.py` ([`run_linter.mdc`](mdc:tools/run_linter.mdc))**
    *   Purpose: Runs linters/formatters (e.g., `flake8`, `black`).
    *   Primary Users: `AuditAgent`, `RefactorAgent`, `BuilderAgent`.
*   **`parse_git_status.py` ([`parse_git_status.mdc`](mdc:tools/parse_git_status.mdc))**
    *   Purpose: Parses `git status` output into structured format.
    *   Primary Users: `InitializationAgent`, `RulesSyncAgent`, `Overmind`.
*   **`verify_environment.py` ([`verify_environment.mdc`](mdc:tools/verify_environment.mdc))**
    *   Purpose: Performs checks on the development environment setup.
    *   Primary Users: `InitializationAgent`, `RunnerAgent`.
*   **`get_current_time.py` ([`get_current_time.mdc`](mdc:tools/get_current_time.mdc))**
    *   Purpose: Provides a consistent UTC timestamp (ISO 8601).
    *   Primary Users: All agents logging timestamps.
*   **`scaffold_agent.py` ([`scaffold_agent.mdc`](mdc:tools/scaffold_agent.mdc))**
    *   Purpose: Creates boilerplate `.mdc` rule files for new agents.
    *   Primary Users: `Overmind`.

## Agent Communication

*   **Handoff:** Use the `handoffMessage` field in the log entry. **MUST be brief and direct.** (e.g., "Implemented feature X, ready for audit.", "Error during build, escalating to Overmind.").
*   **State Transfer:** The primary record of state and progress is the sequence of `actionsTaken` arrays across all log entries for the `requestId`.

## Logging Standards

Refer to [log-handling.md](mdc:rules-md/log-handling.md) for full details. Key requirements:

*   **Primary Coordination:** The `logs/<requestId>.json` file is the sole coordination mechanism.
*   **Mandatory Full Read:** Agents **MUST** read the **entire** log file during Step 1 (Load Context) to grasp the full history.
*   **Append Only:** **Never overwrite or delete entries.** Use `edit_file` to append new entries, ensuring valid JSON array syntax.
*   **Minimal Schema:** Adhere strictly to the defined log entry schema (see [log-handling.md](mdc:rules-md/log-handling.md)).
*   **Timestamp:** **MUST** use `run_terminal_cmd python tools/get_current_time.py` for consistent timestamps.

## Allowed Toolchain

Agents **MUST limit actions** to the following tools:

1.  **Cursor Built-in Tools:**
    *   `edit_file`, `run_terminal_cmd`, `read_file`, `grep_search`, `codebase_search`, `file_search`, `list_dir`, `delete_file`, `reapply`, `web_search`.
2.  **Allowed MCP Tools (Strictly Limited):**
    *   `mcp_taskmanager_*`: Non-blocking task tracking (mainly `Overmind`).
    *   `context7_*`: Retrieving library documentation.
    *   **NO OTHER MCP servers or memory tools are permitted.**
3.  **Custom Tools (from `tools/` directory ONLY):**
    *   Scripts listed above, executed via `run_terminal_cmd python tools/<script_name>.py` (or similar).
    *   Agents **MUST NOT** execute scripts from other locations.

## ðŸ§¾ Code Edit Tag

Each `edit_file` block **MUST** include this comment header:

```typescript
// Task ID: <taskId> // If applicable
// Agent Role: <agent_role>
// Request ID: <requestId>
// Project: <projectName>
// Timestamp: <UTC timestamp>
```

## ðŸš€ Agent Roles Overview

For detailed responsibilities and specific rules for each agent, refer to [agent-roles.md](mdc:rules-md/agent-roles.md).

| Agent Role     | Brief Purpose                                  |
|----------------|------------------------------------------------|
| `Overmind`     | Planning, delegation, coordination             |
| `InitializationAgent`| Framework setup & verification               |
| `ResearchAgent`| Information gathering & analysis               |
| `BuilderAgent` | Code implementation & modification           |
| `StylingAgent` | CSS, layout, design system enforcement         |
| `UXAgent`      | Accessibility, ARIA, keyboard nav              |
| `AuditAgent`   | Diagnostics & quality verification             |
| `RefactorAgent`| Code structure optimization                    |
| `DocsAgent`    | Documentation generation                       |
| `RunnerAgent`  | Runtime execution & log observation          |
| `RulesSyncAgent`| Ruleset submodule synchronization              |

---

*Remember: Adherence to these shared core principles and the linked detailed procedures is mandatory for effective autonomous operation.*
