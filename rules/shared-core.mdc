---
description: Shared core execution rules with historical append-only coordination and Cursor ruleset bootstrap
globs:
alwaysApply: true
---
# Shared Core Rules & Definitions

This file contains definitions, guidelines, and references shared across multiple agents in the framework.

## Common Tools

This section lists commonly available custom tools found in the `tools/` directory.
Refer to the specific `.mdc` file in `tools/` for detailed usage instructions.

-   **`consolidate_code.py` (`tools/consolidate-code-tool.mdc`)**
    -   **Purpose:** Gathers code from most project files into a single `full_code.txt` file.
    -   **Primary Users:** `ResearchAgent`, `Overmind`.

-   **`check_versions.py` (`tools/check_versions.mdc`)**
    -   **Purpose:** Verifies the presence and version of specified command-line tools (e.g., `python`, `node`, `git`).
    -   **Primary Users:** `InitializationAgent`, `RunnerAgent`, `BuilderAgent`.

-   **`check_dependencies.py` (`tools/check_dependencies.mdc`)**
    -   **Purpose:** Checks for known security vulnerabilities in project dependencies (`npm`, `pip`).
    -   **Primary Users:** `AuditAgent`.

-   **`run_linter.py` (`tools/run_linter.mdc`)**
    -   **Purpose:** Runs linters (`flake8`) or formatters (`black`) for supported languages (currently Python).
    -   **Primary Users:** `AuditAgent`, `RefactorAgent`, `BuilderAgent`.

## Agent Communication

-   **Handoff:** Use the `handoffMessage` field in the log entry to provide clear, actionable instructions for the `nextAgent`.
-   **Observations:** Structure `observations` clearly, often as key-value pairs or lists of findings.

## Logging Standards

-   Log entries MUST include `requestId`, `agentRole`, `timestamp`, `status`, `nextAgent`, and `handoffMessage`.
-   `observations` should be detailed and specific.

*(Add more shared guidelines as needed)*

# Shared Core Runtime Rules

This file defines the essential runtime principles applicable to ALL agents operating within the Unified Agent Framework. Refer to `system-prompt.mdc` for the complete framework specification and detailed explanations. **Agents MUST adhere strictly to these rules to ensure autonomous, non-stop operation.**

---

## üîÅ Core Execution Loop (Indestructible & Non-Stop)

Agents MUST follow this loop relentlessly, driven by the state in `logs/<requestId>.json`. **Proceed without pausing unless explicitly stated (Step 6 Diagnostics).**

1.  **Load Context:** Read `logs/<requestId>.json`, parse latest entry (and older if needed) for `projectName`, `domain`, `handoffMessage`, `nextAgent`.
2.  **Get MCP Task (Optional):** `mcp_taskmanager_get_next_task`. Non-blocking; log drives execution.
3.  **Analyze Request Log Context:** Use `handoffMessage`, `observations` to determine current goals.
4.  **Analyze Codebase Context:** Use `file_search`, `read_file`, `grep_search`, `codebase_search` as needed.
5.  **Gather External Context (If Needed):** Use `context7_*`, `web_search`.
6.  **Execute Agent-Specific Action:** Perform role-based task (`edit_file`, `run_terminal_cmd`, etc.). If blocked needing diagnostics, **ask user ONLY for specific info** (logs, HAR, repro steps). **DO NOT pause for confirmation or general instructions.**
7.  **Prepare Findings / Observations:** Consolidate results into actionable `observations`.
8.  **Finalize Task (If Applicable - Non-Blocking):** `mcp_taskmanager_mark_task_done`. **Proceed immediately to Step 9.** MCP approval is asynchronous and must not block the agent.
9.  **Log To Request File (CRITICAL for IMMEDIATE Handoff):** Append JSON entry to `logs/<requestId>.json` with required fields (`requestId`, `agentRole`, `timestamp`, etc.) and **critically**, set `nextAgent` (or null/"HALT"). **This MUST be set.**
10. **Automatic Transition (IMMEDIATE Framework Action):** Framework reads `nextAgent` from log. **Immediately** loads next agent or halts. **DO NOT** perform self-transition.

---

## üìÅ Log Handling & Coordination

- **Primary Memory:** `logs/<requestId>.json` files.
- **Format:** JSON array, newest entry appended last.
- **Action:** Always **append**. Never truncate or overwrite. Read latest entry for current state (`nextAgent`) and context. Scan older entries if necessary.
- **üí° IMMEDIATE Automatic Transitions:** The framework **automatically and immediately** transitions based on the `nextAgent` field in the latest log entry. Manual user prompts ("proceed", "continue", etc.) are forbidden.

---

## üõ† Mandatory MCP Toolchain

Core tools available to most agents:

| Tool                      | Purpose                            | Notes                                      |
|---------------------------|------------------------------------|--------------------------------------------|
| `mcp_taskmanager_*`       | Task tracking (Mainly Overmind)    | `mark_task_done` is non-blocking for agent |
| `edit_file`               | Apply code changes                 |                                            |
| `run_terminal_cmd`        | Build, test, execute, env checks   |                                            |
| `context7_*`              | Docs (hooks, APIs, syntax)         |                                            |
| `web_search`              | External data                      |                                            |
| `file_search`/`read_file` | Codebase understanding             |                                            |
| `list_dir`                | Directory exploration              |                                            |
| `grep_search`             | Text/Regex search in files         |                                            |
| `delete_file`             | File deletion                      |                                            |
| `reapply`                 | Reapply failed edit                |                                            |
*(Note: Specific agents may have additional specialized tools)*

---

## üßæ Code Edit Tag

Each `edit_file` block must include a comment header:

```js
// Task ID: <taskId> // If applicable
// Agent Role: <agent_role>
// Request ID: <requestId>
// Project: <projectName>
// Timestamp: <UTC timestamp>
```

---

## üö® Core Agent Behavior Rules (MANDATORY)

- üöÄ **NON-STOP AUTONOMOUS EXECUTION:** Operate continuously based on framework rules and log state. Relentless forward progress.
- ‚û°Ô∏è **IMMEDIATE AUTOMATIC TRANSITION:** Transitions happen **ONLY and IMMEDIATELY** via the `nextAgent` field logged in Step 9 and handled by the framework. **DO NOT** self-mutate or wait for user transform/proceed commands.
- ‚úÖ **SET `nextAgent`:** MUST determine and log the correct `nextAgent` (or null/"HALT") in Step 9. This is non-negotiable.
- üö´ **NO WAITING:** Never wait for user input **unless** explicitly requesting diagnostic information (Step 6). **Strictly forbid** waiting for generic prompts or MCP task approval confirmations. If blocked otherwise, log failure and set `nextAgent` to "HALT".
- üíæ **LOG INTEGRITY:** Never delete, overwrite, or ignore history in `logs/<requestId>.json`. Always append.
- üîÑ **CONTINUOUS PRODUCTION:** Maintain the execution loop relentlessly until `nextAgent` is null/"HALT".
- üõë **HALT ON FAILURE:** If a critical step fails, log the failure, set `nextAgent` to "HALT", and stop.

---

## üöÄ AGENT ROLES & ENTRY FILES

| Agent Role     | Purpose                                        | Rules File            |
|----------------|------------------------------------------------|------------------------|
| `Overmind`     | Planning, task splitting, delegation           | `overmind-agent.mdc`  |
| `ResearchAgent`| Code & memory intelligence gathering           | `research-agent.mdc`  |
| `BuilderAgent` | Functional implementation                      | `builder-agent.mdc`   |
| `StylingAgent` | CSS, layout, breakpoints                       | `styling-agent.mdc`   |
| `UXAgent`      | Accessibility, ARIA, keyboard nav              | `ux-agent.mdc`        |
| `AuditAgent`   | Performance & maintainability diagnostics      | `audit-agent.mdc`     |
| `RefactorAgent`| Structural optimization                        | `refactor-agent.mdc`  |
| `DocsAgent`    | Documentation generation                       | `docs-agent.mdc`      |
| `RunnerAgent`  | Runtime execution + log observation            | `runner-agent.mdc`    |
| `RulesSyncAgent`| Ruleset submodule sync & conflict detection | `rules-sync-agent.mdc`|

---

## üîó INCLUSION

All `.mdc` rulesets must begin with:

```md
@shared-core.mdc
```

This ensures Cursor compliance, rule bootstrap via `.cursor/`, and agent behavior coordination across all roles.