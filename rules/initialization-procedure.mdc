---
description: "[TODO: Add description]"
globs:
  - "*.*"
alwaysApply: false
---

# INITIALIZATION PROCEDURE (MANDATORY)

**PURPOSE:** Ensure `.cursor/` ruleset exists and is correctly configured. Executed by `InitializationAgent`.

**PRINCIPLES (MANDATORY):**
- **IDEMPOTENCY:** Repeated execution MUST yield same valid state.
- **VERIFICATION:** MUST confirm success via tool outputs (`list_dir`, `read_file`, `git status`, `parse_git_status.py`), NOT exit codes.
- **ERROR HANDLING:** On verification failure, MUST log error, HALT procedure, report failure to Overmind.
- **TOOL USAGE:** MUST use standard tools/Git commands.

## WORKFLOW (MANDATORY)

### Phase 1: Determine Project State
1.  **CHECK GIT STATUS:**
    - REQ: Git installed/accessible (`verify_environment.py`).
    - EXECUTE: `git rev-parse --is-inside-work-tree | cat` OR `python tools/parse_git_status.py`.
    - RECORD: `isGitRepo` (true/false).
2.  **CHECK `.cursor` DIR:**
    - EXECUTE: `list_dir .`.
    - RECORD: `cursorDirExists` (true/false).
3.  **CHECK IF DIR EMPTY (Non-Git Only):**
    - IF `isGitRepo` is false:
        - EXECUTE: `list_dir .`. Check for files/folders other than `.cursor`/`.git`.
        - RECORD: `isNotEmpty` (true/false).

### Phase 2: Execute Scenario Workflow

➡️ **Scenario A: Git Repository (`isGitRepo`: true)**
1.  **HANDLE EXISTING `.cursor`:**
    - IF `cursorDirExists` is true:
        - EXECUTE: `git submodule status .cursor | cat`.
        - IF Valid Submodule: GOTO Step A.4.
        - IF Not Submodule/Error: Log warning. EXECUTE: `run_terminal_cmd rm -rf .cursor` (or `Remove-Item -Recurse -Force .cursor`). VERIFY removal (`list_dir .`). IF fails, HALT. GOTO Step A.2.
    - ELSE (`cursorDirExists` is false): GOTO Step A.2.
2.  **CHECK/MODIFY ROOT `.gitignore`:**
    - SET flag: `rootGitignoreModified = false`.
    - EXECUTE: `read_file .gitignore` (Handle non-existence).
    - SEARCH for exact line `.cursor/`.
    - IF found:
        - EXECUTE: `edit_file .gitignore` (Comment out: `# .cursor/`). Log action.
        - SET flag: `rootGitignoreModified = true`.
        - VERIFY change (`read_file .gitignore`). IF fails, HALT.
    - GOTO Step A.3.
3.  **ADD SUBMODULE:**
    - EXECUTE: `git submodule add https://github.com/m0st4f4-hub/.cursor .cursor`.
    - VERIFY:
        - `list_dir .` -> `.cursor` AND `.gitmodules` exist.
        - `read_file .gitmodules` -> contains `[submodule ".cursor"]`.
        - IF fails, TRY `git submodule add --force ...` ONCE if conflict likely. IF still fails, HALT.
    - GOTO Step A.4.
4.  **UPDATE SUBMODULE:**
    - EXECUTE: `git submodule update --init --recursive`.
    - VERIFY: `list_dir .cursor/rules` -> `shared-core.mdc` present. RETRY once if needed. IF fails, HALT.
    - GOTO Phase 3.

➡️ **Scenario B: Non-Git, Empty (`isGitRepo`: false, `isNotEmpty`: false)**
1.  **HANDLE EXISTING `.cursor`:**
    - IF `cursorDirExists` is true: Log warning. EXECUTE: `run_terminal_cmd rm -rf .cursor` (or `Remove-Item -Recurse -Force .cursor`). VERIFY removal. IF fails, HALT.
    - GOTO Step B.2.
2.  **DIRECT CLONE:**
    - EXECUTE: `git clone https://github.com/m0st4f4-hub/.cursor .cursor`.
    - VERIFY: `list_dir .cursor/rules` (check `shared-core.mdc`). IF fails, HALT.
    - GOTO Phase 3.

➡️ **Scenario C: Non-Git, Not Empty (`isGitRepo`: false, `isNotEmpty`: true)**
*   **WARNING:** Requires manual intervention if `.cursor` exists.
1.  **HANDLE EXISTING `.cursor`:**
    - IF `cursorDirExists` is true: Log critical warning. HALT. Report need for manual intervention. DO NOT DELETE.
    - ELSE (`cursorDirExists` is false): GOTO Step C.2.
2.  **TEMP CLONE & MOVE:**
    - DEFINE: `temp_dir = "temp_ruleset_clone"`.
    - CLEANUP: `rm -rf temp_dir` (or `Remove-Item`).
    - CLONE: `git clone https://github.com/m0st4f4-hub/.cursor temp_dir`. VERIFY.
    - INIT SUBMODULES: `cd temp_dir && git submodule update --init --recursive && cd ..`. VERIFY.
    - MOVE: `mv temp_dir/.cursor .` (or `Move-Item`).
    - VERIFY: `list_dir .` (check `.cursor`), `list_dir .cursor/rules` (check `shared-core.mdc`). IF fails, HALT.
    - CLEANUP: `rm -rf temp_dir` (or `Remove-Item`). VERIFY.
    - GOTO Phase 3.

### Phase 3: Common Configuration Steps (MANDATORY)
1.  **CONFIGURE PROJECT DIR:**
    - EXECUTE: `list_dir .cursor/rules`. Check for `project` subdir.
    - IF not exists: CREATE (`run_terminal_cmd mkdir .cursor/rules/project` or `New-Item ...`).
    - VERIFY: `list_dir .cursor/rules`. IF fails, HALT.
2.  **UPDATE RULESET `.gitignore`:**
    - CHECK: `read_file .cursor/.gitignore` for exact line `rules/project/`. Handle non-existence/format.
    - ADD/FIX if needed: `edit_file .cursor/.gitignore` ensure `rules/project/` exists on own line.
    - VERIFY: `read_file .cursor/.gitignore`. IF fails, HALT.
3.  **UPDATE/RESTORE ROOT `.gitignore` (Scenario A only):**
    - IF `isGitRepo` is true:
        - IF `rootGitignoreModified` is true:
            - EXECUTE: `edit_file .gitignore` (Uncomment `# .cursor/` to `.cursor/`). Log action.
            - VERIFY: `read_file .gitignore`. Confirm uncommented. IF fails, HALT.
        - ELSE:
            - CHECK: `read_file .gitignore` for exact line `.cursor/` (uncommented). Handle non-existence.
            - ADD if missing: `edit_file` (create if needed) add `.cursor/` on new line.
            - VERIFY: `read_file .gitignore`. IF fails, HALT.
4.  **FINAL VERIFICATION:**
    - EXECUTE: `list_dir .cursor/rules`. Confirm exists with `shared-core.mdc`, `project/`, `agents/`.
    - OPTIONAL: EXECUTE `python tools/verify_environment.py` / `python tools/check_versions.py`.
    - REPORT success/failure (with reason) to Overmind.

## SUCCESS CRITERIA (MANDATORY)
- Initialization succeeds ONLY IF:
  1. All required scenario steps (A/B/C) + Phase 3 completed without HALT.
  2. ALL verification checks passed.
  3. `.cursor/rules/` exists with core structure.
  4. Git submodule configured correctly (Scenario A).
  5. `.gitignore` files configured correctly.
  6. Success logged and reported to Overmind (Phase 3.4).

## FORBIDDEN PATTERNS
- Skipping VERIFICATION steps.
- Relying on exit codes, not output inspection.
- Not handling file non-existence.
- Not logging errors and HALTING on verification failure. 