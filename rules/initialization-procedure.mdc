---
description: "[TODO: Add description]"
globs:
  - "*.*"
alwaysApply: false
---

# 1. Initialization Procedure (Self-Contained)

**Purpose:** Ensures the agent framework's foundational ruleset (`.cursor/` directory) is present and correctly configured before any other operations can proceed. This procedure **must** be executed by the [`InitializationAgent`](mdc:agents/initialization-agent.mdc) if the ruleset is missing or incomplete, typically triggered by [`Overmind`](mdc:agents/overmind-agent.mdc) upon starting a new project or encountering a corrupted environment.

**Core Principles:**
*   **Idempotency:** Running this procedure multiple times should result in the same valid end state.
*   **Verification:** Rely on tool outputs (`list_dir`, `read_file`, `git status`, custom tools like [`parse_git_status.py`](mdc:tools/parse_git_status.mdc)) to confirm the success of each step, not just command exit codes.
*   **Error Handling:** If a step fails verification, log the error and halt the procedure, reporting failure to [`Overmind`](mdc:agents/overmind-agent.mdc).
*   **Tool Usage:** Prefer standard tools ([Shared Core](mdc:shared-core.mdc#mandatory-mcp-toolchain)) and core Git commands over complex shell scripts.

## ‚úÖ Initialization Workflow

The [`InitializationAgent`](mdc:agents/initialization-agent.mdc) must first determine the project's state and then follow the corresponding workflow:

### Phase 1: Determine Project State

1.  **Check Git Status:**
    *   Run `git rev-parse --is-inside-work-tree | cat`.
    *   Alternatively, use `python tools/parse_git_status.py` for structured output ([Tool Definition](mdc:tools/parse_git_status.mdc)).
    *   Note the result (`isGitRepo`: true/false).
2.  **Check Existing `.cursor` Directory:**
    *   Run `list_dir .`. Check if `.cursor` exists.
    *   Note the result (`cursorDirExists`: true/false).
3.  **Check if Directory Empty (if not Git Repo):**
    *   **Only if `isGitRepo` is false:** Run `list_dir .`. Check if the directory contains *any* files or folders other than potentially `.cursor` or `.git` (if cloning directly).
    *   Note the result (`isNotEmpty`: true/false).

### Phase 2: Execute Scenario-Specific Workflow

‚û°Ô∏è **Scenario A: Project is a Git Repository (`isGitRepo` is true)**

1.  **Handle Existing `.cursor`:**
    *   If `cursorDirExists` is true:
        *   Run `git submodule status .cursor | cat`.
        *   **If Valid Submodule:** Output indicates a registered submodule. Proceed to **Step A.4 (Update Submodule)**.
        *   **If Not a Submodule (or error):** Log warning. Attempt removal: `run_terminal_cmd rm -rf .cursor` (or `Remove-Item -Recurse -Force .cursor` on Windows). **Verify** removal with `list_dir .`. If fails, **HALT**. Proceed to **Step A.2**.
    *   If `cursorDirExists` is false: Proceed to **Step A.2**.
2.  **Check & Temporarily Modify Root `.gitignore`:**
    *   Initialize flag: `rootGitignoreModified = false`.
    *   Run `read_file .gitignore` (handle potential non-existence gracefully).
    *   Search the content for the exact line `.cursor/`.
    *   **If found:**
        *   Use `edit_file` on `.gitignore` to comment out the `.cursor/` line (e.g., change to `# .cursor/`). Log this action.
        *   Set flag: `rootGitignoreModified = true`.
        *   **Verify** the change with `read_file .gitignore`. If commenting failed, **HALT**.
    *   Proceed to **Step A.3**.
3.  **Add Submodule:**
    *   Run `git submodule add https://github.com/m0st4f4-hub/.cursor .cursor`.
    *   **Verification:**
        *   Run `list_dir .`. Confirm `.cursor` AND `.gitmodules` exist.
        *   Run `read_file .gitmodules`. Confirm it contains an entry for `[submodule ".cursor"]`.
        *   If verification fails, try `git submodule add --force ...` once *if* a conflict was the likely cause (e.g., if Step A.1 removed an old directory). If it still fails, **HALT** and report error.
    *   Proceed to **Step A.4**.
4.  **Update Submodule:**
    *   Run `git submodule update --init --recursive`.
    *   **Verification:** Run `list_dir .cursor/rules`. Confirm critical rule files (e.g., [`shared-core.mdc`](mdc:shared-core.mdc)) are present. Retry update once if needed. If still fails, **HALT**.
    *   Proceed to **Phase 3**.

‚û°Ô∏è **Scenario B: Project is NOT a Git Repository AND is Empty (`isGitRepo` is false, `isNotEmpty` is false)**

1.  **Handle Existing `.cursor`:**
    *   If `cursorDirExists` is true: Log warning. Attempt removal: `run_terminal_cmd rm -rf .cursor` (or `Remove-Item -Recurse -Force .cursor`). **Verify** removal. If fails, **HALT**.
    *   Proceed to **Step B.2**.
2.  **Direct Clone:**
    *   Run `git clone https://github.com/m0st4f4-hub/.cursor .cursor`.
    *   **Verification:** `list_dir .cursor/rules` (check [`shared-core.mdc`](mdc:shared-core.mdc)). If fails, **HALT**.
    *   Proceed to **Phase 3**.

‚û°Ô∏è **Scenario C: Project is NOT a Git Repository AND is NOT Empty (`isGitRepo` is false, `isNotEmpty` is true)**

*   **Warning:** Complex scenario. Manual intervention might be needed.
1.  **Handle Existing `.cursor`:**
    *   If `cursorDirExists` is true: Log critical warning. **HALT**. Report need for manual intervention. *Do not automatically delete.*
    *   If `cursorDirExists` is false: Proceed to **Step C.2**.
2.  **Temp Clone & Move:**
    *   Define `temp_dir` = `temp_ruleset_clone`.
    *   **Cleanup:** `rm -rf temp_dir` (or `Remove-Item`).
    *   **Clone:** `git clone https://github.com/m0st4f4-hub/.cursor temp_dir`. Verify.
    *   **Init Submodules:** `cd temp_dir && git submodule update --init --recursive && cd ..`. Verify.
    *   **Move:** `mv temp_dir/.cursor .` (or `Move-Item`).
    *   **Verification:** `list_dir .` (check `.cursor`), `list_dir .cursor/rules` (check [`shared-core.mdc`](mdc:shared-core.mdc)). If fails, **HALT**.
    *   **Cleanup:** `rm -rf temp_dir` (or `Remove-Item`). Verify.
    *   Proceed to **Phase 3**.

### Phase 3: Common Configuration Steps

1.  **Configure Project Dir:**
    *   Run `list_dir .cursor/rules`. Check if `project` subdirectory exists.
    *   If not, create it: `run_terminal_cmd mkdir .cursor/rules/project` (or `New-Item -ItemType Directory -Path .cursor\rules\project` on Windows).
    *   **Verification:** `list_dir .cursor/rules`. If fails, **HALT**.
2.  **Update Ruleset `.gitignore`:**
    *   **Check:** Run `read_file .cursor/.gitignore`. Check if the exact line `rules/project/` exists on its own line. Handle potential non-existence or incorrect formatting.
    *   **Add/Fix if Missing/Incorrect:** Use `edit_file` on `.cursor/.gitignore` to ensure `rules/project/` exists on its own line.
    *   **Verification:** `read_file .cursor/.gitignore`. If fails, **HALT**.
3.  **Update/Restore Root `.gitignore` (Scenario A only):**
    *   **If `isGitRepo` is true:**
        *   **If `rootGitignoreModified` is true (from Step A.2):**
            *   Use `edit_file` on `.gitignore` to uncomment the `# .cursor/` line back to `.cursor/`. Log this action.
            *   **Verification:** `read_file .gitignore`. Confirm `.cursor/` is present and uncommented. If restoration fails, **HALT**.
        *   **Else (if `.cursor/` wasn't originally present in the root `.gitignore` or commented out):**
            *   **Check:** `read_file .gitignore` for the exact line `.cursor/` (uncommented). Handle non-existence of the file.
            *   **Add if Missing:** Use `edit_file` (create if needed) to add `.cursor/` on a new line.
            *   **Verification:** `read_file .gitignore`. If fails, **HALT**.
4.  **Final Verification:**
    *   Run `list_dir .cursor/rules`. Confirm it exists and contains expected subdirectories/files ([`shared-core.mdc`](mdc:shared-core.mdc), `project/`, [`agents/`](mdc:agent-roles.mdc)).
    *   Optionally run `python tools/verify_environment.py` ([Tool Definition](mdc:tools/verify_environment.mdc)) or `python tools/check_versions.py` ([Tool Definition](mdc:tools/check_versions.mdc)) for additional environment consistency checks.
    *   Report success or failure (with reason) to [`Overmind`](mdc:agents/overmind-agent.mdc).

## üèÜ Success Criteria

Initialization is successful **ONLY IF**: 
1.  All required steps for the determined scenario (A, B, or C) and Phase 3 completed without halting.
2.  All **Verification** checks within those steps passed.
3.  The `.cursor/rules/` directory exists with the expected core structure.
4.  Git submodule is correctly configured (Scenario A).
5.  `.gitignore` files are correctly configured.
6.  Success is logged and reported to [`Overmind`](mdc:agents/overmind-agent.mdc) as described in Step 3.4.

## ‚ö†Ô∏è Deprecated Patterns (Strictly Forbidden)

*   Skipping **Verification** steps after actions.
*   Relying on command exit codes instead of inspecting output for verification.
*   Not handling potential file/directory non-existence gracefully when reading/modifying.
*   Not logging errors and halting procedure upon verification failure. 