---
description: "[TODO: Add description]"
globs:
  - "*.*"
alwaysApply: false
---

# Tool Rule: analyze_log.py

## Purpose
Analyzes a specified agent request log file (`logs/<requestId>.json`) and generates a JSON summary. This provides a high-level overview of an agent run, including timing, agents involved, final status, and any errors recorded in observations.

## Execution Command
```sh
python tools/analyze_log.py <requestId>
```

## Arguments
- `<requestId>`: (Required, String) The unique identifier for the request, corresponding to the log filename (e.g., `req-123` for `logs/req-123.json`).

## Input
- Reads the JSON log file located at `logs/<requestId>.json`.
- Expects the log file to be a JSON array of log entry objects.

## Output
- Prints a JSON object to standard output containing the analysis summary.
- **Success:**
  ```json
  {
    "requestId": "<requestId>",
    "logFile": "logs/<requestId>.json",
    "found": true,
    "entryCount": <number>, // Total entries in the log array
    "agentsUsed": [
      "<AgentRole1>", // Alphabetically sorted list of unique agent roles
      "<AgentRole2>",
      ...
    ],
    "startTime": "<YYYY-MM-DDTHH:mm:ss.ffffff+zz:zz>", // ISO 8601 timestamp of first valid entry
    "endTime": "<YYYY-MM-DDTHH:mm:ss.ffffff+zz:zz>", // ISO 8601 timestamp of last valid entry
    "durationSeconds": <float>, // Total duration in seconds
    "finalStatus": "<status_string>", // Status from the last log entry
    "finalNextAgent": "<AgentRole>" | null, // nextAgent from the last log entry
    "errorsEncountered": [
        "<error_message_from_observation_1>", // List of error strings found in entry observations
        "<error_message_from_observation_2>",
        ...
    ],
    "error": null // No error occurred during log file analysis itself
  }
  ```
- **Failure:**
  ```json
  {
    "requestId": "<requestId>",
    "logFile": "logs/<requestId>.json",
    "found": false | true, // False if file not found, True if file found but parsing failed
    "entryCount": 0,
    "agentsUsed": [],
    "startTime": null,
    "endTime": null,
    "durationSeconds": null,
    "finalStatus": "Unknown",
    "finalNextAgent": null,
    "errorsEncountered": [],
    "error": "<error_message>" // e.g., "Log file not found.", "Failed to decode JSON...", "Log file is empty.", "Invalid requestId format."
  }
  ```
- Exits with code `0` if the log file was found and analyzed successfully (even if the run itself contained errors recorded in `errorsEncountered`).
- Exits with code `1` if the log file was not found, could not be parsed, or if the provided `requestId` was invalid.

## Examples
### Analyzing a successful request log `req-abc`
```sh
python tools/analyze_log.py req-abc
# Output (example):
# {
#   "requestId": "req-abc",
#   "logFile": "logs/req-abc.json",
#   "found": true,
#   "entryCount": 5,
#   "agentsUsed": ["BuilderAgent", "Overmind", "ResearchAgent"],
#   "startTime": "2023-10-27T10:00:00+00:00",
#   "endTime": "2023-10-27T10:05:30.123456+00:00",
#   "durationSeconds": 330.12,
#   "finalStatus": "completed",
#   "finalNextAgent": null,
#   "errorsEncountered": [],
#   "error": null
# }
# (Exit code: 0)
```

### Trying to analyze a non-existent log `req-xyz`
```sh
python tools/analyze_log.py req-xyz
# Output:
# {
#   "requestId": "req-xyz",
#   "logFile": "logs/req-xyz.json",
#   "found": false,
#   ...
#   "error": "Log file not found."
# }
# (Exit code: 1)
```

## Notes
- Assumes log files are stored in the `logs/` directory relative to where the script is run.
- Requires the `datetime` module for timestamp parsing.
- Performs basic validation on the `requestId` format to prevent path traversal issues.
- Attempts to parse timestamps robustly but may fail for non-standard formats.
- Error detection within observations is basic (looks for keywords or `"type": "error"`).
