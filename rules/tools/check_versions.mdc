---
description: 
globs: 
alwaysApply: false
---
# Rule: Check Environment/Tool Versions (`check_versions.py`)

## Purpose

This rule defines how agents should utilize the `check_versions.py` script located in the `tools/` directory. The script verifies the presence and reports the version of specified command-line tools.

## Tool Description

-   **Script Path:** `tools/check_versions.py`
-   **Execution:** Run using `python tools/check_versions.py [tool1] [tool2] ...`.
-   **Arguments:** An optional list of tool names to check (case-insensitive). Common examples: `python`, `node`, `git`, `npm`, `yarn`, `docker`, `java`, `pip`. If no arguments are provided, it defaults to checking `python`, `node`, and `git`.
-   **Input:** None (reads from command-line arguments).
-   **Output:** Prints a JSON string to standard output. The JSON object maps the requested tool names (lowercase) to their detected version strings (e.g., `"3.10.4"`, `"18.12.1"`) or a status string if the tool/version cannot be determined (e.g., `"not found"`, `"unknown tool"`, `"version format unrecognized"`, `"error: ..."`). Debugging information is printed to standard error.

## When to Use

-   **`InitializationAgent`:** During initial setup to verify the necessary development environment is present and meets requirements.
-   **`RunnerAgent`:** Before executing external commands or scripts, to ensure the correct interpreter or tool version is available.
-   **`BuilderAgent`:** Before running build steps, especially if specific tool versions are required.
-   **`Overmind` (Potentially):** During planning or diagnostics to understand the execution environment.

## How to Use

1.  **Identify Required Tools:** Determine which tool versions need to be checked for the current task.
2.  **Construct Command:** Create the command string, e.g., `python tools/check_versions.py node npm git yarn`.
3.  **Execute:** Use `run_terminal_cmd` with the constructed command (e.g., `python tools/check_versions.py node npm git yarn`). **Note:** Avoid piping to `cat` (`| cat`), especially on Windows/PowerShell, as it may interfere with output capture.
4.  **Parse Output:** The agent receives the JSON string output from the command's standard output. Parse this JSON to extract the version information for each tool.
5.  **Act on Results:** Use the version information for validation, reporting, or conditional logic (e.g., check if values are `"not found"` or `"unknown tool"`).

## Example Usage (Agent Step)

```json
// Agent Log Entry Snippet (e.g., InitializationAgent)
{
  // ... other fields ...
  "tasksCompleted": [
    "Checked versions of required tools: python, node, yarn."
  ],
  "observations": [
    {
      "type": "environment_check",
      "tool_versions": {
        "python": "3.11.2",
        "node": "18.15.0",
        "yarn": "not found" // Example where yarn wasn't found
      },
      "summary": "Checked tool versions. Yarn not found."
    }
  ],
  "nextAgent": "...", // Or potentially "HALT" if a critical tool is missing
  "handoffMessage": "Environment check complete. Yarn is missing. Proceeding with Python/Node tasks only."
}
```

## Considerations

-   **Tool Path:** The script assumes the tools are in the system's PATH.
-   **Version Parsing:** The script uses regex to extract version numbers. It might not work for all tools or unusual version string formats. The output will indicate if parsing failed (e.g., `"version format unrecognized"`).
-   **Extensibility:** To check new tools, the `TOOL_COMMANDS` dictionary within `tools/check_versions.py` needs to be updated by the `BuilderAgent` or manually.

