---
# Rule Definition Metadata (V1)
ruleId: tool-scaffold-agent
ruleType: Tool
title: 'Tool Guide: Scaffold Agent (`scaffold_agent.py`)'
description: Guide for using `tools/scaffold_agent.py` script via `run_terminal_cmd` to generate boilerplate `.mdc` rule files for new agents.
schemaVersion: 1
conformsTo: null # Not a standard Agent/Procedure spec
tags: [tool, guide, scaffold, generator, agent, rules, python, script, mdc]
lastUpdated: null
status: Active
---

# üèóÔ∏è Tool Guide: Scaffold Agent (`scaffold_agent.py`)

## 1. PURPOSE

Generates a boilerplate `.mdc` rule file for a new agent based on a standard template, placing it in the correct directory (`.cursor/rules/agents/`).

## 2. USAGE

*   **Command:** `python tools/scaffold_agent.py <AgentName>`
*   **Executor:** Use via `run_terminal_cmd`.
*   **Arguments:**
    *   `<AgentName>`: REQUIRED (Positional). The desired agent name in `PascalCase`, ending with `Agent` (e.g., `MyNewAgent`).
*   **Prerequisites:** Python environment. The script itself (`tools/scaffold_agent.py`).
*   **Output (File):** Creates a new file in `.cursor/rules/agents/` named using the kebab-case version of `<AgentName>` (e.g., `my-new-agent.mdc`).
*   **Output (stdout):** JSON indicating success or failure (e.g., `{"success": true, "filepath": ".cursor/rules/agents/my-new-agent.mdc"}` or `{"success": false, "error": "Invalid name format."}`).
*   **Exit Code:** 0 for success, 1 for failure.

## 3. TYPICAL AGENTS

*   `AgentGeneratorAgent`: Uses this tool as its primary mechanism for creating new agent specifications.
*   `Overmind`: Might direct `AgentGeneratorAgent` to use this tool.

## 4. HOW TO USE (Agent Logic)

1.  Determine the correct `PascalCaseAgentName` for the new agent.
2.  Construct the command string: `python tools/scaffold_agent.py PascalCaseAgentName`.
3.  Execute via `run_terminal_cmd`.
4.  Parse the JSON output from `stdout`.
5.  Check `success` field and `exit_code`.
6.  Report the outcome (success/failure, new filepath, error message) via MCP task description.

## 5. EXAMPLE COMMAND & OUTPUT

**Command:**
```bash
python tools/scaffold_agent.py MyCoolAgent
```

**Example `stdout` (Success):**
```json
{
  "success": true, 
  "message": "Agent rule file created successfully.", 
  "filepath": ".cursor/rules/agents/my-cool-agent.mdc"
}
```

**Example `stdout` (Failure - Invalid Name):**
```json
{
  "success": false, 
  "error": "Agent name must be PascalCase and end with Agent."
}
```

## 6. CONSIDERATIONS

*   The target directory (`.cursor/rules/agents/`) must exist and be writable.
*   The script enforces the naming convention (`PascalCaseAgentName`).
*   The generated file contains standard sections with TODO placeholders, requiring further edits (likely by `RuleEditorAgent`).
*   The script path assumes execution from the workspace root.
