---
# Rule Definition Metadata (V1)
ruleId: tool-run-linter
ruleType: Tool
title: 'Tool Guide: Run Linter (`run_linter.py`)'
description: Guide for using `tools/run_linter.py` script via `run_terminal_cmd` to execute a specified linter on target files/directories.
schemaVersion: 1
conformsTo: null # Not a standard Agent/Procedure spec
tags: [tool, guide, lint, format, python, script]
lastUpdated: null
status: Active
---

# üõ†Ô∏è Tool Guide: Run Linter (`run_linter.py`)

## 1. PURPOSE

Defines usage for `tools/run_linter.py` to lint (check style/errors) or format (fix style) code.

## 2. USAGE

*   **Command:** `python tools/run_linter.py <language> <action> <target>`
*   **Executor:** Use via `run_terminal_cmd`.
*   **Arguments:**
    *   `language`: REQUIRED. E.g., `python`.
    *   `action`: REQUIRED. `lint` or `format`.
    *   `target`: REQUIRED. File or directory path.
*   **Prerequisites:**
    *   Python: `flake8`, `black` (`pip install flake8 black`). Project config files (e.g., `.flake8`, `pyproject.toml`) may be needed.
*   **Output (stdout):** JSON summary (`success`, `error`, `issues`, `issue_count`, `files_formatted`).
*   **Exit Code:** 0=Success/No Issues, 1=Lint Issues Found/Error.

## 3. TYPICAL AGENTS

*   `AuditAgent`: Use `lint`.
*   `RefactorAgent`/`BuilderAgent`: Use `lint` or `format`.

## 4. HOW TO USE (Agent Logic)

1.  Determine `language`, `action`, `target`.
2.  Construct command string.
3.  Execute via `run_terminal_cmd`.
4.  Parse JSON output from `stdout`.
5.  Report results/issues via MCP task description.

## 5. EXAMPLE JSON OUTPUT (stdout)

```json
// Lint with issues
{
  "language": "python", "action": "lint", "target": "./src",
  "success": true, "error": null, "issue_count": 2,
  "issues": [
    {"file": "a.py", "line": 10, ...},
    {"file": "b.py", "line": 25, ...}
  ]
}

// Format with no changes needed
{
  "language": "python", "action": "format", "target": "a.py",
  "success": true, "error": null, "files_formatted": 0,
  "message": "No changes needed."
}
```

## 6. CONSIDERATIONS

*   Ensure underlying tools (`flake8`, `black`, etc.) are installed.
*   Relies on project-specific config files if present.
*   Script (`tools/run_linter.py`) needs updates for new languages/tools.
