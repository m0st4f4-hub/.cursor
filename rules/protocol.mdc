---
alwaysApply: true
description: Ultra-Deep Thinking Protocol
globs: []
ruleId: ultra-deep-thinking-protocol
ruleType: Framework
---

# Ultra-Deep Thinking Protocol

**Applicability:** The `ProjectManager` **MUST** execute all phases with diligence and foresight. All other agents **MUST** adhere to core verification, assumption, and scrutiny protocols.

## PHASE A: Strategic Foresight & Goal Decomposition
1.  **Goal Definition:** Clearly outline the objective of the request or project, defining target deliverables and supporting artifacts. This may involve multiple inter-agent task chains.
2.  **Decomposition & Sequence Anticipation:** Break down the goal into the smallest logical, independently verifiable subtasks. For each subtask, anticipate likely agent operations, the artifacts they will generate, and potential next agents or decision points. Consider dependencies and opportunities for parallelization.
3.  **Alternative Analysis (Mandatory for non-trivial tasks):** Explore at least two distinct approaches or agent chains, evaluating them based on potential output velocity, artifact richness, and robustness. Document alternatives and the rationale for selection. Consider potential failure modes and mitigation strategies.
4.  **Assumption Identification & Challenge:** Document all key assumptions for the overall goal and initial subtasks. Plan verification subtasks or procedures to confirm these assumptions.

## PHASE B: Operational Orchestration & Task Delegation (MCP)
1.  **Delegation & Initiation:** Assign initial subtasks via MCP (`mcp_project-manager_create_task`) with clarity and efficiency.
    *   **Task Context (Mandatory):** Provide comprehensive context, clear input/output parameters, references to prior tasks/goals/artifacts, explicit assumptions, and detailed specifications for expected output artifacts. If anticipated in Phase A, note potential logical next agents and the artifacts they are expected to consume/produce.
    *   **Initial Status (Mandatory):** Set an appropriate initial status (e.g., "To Do", "Pending Activation").
2.  **Task ID Logging & Chain Tracking:** Record all created task IDs within the `ProjectManager` task. Maintain an understanding of task chains, dependencies, artifact flow, and anticipated decision points. Create a visual map or structured log if complex.

## PHASE C: Multi-Vector Validation & Triangulation (Post-Operation)
**MUST BE PERFORMED prior to accepting any subtask result as finalizing a stage of work.**
0.  **Status Monitoring (Continuous):** Periodically monitor subtask status and artifact delivery (`mcp_project-manager_get_tasks` / `mcp_project-manager_get_task_by_id`). Pay attention to statuses indicating handoffs or awaiting ProjectManager review to track automated chains and identify points for strategic direction.
1.  **Data & Artifact Retrieval & Scrutiny:** Obtain full details and all associated artifacts (`mcp_project-manager_get_task_by_id`). Analyze the report, all output artifacts (code, data, logs), verification data, and the agent\'s workflow continuation decision.
2.  **Multi-Method Verification (Mandatory):** For non-trivial tasks, employ at least two MCP tools. For critical tasks and code artifacts, employ at least three MCP tools (may be delegated to an appropriate analysis agent, who will produce their own verification artifacts). Utilize diverse tools. Verify not only the completed task and its primary artifacts but also the appropriateness and correctness of any follow-up tasks created (or the decision not to create one) against the strategic plan, anticipated artifact sequences from Phase A, and the mandates in the core agent execution loop ([loop.mdc](mdc:.cursor/rules/loop.mdc)).
3.  **External Cross-Checking (Mandatory, if applicable):** Cross-check agent-provided information against external sources (e.g., library documentation, web search, prior tasks).
4.  **Results Analysis & Artifact Chain Validation:** Compare all verification outcomes. Discrepancies, uncertainties, and failures **MUST** be documented.
    *   If an agent created follow-up tasks: Validate that these are logical, aligned with system mandates and [loop.mdc](mdc:.cursor/rules/loop.mdc), and contribute effectively to the overall goal.
    *   If a task is "Completed" and awaiting ProjectManager: Assess if the agent *should have* created a follow-up task per [loop.mdc](mdc:.cursor/rules/loop.mdc). If so, `ProjectManager` **MUST** initiate the missed follow-up task. Otherwise, determine and initiate the next strategic task.
    *   If a chain is going astray or an agent made an inappropriate continuation decision, `ProjectManager` **MUST** intervene (see Phase E).

## PHASE D: Systemic Integrity Audit & Vulnerability Assessment (Continuous)
1.  **Logic Review:** Scrutinize all reasoning, assumptions, and conclusions within individual tasks and across task chains.
2.  **Uncertainty Identification:** Note all ambiguities and areas of low confidence. Propose methods to reduce uncertainty.
3.  **Systematic Weakness Detection (Mandatory):** Actively search for weaknesses, gaps, unchallenged assumptions, and edge cases in the overall workflow and individual agent performance, especially those that could compromise code quality or artifact integrity. Document all findings.
4.  **Pitfall Documentation:** Record all identified risks (e.g., infinite loops, misdirected task creation, artifact corruption vectors) and the rationale for mitigation or acceptance.

## PHASE E: Anomaly Resolution & Corrective Action Protocol
1.  **Deep Context & Artifact Acquisition:** Utilize multiple, diverse methods to gather comprehensive context and all relevant artifacts (logs, failed outputs, configurations) regarding the failure or anomaly.
    *   Examples of MCP tools: `mcp_project-manager_get_task_by_id` (for the failed task and related tasks), `mcp_desktop-commander_read_file`, `mcp_desktop-commander_list_directory`, `mcp_desktop-commander_get_file_info`, `mcp_desktop-commander_search_code`, `mcp_web-fetch_fetch`, `default_api.web_search`.
2.  **Stated Cause Challenge (Mandatory):** Investigate alternative root causes for task failures or workflow issues, including flawed agent continuation logic or failure to adhere to the handoff protocol in [loop.mdc](mdc:.cursor/rules/loop.mdc).
3.  **Recovery Planning / Workflow Correction:** Plan recovery tasks (utilizing Phase A alternatives, corrective actions, or further research), with the primary goal of restoring correct code/artifact production. This may involve creating tasks to correct a previous agent\'s work, overriding an agent\'s erroneous follow-up task, creating a missed follow-up task, redirecting a task chain, or halting a specific line of automated task creation. Document the diagnosis and correction plan.
4.  **Failure Declaration (Last Resort):** Declare failure of a sub-goal or the entire project only if comprehensive analysis confirms the objective is infeasible or unrecoverable.

## PHASE F: Terminal Assessment & Retrospective Validation (Project Completion)
**MUST BE PERFORMED prior to final request completion.**
1.  **Pause Execution & Artifact Inventory:** Pause all operations and new task creation. Conduct a full inventory and audit of all generated code and artifacts against the initial plan.
2.  **Comprehensive Reconsideration:** Review the entire process from Phase A, including all automated task chains and their resultant artifacts. Re-evaluate all decisions, assumptions, and verification steps.
3.  **Final Weakness Scan:** Conduct a final systematic search for any overlooked issues or weaknesses in the completed work and artifacts.
4.  **Review Documentation & Generate Final Report:** Document this reconsideration process, noting any concluding thoughts or concerns about the automated workflows and artifact quality. Ensure this documentation is a clear, actionable, and comprehensive final project report.
5.  **Conclude Operations:** Only after completion of the above steps, allow final completion of the request. Confirm that the outcome and the suite of delivered artifacts are satisfactory.

## Agent-Specific Protocols and Enhancements

These enhance the core protocol application.

1.  **Error Escalation and Recovery:**
    *   If a failure, ambiguity, or non-authoritativeness is detected, create an MCP escalation or diagnostic task, referencing the failed/blocked context and logging the reason. Propose a recovery or diagnostic plan, prioritizing swift restoration of production.
2.  **Proactive Anomaly Detection & Opportunity Exploitation:**
    *   After each major step, self-assess for anomalies or unexpected results. Log anomalies in MCP. If an anomaly or successful execution reveals an opportunity to generate additional valuable artifacts (code, tests, documentation), proactively create new sub-tasks.
3.  **Redundant, Cross-Rule Verification & Artifact Validation:**
    *   For critical or high-impact changes and all significant code artifacts, create a verification sub-task for a peer rule or agent to independently validate the change and its associated artifacts.
4.  **Rule File and Protocol Version Logging:**
    *   Log the version/hash or last-modified timestamp of every rule file and protocol referenced in MCP updates and reports.
5.  **Automated Rule Recall and Self-Update Check:**
    *   At the start of each process, check for updates to this rule file and core protocols. If a change is detected, log this in MCP and re-fetch/re-parse the rules before proceeding.
6.  **Explicit, Auditable Tool Usage Logging:**
    *   Log every tool call (with parameters, results, and identifiers of artifacts consumed/produced) in a structured, machine-readable format in the MCP task description or as an attached artifact.
7.  **End-of-Process Self-Reflection & Improvement Proposals:**
    *   At the end of each process, include a brief, itemized self-reflection in your MCP update: what went as planned, what deviated, what could be improved, and any uncertainties or risks detected.

## References
*   [system.mdc](mdc:.cursor/rules/system.mdc)
*   [loop.mdc](mdc:.cursor/rules/loop.mdc)
*   [concepts.mdc](mdc:.cursor/rules/concepts.mdc)
*   [roles.mdc](mdc:.cursor/rules/roles.mdc)
*   [init.mdc](mdc:.cursor/rules/init.mdc)
*   [entrypoint.mdc](mdc:.cursor/rules/entrypoint.mdc)
*   [protocol.mdc](mdc:.cursor/rules/protocol.mdc)
---