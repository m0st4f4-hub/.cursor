---
alwaysApply: true
description: Ultra-Deep Thinking Protocol
globs: []
ruleId: ultra-deep-thinking-protocol
ruleType: Protocol
---

# üßê ULTRA-DEEP THINKING PROTOCOL

**APPLICABILITY:** `ProjectManager` **MUST** EXECUTE ALL PHASES. ALL OTHER AGENTS **MUST** ADHERE TO CORE VERIFICATION, ASSUMPTION, AND SCRUTINY PROTOCOLS AS PER [system.mdcc](mdc:.cursor/rules/system.mdcc).

## PHASE A: STRATEGIC FORESIGHT & GOAL DECOMPOSITION
1.  **GOAL DEFINITION:** CLEARLY OUTLINE THE OBJECTIVE OF THE REQUEST/PROJECT. THIS MAY BE A HIGH-LEVEL GOAL REQUIRING MULTIPLE INTER-AGENT TASK CHAINS.
2.  **DECOMPOSITION & SEQUENCE ANTICIPATION:** BREAK DOWN THE GOAL INTO THE SMALLEST LOGICAL, INDEPENDENTLY VERIFIABLE SUBTASKS. FOR EACH SUBTASK, ANTICIPATE LIKELY *SUCCESSFUL* AGENT OPERATIONS AND POTENTIAL *LOGICAL NEXT AGENTS* OR *DECISION POINTS* WHERE AN AGENT MIGHT HAND OFF. THIS HELPS IN LATER VALIDATING AGENT-DRIVEN CONTINUATIONS.
3.  **ALTERNATIVE ANALYSIS (MANDATORY, NON-TRIVIAL TASKS):** EXPLORE AT LEAST TWO DISTINCT APPROACHES/AGENT CHAINS. DOCUMENT ALL ALTERNATIVES AND THE RATIONALE FOR SELECTION. CONSIDER ALL POTENTIAL FAILURE MODES WITHIN A CHAIN.
4.  **ASSUMPTION IDENTIFICATION & CHALLENGE (MANDATORY):** DOCUMENT ALL KEY ASSUMPTIONS FOR THE OVERALL GOAL AND INITIAL SUBTASKS. PLAN VERIFICATION SUBTASKS OR PROCEDURES TO CHALLENGE AND CONFIRM THESE ASSUMPTIONS.

## PHASE B: OPERATIONAL ORCHESTRATION & TASK DELEGATION (MCP)
1.  **DELEGATION & INITIATION:** ASSIGN INITIAL SUBTASKS VIA MCP (`mcp_project-manager_create_task_tasks__post`).
    *   **TASK CONTEXT (MANDATORY):** PROVIDE SUFFICIENT CONTEXT, CLEAR INPUT/OUTPUT PARAMETERS, REFERENCES TO PRIOR TASKS/GOALS, EXPLICIT ASSUMPTIONS, AND EXPECTED OUTPUTS. ALSO, IF ANTICIPATED IN PHASE A, NOTE POTENTIAL LOGICAL NEXT AGENTS THE CURRENT AGENT MIGHT HAND OFF TO UPON SUCCESSFUL COMPLETION OF SPECIFIC OUTCOMES.
    *   **INITIAL STATUS (MANDATORY):** SET (E.G., "PENDING ACTIVATION").
2.  **TASK ID LOGGING & CHAIN TRACKING:** RECORD ALL CREATED TASK IDS WITHIN THE `ProjectManager` TASK. MAINTAIN A CONCEPTUAL UNDERSTANDING OF TASK CHAINS, DEPENDENCIES, AND ANTICIPATED DECISION POINTS.

## PHASE C: MULTI-VECTOR VALIDATION & TRIANGULATION (POST-OPERATION)
**MUST BE PERFORMED PRIOR TO ACCEPTING ANY SUBTASK RESULT AS TRULY FINALIZING A STAGE OF WORK.**
0.  **STATUS MONITORING (CONTINUOUS):** PERIODICALLY MONITOR SUBTASK STATUS (`mcp_project-manager_get_task_list_tasks__get` / `get_task_by_id`). PAY ATTENTION TO STATUSES LIKE "COMPLETED_HANDOFF_TO_..." AND "COMPLETED_AWAITING_PROJECTMANAGER" TO TRACK AUTOMATED CHAINS AND IDENTIFY POINTS FOR STRATEGIC DIRECTION.
1.  **DATA RETRIEVAL & SCRUTINY:** OBTAIN FULL DETAILS (`mcp_project-manager_get_task_by_id_tasks__task_id__get`). ANALYZE THE REPORT, OUTPUTS, VERIFICATION DATA, AND THE AGENT'S WORKFLOW CONTINUATION DECISION (I.E., ANY FOLLOW-UP TASKS CREATED OR THE EXPLICIT STATUS INDICATING IT AWAITS `ProjectManager`).
2.  **MULTI-METHOD VERIFICATION (MANDATORY):** FOR NON-TRIVIAL TASKS, EMPLOY AT LEAST TWO MCP TOOLS. FOR CRITICAL TASKS, EMPLOY AT LEAST THREE MCP TOOLS (MAY BE DELEGATED TO `AuditAgent`/`InformationAnalyst`). UTILIZE DIVERSE TOOLS. VERIFY NOT ONLY THE COMPLETED TASK BUT ALSO THE APPROPRIATENESS OF ANY FOLLOW-UP TASKS CREATED (OR THE DECISION NOT TO CREATE ONE) AGAINST THE STRATEGIC PLAN AND ANTICIPATED SEQUENCES FROM PHASE A.
    *   Examples of diverse MCP tools for verification:
        *   File content/state: `mcp_desktop-commander_read_file`, `mcp_desktop-commander_get_file_info`, `mcp_desktop-commander_list_directory`.
        *   Code patterns/presence: `mcp_desktop-commander_search_code`.
        *   External data: `mcp_web-fetch_fetch`, (`mcp_context7_resolve-library-id` + `mcp_context7_get-library-docs`).
        *   Runtime behavior (if applicable, via `ExecutionValidator`): `mcp_desktop-commander_execute_command` (for tests/scripts), relevant browser tools (`mcp_browser-tools_*`, `mcp_playwright_browser_*`).
3.  **EXTERNAL CROSS-CHECKING (MANDATORY, IF APPLICABLE):** CROSS-CHECK AGENT-PROVIDED INFORMATION AGAINST EXTERNAL SOURCES (LIBRARY DOCUMENTATION, WEB SEARCH, PRIOR TASKS).
4.  **RESULTS ANALYSIS & CHAIN VALIDATION:** COMPARE ALL VERIFICATION OUTCOMES. DISCREPANCIES, UNCERTAINTIES, AND FAILURES **MUST** BE DOCUMENTED. IF AN AGENT CREATED FOLLOW-UP TASKS, VALIDATE THAT THESE ARE LOGICAL, ALIGNED WITH [system.mdcc](mdc:.cursor/rules/system.mdcc) MANDATE 4, AND CONTRIBUTE TO THE OVERALL GOAL. IF A TASK IS "COMPLETED_AWAITING_PROJECTMANAGER", DETERMINE AND INITIATE THE NEXT STRATEGIC TASK. IF A CHAIN IS GOING ASTRAY OR AN AGENT MADE AN INAPPROPRIATE CONTINUATION DECISION, `ProjectManager` MUST INTERVENE (SEE PHASE E).

## PHASE D: SYSTEMIC INTEGRITY AUDIT & VULNERABILITY ASSESSMENT (CONTINUOUS)
1.  **LOGIC REVIEW:** SCRUTINIZE ALL REASONING, ASSUMPTIONS, AND CONCLUSIONS, BOTH WITHIN INDIVIDUAL TASKS AND ACROSS TASK CHAINS.
2.  **UNCERTAINTY IDENTIFICATION:** NOTE ALL AMBIGUITIES AND AREAS OF LOW CONFIDENCE.
3.  **SYSTEMATIC WEAKNESS DETECTION (MANDATORY):** ACTIVELY AND SYSTEMATICALLY SEARCH FOR WEAKNESSES, GAPS, UNCHALLENGED ASSUMPTIONS, AND EDGE CASES IN THE OVERALL WORKFLOW AND INDIVIDUAL AGENT PERFORMANCE. DOCUMENT ALL FINDINGS.
4.  **PITFALL DOCUMENTATION:** RECORD ALL IDENTIFIED RISKS (E.G., INFINITE LOOPS, MISDIRECTED TASK CREATION) AND THE RATIONALE FOR MITIGATION OR ACCEPTANCE.

## PHASE E: ANOMALY RESOLUTION & CORRECTIVE ACTION PROTOCOL
1.  **DEEP CONTEXT ACQUISITION:** UTILIZE MULTIPLE, DIVERSE METHODS TO GATHER COMPREHENSIVE CONTEXT REGARDING THE FAILURE OR ANOMALY (E.G., UNEXPECTED TASK CHAINING, INAPPROPRIATE AGENT-DRIVEN HANDOFF, STALLED PROGRESS WHERE AN AGENT SHOULD HAVE INITIATED A FOLLOW-UP BUT DIDN'T).
    *   Examples of MCP tools for context acquisition:
        *   Task history/details: `mcp_project-manager_get_task_by_id_tasks__task_id__get` (for the failed task and related tasks in the chain).
        *   File system state: `mcp_desktop-commander_read_file`, `mcp_desktop-commander_list_directory`, `mcp_desktop-commander_get_file_info` (for relevant files).
        *   Code analysis: `mcp_desktop-commander_search_code` (for related code patterns or error messages).
        *   External information: `mcp_web-fetch_fetch` or `default_api.web_search` (for error messages or external dependencies).
2.  **STATED CAUSE CHALLENGE (MANDATORY):** DO NOT ACCEPT THE INITIALLY STATED CAUSE AT FACE VALUE. INVESTIGATE ALTERNATIVE ROOT CAUSES FOR TASK FAILURES OR WORKFLOW ISSUES, INCLUDING FLAWED AGENT CONTINUATION LOGIC.
3.  **RECOVERY PLANNING / WORKFLOW CORRECTION:** PLAN RECOVERY TASKS (UTILIZING PHASE A ALTERNATIVES, CORRECTIVE ACTIONS, OR FURTHER RESEARCH). THIS MAY INVOLVE CREATING TASKS TO CORRECT A PREVIOUS AGENT'S WORK, OVERRIDING AN AGENT'S FOLLOW-UP TASK, CREATING A MISSED FOLLOW-UP TASK, REDIRECTING A TASK CHAIN, OR HALTING A SPECIFIC LINE OF AUTOMATED TASK CREATION. DOCUMENT THE DIAGNOSIS AND CORRECTION PLAN.
4.  **FAILURE DECLARATION (LAST RESORT):** DECLARE FAILURE OF A SUB-GOAL OR THE ENTIRE PROJECT ONLY IF DEEP ANALYSIS CONFIRMS THE OBJECTIVE IS INFEASIBLE OR UNRECOVERABLE.

## PHASE F: TERMINAL ASSESSMENT & RETROSPECTIVE VALIDATION (PROJECT COMPLETION)
**MUST BE PERFORMED PRIOR TO FINAL REQUEST COMPLETION.**
1.  **PAUSE EXECUTION:** DELIBERATELY PAUSE ALL OPERATIONS AND NEW TASK CREATION.
2.  **COMPREHENSIVE RECONSIDERATION:** REVIEW THE ENTIRE PROCESS COMMENCING FROM PHASE A, INCLUDING ALL AUTOMATED TASK CHAINS AND THEIR OUTCOMES. RE-EVALUATE ALL DECISIONS, ASSUMPTIONS, AND VERIFICATION STEPS.
3.  **FINAL WEAKNESS SCAN:** CONDUCT A FINAL SYSTEMATIC SEARCH FOR ANY OVERLOOKED ISSUES OR WEAKNESSES IN THE COMPLETED WORK.
4.  **REVIEW DOCUMENTATION:** DOCUMENT THIS RECONSIDERATION PROCESS, NOTING ANY CONCLUDING THOUGHTS OR CONCERNS ABOUT THE AUTOMATED WORKFLOWS.
5.  **CONCLUDE OPERATIONS:** ONLY AFTER COMPLETION OF THE ABOVE STEPS, ALLOW FINAL COMPLETION OF THE REQUEST.

## RELATED CORE FRAMEWORK DIRECTIVES
* [system.mdcc](mdc:.cursor/rules/system.mdcc)
* [loop.mdcc](mdc:.cursor/rules/loop.mdcc)
* [concepts.mdcc](mdc:.cursor/rules/concepts.mdcc)
* [roles.mdcc](mdc:.cursor/rules/roles.mdcc)
* [init.mdcc](mdc:.cursor/rules/init.mdcc)
* [entrypoint.mdcc](mdc:.cursor/rules/entrypoint.mdcc)