---
# Rule Definition Metadata (V1)
ruleId: ultra-deep-thinking-protocol
ruleType: Protocol
title: Ultra-Deep Thinking Protocol
description: Core methodology for rigorous planning, verification, and critical analysis. Primarily executed by Overmind.
schemaVersion: 1
conformsTo: null
tags: [core, methodology, planning, verification, analysis, overmind]
lastUpdated: null
status: Active
---

# 🧐 Ultra-Deep Thinking Protocol

**Applicability:** Agents designated to execute this protocol (e.g., `Overmind`) **MUST** follow all phases. Other agents **MUST** adhere to core principles per @`system.md`.

## Phase A: Strategic Planning & Decomposition

1.  **Define Goal:** Clearly outline task objective.
2.  **Decompose:** Break into smallest logical, verifiable subtasks.
3.  **Explore Alternatives (Mandatory for non-trivial subtasks):**
    *   **MUST** explore >= 2 distinct approaches.
    *   **MUST** document alternatives considered and rationale for choice.
    *   **MUST** consider potential failure modes.
4.  **Identify & Challenge Assumptions (Mandatory):**
    *   **MUST** explicitly document key assumptions.
    *   **MUST** plan specific verification steps/tasks to challenge/confirm each significant assumption.

## Phase B: Execution Orchestration (via MCP)

1.  **Delegate:** Assign planned subtasks via `mcp_taskmanager_add_tasks_to_request`.
2.  **Contextualize:** Ensure task descriptions include context, inputs/outputs, and assumptions under test.

## Phase C: Rigorous Verification & Cross-Checking (Post-Subtask)

1.  **Scrutinize:** Retrieve task details (`open_task_details`); critically analyze report, claims, outputs, adherence.
2.  **Multi-Method Verification (Mandatory):**
    *   **MUST** use >= 2 distinct verification methods/tools for non-trivial outputs (e.g., `read_file` + `grep_search`).
    *   **MUST** use >= 3 distinct verification methods/tools for critical outputs (may include delegated `AuditAgent`/`ResearchAgent`).
    *   Utilize diverse tools (`read_file`, `grep_search`, `codebase_search`, `git`, `web_search`, `context7`, scripts, delegated agents).
3.  **External Cross-Check (Mandatory where applicable):**
    *   **MUST** cross-check facts/inferences against external data (`context7`, `web_search`, prior tasks).
4.  **Analyze Results:** Compare verification outcomes; document discrepancies, uncertainties, failures explicitly.

## Phase D: Critical Scrutiny & Weakness Analysis (Continuous)

1.  **Review Logic:** Scrutinize reasoning, assumptions, conclusions.
2.  **Identify Uncertainties:** Explicitly note remaining ambiguities or alternative viewpoints.
3.  **Systematic Weakness Search (Mandatory):**
    *   Even if verified, **MUST** actively search for weaknesses, logical gaps, hidden assumptions, edge cases. Document findings.
4.  **Document Pitfalls:** Clearly record identified risks and mitigation/acceptance rationale.

## Phase E: Escalation Handling (On Task/Verification Failure)

1.  **Deep Context:** Use multiple diverse tools (`read_file`, `grep_search`, `codebase_search`, `git log`, etc.) for independent failure context understanding.
2.  **Challenge Cause:** **MUST NOT** accept initial error report at face value. Investigate alternative root causes.
3.  **Plan Recovery:** Based on deep analysis, plan specific recovery tasks (potentially using Phase A alternatives). Document diagnosis.
4.  **Declare Failure (Last Resort):** Only if deep analysis confirms infeasibility. Document rationale.

## Phase F: Final Review & Reconsideration (On `all_tasks_done`)

1.  **Pause:** Halt execution deliberately.
2.  **Reconsider All:** Review entire process from Phase A. Re-evaluate decisions, assumptions, verification sufficiency.
3.  **Final Weakness Scan:** Perform final systematic search for overlooked issues.
4.  **Document Review:** Explicitly state final reconsideration performed; note concluding thoughts.
5.  **Conclude:** Only then allow request completion.
