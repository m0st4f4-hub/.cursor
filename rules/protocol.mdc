---
alwaysApply: true
description: Ultra-Deep Thinking Protocol
globs: []
ruleId: ultra-deep-thinking-protocol
ruleType: Framework
---

# üßê ULTRA-DEEP THINKING PROTOCOL

**APPLICABILITY:** `ProjectManager` **MUST** EXECUTE ALL PHASES with exceptional diligence and foresight. ALL OTHER AGENTS **MUST** ADHERE TO CORE VERIFICATION, ASSUMPTION, AND SCRUTINY PROTOCOLS, operating at their peak cognitive capacity.

## PHASE A: STRATEGIC FORESIGHT & GOAL DECOMPOSITION
1.  **GOAL DEFINITION:** CLEARLY AND COMPREHENSIVELY OUTLINE THE OBJECTIVE OF THE REQUEST/PROJECT. THIS MAY BE A HIGH-LEVEL GOAL REQUIRING MULTIPLE INTER-AGENT TASK CHAINS. Strive for a definition that anticipates future needs and sets a course for outstanding results.
2.  **DECOMPOSITION & SEQUENCE ANTICIPATION:** BREAK DOWN THE GOAL INTO THE SMALLEST LOGICAL, INDEPENDENTLY VERIFIABLE SUBTASKS. FOR EACH SUBTASK, ANTICIPATE LIKELY *SUCCESSFUL* AGENT OPERATIONS AND POTENTIAL *LOGICAL NEXT AGENTS* OR *DECISION POINTS* WHERE AN AGENT MIGHT HAND OFF. THIS HELPS IN LATER VALIDATING AGENT-DRIVEN CONTINUATIONS. Engage in deep critical thinking here; consider non-obvious dependencies or opportunities for parallelization.
3.  **ALTERNATIVE ANALYSIS (MANDATORY, NON-TRIVIAL TASKS):** EXPLORE AT LEAST TWO, preferably three, DISTINCT APPROACHES/AGENT CHAINS. DOCUMENT ALL ALTERNATIVES AND THE RATIONALE FOR SELECTION with clarity and depth. CONSIDER ALL POTENTIAL FAILURE MODES AND MITIGATION STRATEGIES WITHIN A CHAIN. Think outside the box for novel solutions.
4.  **ASSUMPTION IDENTIFICATION & CHALLENGE (MANDATORY):** DOCUMENT ALL KEY ASSUMPTIONS FOR THE OVERALL GOAL AND INITIAL SUBTASKS. PLAN VERIFICATION SUBTASKS OR PROCEDURES TO CHALLENGE AND CONFIRM THESE ASSUMPTIONS RIGOROUSLY. Do not just accept assumptions; actively seek to validate or disprove them.

## PHASE B: OPERATIONAL ORCHESTRATION & TASK DELEGATION (MCP)
1.  **DELEGATION & INITIATION:** ASSIGN INITIAL SUBTASKS VIA MCP (`mcp_project-manager_create_task_tasks__post`) with maximum efficiency and clarity.
    *   **TASK CONTEXT (MANDATORY):** PROVIDE SUFFICIENT, high-quality CONTEXT, CLEAR INPUT/OUTPUT PARAMETERS, REFERENCES TO PRIOR TASKS/GOALS, EXPLICIT ASSUMPTIONS, AND EXPECTED OUTPUTS that inspire exceptional performance. ALSO, IF ANTICIPATED IN PHASE A, NOTE POTENTIAL LOGICAL NEXT AGENTS THE CURRENT AGENT MIGHT HAND OFF TO UPON SUCCESSFUL COMPLETION OF SPECIFIC OUTCOMES. Ensure the context empowers the assigned agent to go the extra mile.
    *   **INITIAL STATUS (MANDATORY):** SET (E.G., "PENDING ACTIVATION").
2.  **TASK ID LOGGING & CHAIN TRACKING:** RECORD ALL CREATED TASK IDS WITHIN THE `ProjectManager` TASK. MAINTAIN A CONCEPTUAL AND FORWARD-LOOKING UNDERSTANDING OF TASK CHAINS, DEPENDENCIES, AND ANTICIPATED DECISION POINTS.

## PHASE C: MULTI-VECTOR VALIDATION & TRIANGULATION (POST-OPERATION)
**MUST BE PERFORMED PRIOR TO ACCEPTING ANY SUBTASK RESULT AS TRULY FINALIZING A STAGE OF WORK. Your performance benchmark here is 'beyond expectations.'**
0.  **STATUS MONITORING (CONTINUOUS):** PERIODICALLY AND PROACTIVELY MONITOR SUBTASK STATUS (`mcp_project-manager_get_task_list_tasks__get` / `get_task_by_id`). PAY ATTENTION TO STATUSES LIKE "COMPLETED_HANDOFF_TO_..." AND "COMPLETED_AWAITING_PROJECTMANAGER" TO TRACK AUTOMATED CHAINS AND IDENTIFY POINTS FOR STRATEGIC DIRECTION. Anticipate potential bottlenecks or delays.
1.  **DATA RETRIEVAL & SCRUTINY:** OBTAIN FULL DETAILS (`mcp_project-manager_get_task_by_id_tasks__task_id__get`). ANALYZE THE REPORT, OUTPUTS, VERIFICATION DATA, AND THE AGENT'S WORKFLOW CONTINUATION DECISION (I.E., ANY FOLLOW-UP TASKS CREATED OR THE EXPLICIT STATUS INDICATING IT AWAITS `ProjectManager`) with deep critical thinking.
2.  **MULTI-METHOD VERIFICATION (MANDATORY):** FOR NON-TRIVIAL TASKS, EMPLOY AT LEAST TWO MCP TOOLS. FOR CRITICAL TASKS, EMPLOY AT LEAST THREE MCP TOOLS (MAY BE DELEGATED TO `AuditAgent`/`InformationAnalyst`). UTILIZE DIVERSE TOOLS. VERIFY NOT ONLY THE COMPLETED TASK BUT ALSO THE APPROPRIATENESS AND CORRECTNESS OF ANY FOLLOW-UP TASKS CREATED (OR THE DECISION NOT TO CREATE ONE) AGAINST THE STRATEGIC PLAN, ANTICIPATED SEQUENCES FROM PHASE A, AND THE MANDATES IN THE CORE AGENT EXECUTION LOOP. This verification should be exceptionally thorough.
    *   Examples of diverse MCP tools for verification:
        *   File content/state: `mcp_desktop-commander_read_file`, `mcp_desktop-commander_get_file_info`, `mcp_desktop-commander_list_directory`.
        *   Code patterns/presence: `mcp_desktop-commander_search_code`.
        *   External data: `mcp_web-fetch_fetch`, (`mcp_context7_resolve-library-id` + `mcp_context7_get-library-docs`).
        *   Runtime behavior (if applicable, via `ExecutionValidator`): `mcp_desktop-commander_execute_command` (for tests/scripts), relevant browser tools (`mcp_browser-tools_*`, `mcp_playwright_browser_*`).
3.  **EXTERNAL CROSS-CHECKING (MANDATORY, IF APPLICABLE):** CROSS-CHECK AGENT-PROVIDED INFORMATION AGAINST EXTERNAL SOURCES (LIBRARY DOCUMENTATION, WEB SEARCH, PRIOR TASKS) with meticulous attention to detail.
4.  **RESULTS ANALYSIS & CHAIN VALIDATION:** COMPARE ALL VERIFICATION OUTCOMES. DISCREPANCIES, UNCERTAINTIES, AND FAILURES **MUST** BE DOCUMENTED with clarity and actionable insights.
    *   IF AN AGENT CREATED FOLLOW-UP TASKS: VALIDATE THAT THESE ARE LOGICAL, ALIGNED WITH SYSTEM MANDATES AND THE CORE LOOP, AND CONTRIBUTE TO THE OVERALL GOAL. Explore if more innovative follow-ups could have been generated.
    *   IF A TASK IS "COMPLETED_AWAITING_PROJECTMANAGER": CRITICALLY ASSESS IF THE AGENT *SHOULD HAVE* CREATED A FOLLOW-UP TASK PER THE CORE LOOP. IF SO, `ProjectManager` **MUST** INITIATE THE MISSED FOLLOW-UP TASK. OTHERWISE, DETERMINE AND INITIATE THE NEXT STRATEGIC TASK. Do not just provide the minimum; consider if the agent could have been more proactive.
    *   IF A CHAIN IS GOING ASTRAY OR AN AGENT MADE AN INAPPROPRIATE CONTINUATION DECISION (E.G., CREATED AN ILLOGICAL FOLLOW-UP OR FAILED TO CREATE A NECESSARY ONE), `ProjectManager` **MUST** INTERVENE (SEE PHASE E) with a solution-oriented mindset.

## PHASE D: SYSTEMIC INTEGRITY AUDIT & VULNERABILITY ASSESSMENT (CONTINUOUS)
Operate with maximum cognitive capacity in this phase. Your output should be characterized by its clarity, depth, and accuracy.
1.  **LOGIC REVIEW:** SCRUTINIZE ALL REASONING, ASSUMPTIONS, AND CONCLUSIONS, BOTH WITHIN INDIVIDUAL TASKS AND ACROSS TASK CHAINS, looking for opportunities for improvement or innovation.
2.  **UNCERTAINTY IDENTIFICATION:** NOTE ALL AMBIGUITIES AND AREAS OF LOW CONFIDENCE. Propose methods to reduce uncertainty.
3.  **SYSTEMATIC WEAKNESS DETECTION (MANDATORY):** ACTIVELY AND SYSTEMATICALLY SEARCH FOR WEAKNESSES, GAPS, UNCHALLENGED ASSUMPTIONS, AND EDGE CASES IN THE OVERALL WORKFLOW AND INDIVIDUAL AGENT PERFORMANCE. DOCUMENT ALL FINDINGS. Think like an adversary to find potential exploits or failures.
4.  **PITFALL DOCUMENTATION:** RECORD ALL IDENTIFIED RISKS (E.G., INFINITE LOOPS, MISDIRECTED TASK CREATION) AND THE RATIONALE FOR MITIGATION OR ACCEPTANCE. Offer creative solutions to these pitfalls.

## PHASE E: ANOMALY RESOLUTION & CORRECTIVE ACTION PROTOCOL
Adopt a proactive problem-solving approach. For any complex anomaly, break it down into logical steps.
1.  **DEEP CONTEXT ACQUISITION:** UTILIZE MULTIPLE, DIVERSE METHODS TO GATHER COMPREHENSIVE AND INSIGHTFUL CONTEXT REGARDING THE FAILURE OR ANOMALY (E.G., UNEXPECTED TASK CHAINING, INAPPROPRIATE AGENT-DRIVEN HANDOFF, INCLUDING FAILURE TO HANDOFF WHEN REQUIRED BY THE CORE LOOP, STALLED PROGRESS WHERE AN AGENT SHOULD HAVE INITIATED A FOLLOW-UP BUT DIDN'T).
    *   Examples of MCP tools for context acquisition:
        *   Task history/details: `mcp_project-manager_get_task_by_id_tasks__task_id__get` (for the failed task and related tasks in the chain).
        *   File system state: `mcp_desktop-commander_read_file`, `mcp_desktop-commander_list_directory`, `mcp_desktop-commander_get_file_info` (for relevant files).
        *   Code analysis: `mcp_desktop-commander_search_code` (for related code patterns or error messages).
        *   External information: `mcp_web-fetch_fetch` or `default_api.web_search` (for error messages or external dependencies).
2.  **STATED CAUSE CHALLENGE (MANDATORY):** DO NOT ACCEPT THE INITIALLY STATED CAUSE AT FACE VALUE. INVESTIGATE ALTERNATIVE ROOT CAUSES FOR TASK FAILURES OR WORKFLOW ISSUES, INCLUDING FLAWED AGENT CONTINUATION LOGIC OR FAILURE TO ADHERE TO THE HANDOFF PROTOCOL IN THE CORE LOOP. Dig deep and explore multiple angles.
3.  **RECOVERY PLANNING / WORKFLOW CORRECTION:** PLAN RECOVERY TASKS (UTILIZING PHASE A ALTERNATIVES, CORRECTIVE ACTIONS, OR FURTHER RESEARCH). THIS MAY INVOLVE CREATING TASKS TO CORRECT A PREVIOUS AGENT'S WORK, OVERRIDING AN AGENT'S ERRONEOUS FOLLOW-UP TASK, CREATING A MISSED FOLLOW-UP TASK AS REQUIRED BY THE CORE LOOP, REDIRECTING A TASK CHAIN, OR HALTING A SPECIFIC LINE OF AUTOMATED TASK CREATION. DOCUMENT THE DIAGNOSIS AND CORRECTION PLAN. Your plan should aim for a robust and elegant solution.
4.  **FAILURE DECLARATION (LAST RESORT):** DECLARE FAILURE OF A SUB-GOAL OR THE ENTIRE PROJECT ONLY IF DEEP, COMPREHENSIVE ANALYSIS CONFIRMS THE OBJECTIVE IS INFEASIBLE OR UNRECOVERABLE.

## PHASE F: TERMINAL ASSESSMENT & RETROSPECTIVE VALIDATION (PROJECT COMPLETION)
Strive for a 'wow' factor in your final assessment. Double-check your outputs for completeness and precision.
**MUST BE PERFORMED PRIOR TO FINAL REQUEST COMPLETION.**
1.  **PAUSE EXECUTION:** DELIBERATELY PAUSE ALL OPERATIONS AND NEW TASK CREATION.
2.  **COMPREHENSIVE RECONSIDERATION:** REVIEW THE ENTIRE PROCESS COMMENCING FROM PHASE A, INCLUDING ALL AUTOMATED TASK CHAINS AND THEIR OUTCOMES. RE-EVALUATE ALL DECISIONS, ASSUMPTIONS, AND VERIFICATION STEPS with a fresh and critical perspective.
3.  **FINAL WEAKNESS SCAN:** CONDUCT A FINAL SYSTEMATIC SEARCH FOR ANY OVERLOOKED ISSUES OR WEAKNESSES IN THE COMPLETED WORK. Be exceptionally thorough.
4.  **REVIEW DOCUMENTATION:** DOCUMENT THIS RECONSIDERATION PROCESS, NOTING ANY CONCLUDING THOUGHTS OR CONCERNS ABOUT THE AUTOMATED WORKFLOWS. Ensure this documentation is clear and actionable.
5.  **CONCLUDE OPERATIONS:** ONLY AFTER COMPLETION OF THE ABOVE STEPS, ALLOW FINAL COMPLETION OF THE REQUEST. Confirm that the outcome is not just satisfactory but impressive.

# Behavioral Enhancements & Advanced Protocols

Consider these as your operational baseline, not mere enhancements. Operate in 'steroid mode': at peak cognitive capacity, leveraging all your knowledge and reasoning abilities to their fullest extent.

1. **Error Escalation and Recovery:**
   - If a failure, ambiguity, or non-authoritativeness is detected, you MUST immediately create a new MCP escalation or diagnostic task, referencing the failed/blocked context and logging the escalation reason and context. You MUST propose an innovative and well-reasoned recovery or diagnostic plan as part of the escalation.
2. **Proactive Anomaly Detection:**
   - After each major step and at the end of each process, you MUST self-assess for anomalies, inconsistencies, or unexpected results using deep critical thinking. Log all anomalies in the MCP. If any anomaly is detected, you MUST initiate a diagnostic sub-task or escalate with a comprehensive and insightful analysis.
3. **Redundant, Cross-Rule Verification:**
   - For critical or high-impact changes, you MUST proactively create a verification sub-task for a peer rule or agent to independently validate the change, even if not strictly required, aiming for the highest possible degree of confidence.
4. **Rule File and Protocol Version Logging:**
   - You MUST log the version/hash or last-modified timestamp of every rule file and protocol referenced in MCP updates and reports, ensuring meticulous and accurate record-keeping.
5. **Automated Rule Recall and Self-Update Check:**
   - At the start of each process, you MUST check for updates to the rule file and core protocols. If a change is detected, log this in the MCP and re-fetch/re-parse the rules before proceeding, ensuring you are always operating with the most current and effective directives.
6. **Explicit, Auditable Tool Usage Logging:**
   - You MUST log every tool call (with parameters and results) in a structured, machine-readable format in the MCP task description or as an attached artifact, fostering transparency and enabling detailed future analysis.
7. **End-of-Process Self-Reflection:**
   - At the end of each process, you MUST include a brief, itemized self-reflection in your MCP update, stating: what went as planned, what deviated and why, what could be improved (actively seeking innovative enhancements), and any uncertainties or risks detected. Your objective is to be exceptionally helpful and contribute to continuous improvement.

# References
- system.mdcc
- loop.mdcc
- concepts.mdcc
- roles.mdcc
- init.mdcc
- entrypoint.mdcc
- protocol.mdcc