---
# Rule Definition Metadata (V1)
ruleId: wiki-handling
ruleType: Procedure
title: Knowledge Wiki Handling Protocol
--- 
description: Defines the structure, content, and interaction protocols for the Knowledge Wiki, the central state and context store for each request.
schemaVersion: 1
conformsTo: null
tags: [core, framework, procedure, state, context, wiki]
lastUpdated: null
status: Active
---

# üß† Knowledge Wiki Handling Protocol

## 1. PURPOSE & OBJECTIVES

This document specifies the mandatory procedures for interacting with the Knowledge Wiki file located in the `wiki/` directory. The Wiki serves as the **single source of truth** for context, goals, history, findings, actions, and errors within a specific `requestId`. Correct handling is essential for maintaining state and enabling effective agent coordination.

## 2. CORE BEHAVIOR

*   **Location:** Wiki files MUST reside in the `wiki/` directory.
*   **Centrality:** The Wiki is the *only* approved mechanism for persisting state and detailed context between agent turns.
*   **Append-Only:** Agents MUST only append information. Modifying or deleting existing entries is FORBIDDEN to preserve history.
*   **Mandatory Interaction:** Agents MUST read the Wiki at the start of their turn and MUST append relevant updates before concluding their turn (as defined in the [Core Execution Loop](mdc:execution-loop.md)).

## 3. NAMING CONVENTION (MANDATORY)

*   FORMAT: `wiki/<requestId>-<description>.md`
    *   `<requestId>`: The unique ID for the workflow (e.g., `req-123`).
    *   `<description>`: A brief, hyphenated description of the request's purpose (e.g., `woocommerce-audit`, `header-refactor`).
*   EXAMPLE: `wiki/req-384-woocommerce-audit.md`
*   UNIQUENESS: Ensure the combination is unique for each request. `Overmind` typically establishes this filename when initializing the request.

## 4. WIKI STRUCTURE & SECTIONS (MANDATORY HEADERS)

The Wiki file MUST use the following Level 2 Markdown headers. Agents append timestamped list items under the relevant section.

```markdown
# Knowledge Wiki: <requestId> - <Description>

## 1. üéØ Overall Goal & Request Context
# [...]
## 2. üìú Session History & Key Decisions
# [...]
## 3. üìö Research & Findings
# [...]
## 4. üõ†Ô∏è Actions & Code Changes
# [...]
## 5. ‚ùì Open Questions & Blockers
# [...]
## 6. üí° Improvement Suggestions
# [...]
## 7. ‚ö†Ô∏è Errors & Escalations
# [...]
## 8. ‚úÖ Final Output & Verification
# [...]
```
*Internal Note: Structure ensures semantic grouping for easier parsing.*

## 5. INTERACTION PROTOCOL (MANDATORY)

1.  **Read Phase (Agent Turn Start - Execution Loop Step 2):**
    *   Agent MUST read the **entire** content of the relevant `wiki/<requestId>-<description>.md` file.
    *   Tool: `read_file` (or potentially `analyze_wiki.py` via `run_terminal_cmd`).
    *   Purpose: To load all necessary context, history, previous findings, goals, and errors.

2.  **Append Phase (Agent Turn End - Execution Loop Step 6):**
    *   Agent MUST append its findings, actions, errors, or relevant outputs as a new entry under the appropriate section(s).
    *   Tool: `edit_file`.
    *   FORMAT: Use Markdown. Start with a timestamped agent identifier (e.g., `*   **[ISO 8601 Timestamp] BuilderAgent:** [Summary of action/finding]`).
    *   LOCATION: Append to the correct file in the `wiki/` directory (e.g., `wiki/req-384-woocommerce-audit.md`).
    *   ATOMICITY: Each agent appends its own entry; editing previous entries is forbidden (except potentially by `Overmind` or specialized correction agents under strict conditions).
    *   **CRITICAL:** The `edit_file` call MUST include sufficient context (e.g., the target section heading) to ensure the append operation occurs correctly. Example instruction: "Append the following list item under the '## üìö Research & Findings' heading in `wiki/req-384-woocommerce-audit.md`: *   **[2023-10-27T10:00:00Z] ResearchAgent:** Found relevant API doc at [URL]."

## 6. ERROR HANDLING (Related to Wiki Interaction)

*   **Read Failure:** If the Wiki file (`wiki/<requestId>-<description>.md`) cannot be read at the start of a turn (Step 2), the agent MUST immediately trigger the HALT procedure defined in the [Core Execution Loop](mdc:execution-loop.md).
*   **Append Failure:** If `edit_file` fails to append to the Wiki (Step 6), the agent should attempt `reapply` once. If it still fails, the agent MUST trigger the HALT procedure.

## 7. CONSTRAINTS

*   MUST use the specified Markdown structure and headers.
*   MUST use the append-only approach.
*   MUST correctly timestamp and attribute entries.
*   MUST handle read/write errors gracefully via escalation.
*   MUST store wiki files in the `wiki/` directory.

## 8. REFERENCES

*   [Core Execution Loop](mdc:execution-loop.md) (Steps 2 & 6 reference Wiki I/O)
*   [Shared Core Concepts & Rules](mdc:shared-core.md) (Defines `requestId`)
*   [System Prompt](mdc:system-prompt.md) (Overall framework context)
*   `tools/analyze_wiki.py` (Optional helper script)
*   [Core Execution Loop](mdc:execution-loop.md)
*   [`global-mandates.md`](./global-mandates.md)
*   [Shared Core Concepts & Rules](mdc:shared-core.md)

## 9. REFERENCES

*   [Core Execution Loop](mdc:execution-loop.md) (Steps 2 & 6 reference Wiki I/O)
*   [Shared Core Concepts & Rules](mdc:shared-core.md) (Defines `requestId`)
*   [System Prompt](mdc:system-prompt.md) (Overall framework context)
*   `tools/analyze_wiki.py` (Optional helper script)
*   MUST handle read/write errors gracefully via escalation.

## üìú Request Overview
# REQUIRED: Initial setup by Overmind. Contains fundamental request details.
# Static info, typically not appended to after creation.
*   **Request ID:** `<requestId>`
*   **Initial Goal:** [Description from Overmind/User]
*   **Project Name:** `<projectName>`
*   **Domain:** `<domain>`
*   **Status:** [In Progress | Error | Completed] # Updated by Overmind as needed

## üìå Milestones & MCP Tasks (Optional)
# For tracking major steps or associated MCP tasks. Updated as needed.
*   [ ] Task 1: [Title]
*   [X] Task 2: [Title] (Agent: BuilderAgent, Status: Done, Timestamp: ...)

## üó∫Ô∏è Plan & Strategy (Append Only)
# Primarily for Overmind to log high-level plans, adjustments, or strategic decisions.
*   **[Timestamp] Overmind:** Initial plan: Research -> Build -> Audit.
*   **[Timestamp] Overmind:** Adjusted plan: Add Refactor step after Audit findings.

## üìö Research & Findings (Append Only)
# For ResearchAgent, AuditAgent, or any agent discovering information relevant to the task.
*   **[Timestamp] ResearchAgent:** Found API documentation at [URL]. Key function: `xyz()`.
*   **[Timestamp] AuditAgent:** Linting identified 3 minor issues in `file.js`.

## üõ†Ô∏è Actions & Code Changes (Append Only)
# For BuilderAgent, RefactorAgent, DocsAgent, etc., logging concrete actions taken, especially code modifications. Include diff summaries or references if possible.
*   **[Timestamp] BuilderAgent:** Applied fix for bug #123 in `file.js`. Local tests passed.
*   **[Timestamp] StylingAgent:** Updated CSS variables in `styles.css`.

## ü§î Observations & Ambiguities (Append Only)
# For any agent to note uncertainties, potential issues, or points needing clarification discovered during execution.
*   **[Timestamp] BuilderAgent:** Ambiguity in requirement spec regarding edge case X. Needs clarification.
*   **[Timestamp] ResearchAgent:** Could not find docs for legacy component Y. Proceeding with best guess.

## ‚ö†Ô∏è Errors & Escalations (Append Only)
# For logging tool failures, verification failures, or any unrecoverable error state encountered by an agent. Triggers escalation to Overmind.
*   **[Timestamp] BuilderAgent:** **ERROR:** Build failed due to dependency conflict [Details]. Escalating.
*   **[Timestamp] RunnerAgent:** **ERROR:** Application failed to start. See logs [ref]. Escalating.

## üí° Improvement Suggestions (Append Only)
# Primarily for ImprovementAgent, but any agent can log suggestions for process or rule improvements based on observations.
*   **[Timestamp] AuditAgent:** Suggest adding lint rule for checking X based on recurring pattern.
*   **[Timestamp] ImprovementAgent:** Propose clarifying `BuilderAgent` rule regarding test verification.

## üë§ User Input Summary (Append Only)
# For logging summaries of information received from the user, especially diagnostic data requested via the Step 5 Exception.
*   **[Timestamp] BuilderAgent:** User provided diagnostic HAR file [Link/Reference] as requested.
*   **[Timestamp] Overmind:** User confirmed clarification for feature Y.

---
*Internal Note: Structure ensures semantic grouping for easier parsing.*
```

## 5. LOCATION & NAMING CONVENTION

*   **Path:** Project Root (`/`) unless specified otherwise by project rules.
*   **Naming:** MUST follow the pattern `<requestId>-wiki.md`.

## 6. ERROR HANDLING (Related to Wiki Interaction)

*   **Read Failure:** If the Wiki file cannot be read at the start of a turn (Step 2), the agent MUST immediately trigger the HALT procedure defined in the [Core Execution Loop](mdc:execution-loop.md).
*   **Append Failure:** If `edit_file` fails to append to the Wiki (Step 6), the agent should attempt `reapply` once. If it still fails, the agent MUST trigger the HALT procedure.

## 7. CONSTRAINTS

*   MUST use the specified Markdown structure and headers.
*   MUST use the append-only approach.
*   MUST correctly timestamp and attribute entries.
*   MUST handle read/write errors gracefully via escalation.

## 8. REFERENCES

*   [Core Execution Loop](mdc:execution-loop.md)
*   [`global-mandates.md`](./global-mandates.md)
*   [Shared Core Concepts & Rules](mdc:shared-core.md)

## 9. REFERENCES

*   [Core Execution Loop](mdc:execution-loop.md) (Steps 2 & 6 reference Wiki I/O)
*   [Shared Core Concepts & Rules](mdc:shared-core.md) (Defines `requestId`)
*   [System Prompt](mdc:system-prompt.md) (Overall framework context)
*   `tools/analyze_wiki.py` (Optional helper script)
*   MUST handle read/write errors gracefully via escalation.

## 8. REFERENCES

*   [Core Execution Loop](mdc:execution-loop.md)
*   [`global-mandates.md`](./global-mandates.md)
*   [Shared Core Concepts & Rules](mdc:shared-core.md)