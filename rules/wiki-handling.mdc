---
# Rule Definition Metadata (V1)
ruleId: wiki-handling
ruleType: Procedure
title: Knowledge Wiki Handling Protocol
description: Defines the structure, content, and interaction protocols for the Knowledge Wiki, the central state and context store for each request.
schemaVersion: 1
conformsTo: null
tags: [core, framework, procedure, state, context, wiki]
lastUpdated: null
status: Active
---

# üß† Knowledge Wiki Handling Protocol

## 1. PURPOSE & OBJECTIVES

This document specifies the mandatory procedures for interacting with the Knowledge Wiki file (`<requestId>-wiki.md`). The Wiki serves as the **single source of truth** for context, goals, history, findings, actions, and errors within a specific `requestId`. Correct handling is essential for maintaining state and enabling effective agent coordination.

## 2. CORE BEHAVIOR

*   **Centrality:** The Wiki is the *only* approved mechanism for persisting state and detailed context between agent turns.
*   **Append-Only:** Agents MUST only append information. Modifying or deleting existing entries is FORBIDDEN to preserve history.
*   **Mandatory Interaction:** Agents MUST read the Wiki at the start of their turn and MUST append relevant updates before concluding their turn (as defined in the [Core Execution Loop](mdc:execution-loop.md)).

## 2. LOCATION & NAMING

- **Path:** `/wiki/` (Project Root subdirectory).
- **Naming:** `<requestId>-wiki.md` (e.g., `req_12345abc-wiki.md`). Using Markdown format for better readability and potential structuring.
- Each request **MUST** have its own dedicated wiki file within the `/wiki/` directory.

## 3. ACTION SEQUENCE / PROCEDURES

### 3.1. Initialization (Responsibility: Overmind or Initial Trigger)
*   A new Wiki file MUST be created at the start of a request.
*   Initial content MUST include the `## üìú Request Overview` section populated with `requestId`, initial goal, project details, and status.

### 3.2. Reading the Wiki (Agent Turn: Step 2)
*   **Action:** Read and parse the Wiki file.
*   **Tooling:** `read_file` (potentially `analyze_wiki.py` via `run_terminal_cmd` for large files).
*   **Process:** Agents should prioritize parsing sections relevant to their current task (e.g., `Request Overview`, latest entries in `Findings`, `Actions`, `Errors`, `Plan & Strategy`). Avoid reading the entire file unnecessarily if it becomes very large.

### 3.3. Appending to the Wiki (Agent Turn: Step 6)
*   **Action:** Append consolidated findings, action summaries, results, or errors from the agent's turn.
*   **Tooling:** `edit_file`.
*   **Process:**
    1.  Format the information as a Markdown list item.
    2.  Prefix the item with `*   **[Timestamp] <AgentRole>:** ` (Use ISO 8601 Z for timestamp).
    3.  Use `edit_file` with specific instructions to append the formatted list item under the *most appropriate* section header (e.g., `## üìö Research & Findings`, `## üõ†Ô∏è Actions & Code Changes`, `## ‚ö†Ô∏è Errors & Escalations`).
    4.  **CRITICAL:** The `edit_file` call MUST include sufficient context (e.g., the target section heading) to ensure the append operation occurs correctly. Example instruction: "Append the following list item under the '## üìö Research & Findings' heading: *   **[2023-10-27T10:00:00Z] ResearchAgent:** Found relevant API doc at [URL]."
*   **Verification:** Ensure the entry is correctly formatted and appended under the intended section.

## 4. WIKI STRUCTURE & SECTIONS (MANDATORY HEADERS)

The Wiki file MUST use the following Level 2 Markdown headers. Agents append timestamped list items under the relevant section.

```markdown
# Knowledge Wiki: <requestId>

## üìú Request Overview
# REQUIRED: Initial setup by Overmind. Contains fundamental request details.
# Static info, typically not appended to after creation.
*   **Request ID:** `<requestId>`
*   **Initial Goal:** [Description from Overmind/User]
*   **Project Name:** `<projectName>`
*   **Domain:** `<domain>`
*   **Status:** [In Progress | Error | Completed] # Updated by Overmind as needed

## üìå Milestones & MCP Tasks (Optional)
# For tracking major steps or associated MCP tasks. Updated as needed.
*   [ ] Task 1: [Title]
*   [X] Task 2: [Title] (Agent: BuilderAgent, Status: Done, Timestamp: ...)

## üó∫Ô∏è Plan & Strategy (Append Only)
# Primarily for Overmind to log high-level plans, adjustments, or strategic decisions.
*   **[Timestamp] Overmind:** Initial plan: Research -> Build -> Audit.
*   **[Timestamp] Overmind:** Adjusted plan: Add Refactor step after Audit findings.

## üìö Research & Findings (Append Only)
# For ResearchAgent, AuditAgent, or any agent discovering information relevant to the task.
*   **[Timestamp] ResearchAgent:** Found API documentation at [URL]. Key function: `xyz()`.
*   **[Timestamp] AuditAgent:** Linting identified 3 minor issues in `file.js`.

## üõ†Ô∏è Actions & Code Changes (Append Only)
# For BuilderAgent, RefactorAgent, DocsAgent, etc., logging concrete actions taken, especially code modifications. Include diff summaries or references if possible.
*   **[Timestamp] BuilderAgent:** Applied fix for bug #123 in `file.js`. Local tests passed.
*   **[Timestamp] StylingAgent:** Updated CSS variables in `styles.css`.

## ü§î Observations & Ambiguities (Append Only)
# For any agent to note uncertainties, potential issues, or points needing clarification discovered during execution.
*   **[Timestamp] BuilderAgent:** Ambiguity in requirement spec regarding edge case X. Needs clarification.
*   **[Timestamp] ResearchAgent:** Could not find docs for legacy component Y. Proceeding with best guess.

## ‚ö†Ô∏è Errors & Escalations (Append Only)
# For logging tool failures, verification failures, or any unrecoverable error state encountered by an agent. Triggers escalation to Overmind.
*   **[Timestamp] BuilderAgent:** **ERROR:** Build failed due to dependency conflict [Details]. Escalating.
*   **[Timestamp] RunnerAgent:** **ERROR:** Application failed to start. See logs [ref]. Escalating.

## üí° Improvement Suggestions (Append Only)
# Primarily for ImprovementAgent, but any agent can log suggestions for process or rule improvements based on observations.
*   **[Timestamp] AuditAgent:** Suggest adding lint rule for checking X based on recurring pattern.
*   **[Timestamp] ImprovementAgent:** Propose clarifying `BuilderAgent` rule regarding test verification.

## üë§ User Input Summary (Append Only)
# For logging summaries of information received from the user, especially diagnostic data requested via the Step 5 Exception.
*   **[Timestamp] BuilderAgent:** User provided diagnostic HAR file [Link/Reference] as requested.
*   **[Timestamp] Overmind:** User confirmed clarification for feature Y.

## üìù Task Decomposition Logs (Optional Section)
# For logging task decomposition. Recommend logging when decomposition occurs (linking parent/sub-tasks), when sub-tasks are delegated, when all sub-tasks are done, and when finalization begins. Emphasize linking IDs.
*   **[Timestamp] BuilderAgent (TaskId: task_complex):** Decomposed TaskId 'task_complex' into sub-tasks [task_complex_sub1, task_complex_sub2] via `mcp_taskmanager_add_tasks_to_request`.
*   **[Timestamp] Overmind:** Delegating sub-task 'task_complex_sub1' (Parent: 'task_complex') to ResearchAgent.
*   **[Timestamp] ResearchAgent (TaskId: task_complex_sub1):** Research for sub-task complete. Findings added to ## üîç Research & Findings.
*   **[Timestamp] Overmind:** Delegating sub-task 'task_complex_sub2' (Parent: 'task_complex') to BuilderAgent.
*   **[Timestamp] BuilderAgent (TaskId: task_complex_sub2):** Implementation for sub-task complete. Changes added to ## üõ†Ô∏è Actions & Code Changes.
*   **[Timestamp] Overmind:** All sub-tasks for parent 'task_complex' ([task_complex_sub1, task_complex_sub2]) are now complete. Triggering original agent (BuilderAgent) to finalize.
*   **[Timestamp] BuilderAgent (TaskId: task_complex):** Starting finalization for parent TaskId 'task_complex' based on completed sub-tasks.

## ‚õìÔ∏è Delegation & Sub-Task Flow (Recommended)
# A dedicated section to explicitly track the delegation chain: which agent decomposed, which sub-tasks were created, who they were delegated to, when results were returned, and when finalization was attempted/completed. This provides a clear timeline of the nested execution.
*   **[Timestamp] BuilderAgent (TaskId: task_id_2):** Decomposing task. Created sub-tasks [sub_A, sub_B, sub_C]. Delegating sub_A to ResearchAgent.
*   **[Timestamp] ResearchAgent (TaskId: sub_A, Parent: task_id_2):** Sub-task sub_A complete. Reporting results to BuilderAgent.
*   **[Timestamp] BuilderAgent (TaskId: task_id_2):** Received results for sub_A. Integrating. Delegating sub_B to self (BuilderAgent).
*   **[Timestamp] BuilderAgent (TaskId: sub_B, Parent: task_id_2):** Sub-task sub_B complete. Reporting results to self (BuilderAgent).
*   **[Timestamp] BuilderAgent (TaskId: task_id_2):** Received results for sub_B. Integrating. Delegating sub_C to self (BuilderAgent).
*   **[Timestamp] BuilderAgent (TaskId: task_id_2):** Received HALT trigger regarding sub_C failure from Overmind. Aborting finalization.

---
*Internal Note: Structure ensures semantic grouping for easier parsing.*
```

## 5. LOCATION & NAMING CONVENTION

- **Path:** Project Root subdirectory (`/wiki/`).
- **Naming:** MUST follow the pattern `<requestId>-wiki.md`.

## 6. ERROR HANDLING (Related to Wiki Interaction)

*   **Read Failure:** If the Wiki file cannot be read at the start of a turn (Step 2), the agent MUST immediately trigger the HALT procedure defined in the [Core Execution Loop](mdc:execution-loop.md).
*   **Append Failure:** If `edit_file` fails to append to the Wiki (Step 6), the agent should attempt `reapply` once. If it still fails, the agent MUST trigger the HALT procedure.

## 7. CONSTRAINTS

*   MUST use the specified Markdown structure and headers.
*   MUST use the append-only approach.
*   MUST correctly timestamp and attribute entries.
*   MUST handle read/write errors gracefully via escalation.

## 8. REFERENCES

*   [Core Execution Loop](mdc:execution-loop.md)
*   [`global-mandates.md`](./global-mandates.md)
*   [Shared Core Concepts & Rules](mdc:shared-core.md)

### 6.4. Agent Responsibility

*   Agents MUST read relevant sections of the Wiki at the start of their turn (Step 2).
*   Agents MUST update the Wiki appropriately at the end of their turn (Step 6).
*   **Agents updating the Wiki (Step 6) should strive to include concise summaries or key data points under `## Research & Findings` or a dedicated `## Current State Summary` section that could benefit subsequent agents, reducing their need for redundant analysis/reading.**
*   Agents MUST NOT store critical state outside the Wiki.