---
# Rule Definition Metadata (V1)
ruleId: wiki-handling
ruleType: Core
title: Knowledge Wiki Handling Protocol
description: Defines the structure, content, and interaction protocols for the Knowledge Wiki, the central state and context store, including taskId logging.
schemaVersion: 1
conformsTo: null
tags: [core, framework, rules, mandatory, wiki, state, context, mcp-task-manager]
lastUpdated: null
status: Active
---

# üß† Knowledge Wiki Handling Protocol

## 1. PURPOSE & OBJECTIVES

This document specifies the mandatory procedures for interacting with the Knowledge Wiki file (`<requestId>-wiki.md`). The Wiki serves as the **single source of truth** for context, goals, history, findings, actions, and errors within a specific `requestId`. Correct handling, including logging `taskId` from MCP Task Manager, is essential.

## 2. CORE BEHAVIOR

*   **Centrality:** The Wiki is the *only* approved mechanism for persisting state and detailed context between agent turns.
*   **Append-Only:** Agents MUST only append information. Modifying or deleting existing entries is FORBIDDEN.
*   **Mandatory Interaction:** Agents MUST read the Wiki at the start of their turn and MUST append relevant updates before concluding their turn (as defined in the [Core Execution Loop](mdc:execution-loop.md)).

## 3. ACTION SEQUENCE / PROCEDURES

### 3.1. Initialization (Responsibility: Overmind)
*   A new Wiki file MUST be created at the start of a request.
*   Initial content MUST include `## üìú Request Overview` populated with `requestId`, initial goal, etc. `Overmind` SHOULD also add the planned MCP task structure under `## üìå Milestones & MCP Tasks` after calling `mcp_taskmanager_request_planning`.

### 3.2. Reading the Wiki (Agent Turn: Step 2)
*   **Action:** Read and parse the Wiki file.
*   **Tooling:** `read_file`.
*   **Process:** Prioritize relevant sections. Note the overall plan and context.

### 3.3. Appending to the Wiki (Agent Turn: Step 7)
*   **Action:** Append consolidated findings, action summaries, results, or errors.
*   **Tooling:** `edit_file`.
*   **Process:**
    1.  Format the information as a Markdown list item.
    2.  Prefix the item with `*   **[Timestamp] <AgentRole>:** `.
    3.  **MANDATORY (If Task-Driven):** Include the `taskId` associated with the turn's work. Example: `TaskId 'task_abc': ...`
    4.  **MANDATORY (If Task-Driven):** Explicitly state the MCP task completion status. Example: `... Task marked done.` or `... Task NOT marked done due to verification failure.`
    5.  Use `edit_file` to append the formatted list item under the *most appropriate* section header.
    6.  Ensure `edit_file` instruction provides sufficient context (target section header).
*   **Verification:** Ensure entry is correctly formatted, includes `taskId` and MCP status (if applicable), and is appended under the intended section.

## 4. WIKI STRUCTURE & SECTIONS (MANDATORY HEADERS)

The Wiki file MUST use the following Level 2 Markdown headers. Agents append timestamped list items, including `taskId` and MCP status where applicable.

```markdown
# Knowledge Wiki: <requestId>

## üìú Request Overview
*   **Request ID:** `<requestId>`
*   **Initial Goal:** [Description]
*   **Project Name:** `<projectName>`
*   **Status:** [Planning | In Progress | Awaiting Approval | Error | Completed] # Updated by Overmind

## üìå Milestones & MCP Tasks
# Initial structure planned by Overmind. Status MAY be updated manually or reflect MCP state.
*   **TaskId 'task_abc':** Research requirements (Agent: ResearchAgent, Status: Done)
*   **TaskId 'task_def':** Implement feature X (Agent: BuilderAgent, Status: In Progress)
*   **TaskId 'task_ghi':** Audit feature X (Agent: AuditAgent, Status: Pending)

## üó∫Ô∏è Plan & Strategy (Append Only)
*   **[Timestamp] Overmind:** Initial plan created in MCP. Delegating TaskId 'task_abc' to ResearchAgent.

## üìö Research & Findings (Append Only)
*   **[Timestamp] ResearchAgent:** TaskId 'task_abc': Found API documentation at [URL]. Task marked done.

## üõ†Ô∏è Actions & Code Changes (Append Only)
*   **[Timestamp] BuilderAgent:** TaskId 'task_def': Implemented feature X in `file.js`. Build: PASS, Lint: PASS, Tests: PASS. Task marked done.

## ü§î Observations & Ambiguities (Append Only)
*   **[Timestamp] BuilderAgent:** TaskId 'task_def': Ambiguity in requirement spec regarding edge case Y. Task NOT marked done. Escalating.

## ‚ö†Ô∏è Errors & Escalations (Append Only)
*   **[Timestamp] BuilderAgent:** **ERROR:** TaskId 'task_xyz': Build failed due to dependency conflict [Details]. Task NOT marked done. Escalating.

## üí° Improvement Suggestions (Append Only)
*   **[Timestamp] AuditAgent:** TaskId 'task_ghi': Suggest adding lint rule for checking X.

## üë§ User Input Summary (Append Only)
*   **[Timestamp] BuilderAgent:** TaskId 'task_def': User provided HAR file as requested.

---
*Internal Note: Structure ensures semantic grouping for easier parsing.*
```

## 5. LOCATION & NAMING CONVENTION

*   **Path:** Project Root (`/`).
*   **Naming:** MUST follow `<requestId>-wiki.md`.

## 6. ERROR HANDLING (Related to Wiki Interaction)

*   **Read Failure (Step 2):** HALT procedure.
*   **Append Failure (Step 7):** Attempt `reapply` once. If still fails, trigger HALT procedure.

## 7. CONSTRAINTS

*   MUST use specified structure and headers.
*   MUST use append-only approach.
*   MUST correctly timestamp, attribute, and include `taskId`/MCP status where applicable.
*   MUST handle read/write errors via escalation.

## 8. REFERENCES

*   [Core Execution Loop](mdc:execution-loop.md)
*   [`global-mandates.md`](./global-mandates.md)
*   [Agent Roles & Responsibilities](mdc:agent-roles.md)