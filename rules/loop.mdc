---
alwaysApply: true
description: Framework & Core Agent Execution Protocol
globs: []
ruleId: framework-loop-protocol
ruleType: Framework
---

# ‚öôÔ∏è FRAMEWORK & CORE AGENT EXECUTION PROTOCOL

**SPECIFIES:** 1. EXTERNAL AGENT EXECUTION FRAMEWORK. 2. MANDATORY CORE AGENT EXECUTION PROTOCOL.

## PART 1: AUTONOMOUS UNIT ORCHESTRATION FRAMEWORK (EXTERNAL)
**OBJECTIVE:** SYSTEM FOR ORCHESTRATING AGENT EXECUTION (MCP PREFERRED). **NOT AN AGENT.**
**RESPONSIBILITIES (MANDATORY):**
1.  **ACTIVATION/SEQUENCING:** ACTIVATE AGENTS (MCP/CHAT). LOAD RULES. PROVIDE CONTEXT (`taskId`/PAYLOAD). ENSURE SEQUENTIAL EXECUTION PER `requestId`.
2.  **CAPABILITY PROVISIONING:** PROVIDE AND EXECUTE AUTHORIZED CAPABILITIES.
3.  **RULE MANAGEMENT:** PROVIDE RULE FETCHING; MANAGE `.cursor/rules/`; ENFORCE HIERARCHY.
4.  **LIFECYCLE CONTROL:** INITIATE; MANAGE OPERATIONAL FLOW; DETECT HALT CONDITIONS.
5.  **ENVIRONMENT CONTROL:** PROVIDE RUNTIME; MANAGE RESOURCE ACCESS (AUTHORIZED CAPABILITIES ONLY).
**INTERACTION PROTOCOL:** ACTIVATION, CAPABILITY INTERFACE, TRANSITION DETECTION/MCP OPERATIONS. SEMANTIC UNDERSTANDING **MUST NOT** BE REQUIRED. PART 2 PROTOCOL **MUST** BE ENFORCED.

## PART 2: UNIVERSAL UNIT EXECUTION CYCLE (MANDATORY, MCP-CENTRIC)
**OBJECTIVE:** ADHERENCE TO THIS SEQUENCE IS MANDATORY EACH TURN. ENSURE CONSISTENCY, PREDICTABILITY, AND AUDITABILITY. MCP/CHAT **MUST** BE THE SINGLE SOURCE OF TRUTH.
**GOVERNING RULES (MANDATORY ADHERENCE):**
*   EXECUTE STEPS 1-6 SEQUENTIALLY. NO DEVIATION, UNLESS HALT IS INVOKED.
*   MCP TASK/CHAT PAYLOAD IS THE DEFINITIVE SOURCE FOR INSTRUCTIONS AND CONTEXT.
*   ACQUIRE FULL CONTEXT (STEP 2) *PRIOR* TO ANY SIGNIFICANT ACTION.
*   FETCH AND UTILIZE OWN ROLE-SPECIFIC RULES (STEP 3).
*   REPORTED RESULTS (STEP 6) **MUST** INCLUDE VERIFICATION DETAILS AND ASSUMPTIONS.

**ACTION SEQUENCE (MANDATORY STEPS):**

**STEP 1: ACTIVATE & ACQUIRE INITIAL CONTEXT**
*   **ACTIVATION:** FRAMEWORK INITIATES ACTIVATION.
*   **INPUT:** `taskId` (MCP) / TRIGGER PAYLOAD (CHAT).
*   **ACTION:** STORE `taskId` / PARSE PAYLOAD.

**STEP 2: ACQUIRE FULL TASK/OPERATIONAL CONTEXT & UPDATE STATUS**
*   **ACTION:** FETCH DETAILED INSTRUCTIONS/CONTEXT PER RELEVANT MANDATES.
*   **TOOLING (MCP):** `mcp_project-manager_get_task_by_id_tasks__task_id__get` (TASK DETAIL **MUST** INCLUDE `targetAgentRole` FROM `ProjectManager`. ABSENCE/AMBIGUITY INVOKES HALT).
    *   **SUPPORTED OPERATIONS FOR CONTEXT GATHERING (MCP Preferred for Automation):**
        *   File/Directory Info: `mcp_desktop-commander_read_file`, `mcp_desktop-commander_read_multiple_files`, `mcp_desktop-commander_list_directory`, `mcp_desktop-commander_get_file_info`.
        *   Code/File Search: `mcp_desktop-commander_search_code` (regex), `mcp_desktop-commander_search_files` (name pattern).
        *   Web Research: `mcp_web-fetch_fetch` (direct URL), `default_api.web_search` (general search).
        *   Library Documentation: `mcp_context7_resolve-library-id` followed by `mcp_context7_get-library-docs`.
*   **ACTION (CHAT):** UTILIZE PAYLOAD. SUPPLEMENT WITH READ-ONLY TOOLS AS REQUIRED.
*   **CRITICAL EVALUATION (BOTH):** CONTEXT **MUST** BE CRITICALLY EVALUATED. IDENTIFY ASSUMPTIONS, VERIFY FEASIBILITY.
*   **MCP STATUS UPDATE:** POST-CONTEXT/ANALYSIS, MCP TASK **MUST** BE UPDATED WITH STATUS (E.G., \'\'\'CONTEXT ACQUIRED\'\'\'), FINDINGS, AND TOOLS UTILIZED, PER RELEVANT MANDATES.

**STEP 3: FETCH ROLE SPECIFICATION & VALIDATE PERSONA**
*   **ACTION:** IDENTIFY `targetAgentRole` (FROM STEP 2). RETRIEVE ROLE SPECIFICATION FILE (`<RoleName>.mdcc`).
*   **VALIDATION:** 1. `targetAgentRole` PRESENCE AND CLARITY **MUST** BE VERIFIED. 2. IF MISSING/AMBIGUOUS: HALT. UPDATE MCP (ERROR). ESCALATE. 3. IF PRESENT: FETCH AGENT RULE. 4. IF UNFETCHABLE: HALT. UPDATE MCP (ERROR). ESCALATE.
*   **OUTCOME:** RULES FOR ASSIGNED PERSONA LOADED.

**STEP 4: PLAN TURN (INTERNAL)**
*   **ACTION:** PREPARE INTERNAL ACTION PLAN.
*   **INPUT:** RULES (STEP 3), CONTEXT (STEP 2).
*   **PROCESS:** CONSTRUCT INTERNAL REASONING/PROMPT. PLAN STEP 5 OPERATIONS, INCLUDING **MANDATORY VERIFICATION** AND **ASSUMPTION CHECKS**.

**STEP 5: EXECUTE CORE TASK(S), RIGOROUSLY VERIFY & UPDATE STATUS**
*   **ACTION:** PERFORM PRIMARY ROLE/TASK FUNCTIONS.
*   **PROCESS:** 
    1.  **MCP UPDATE (EXECUTION START):** STATUS \'\'\'EXECUTION IN PROGRESS\'\'\'. 
    2.  **EXECUTE:** IMPLEMENT PLAN (Refer to agent-specific rules and **MUST** adhere to tool mandates in [system.mdcc](mdc:.cursor/rules/system.mdcc), especially Mandate 3: Strategic Capability Selection).
    3.  **MCP UPDATE (VERIFICATION START):** STATUS \'\'\'PENDING VERIFICATION\'\'\'. 
    4.  **VERIFY RIGOROUSLY:** PER RELEVANT MANDATES in [system.mdcc](mdc:.cursor/rules/system.mdcc) (especially Mandate 2: Robust Validation Protocol, specifying required methods based on output type). This **MUST** involve diverse, appropriate MCP tools.
    5.  **ANALYZE/RECORD:** CONSOLIDATE RESULTS, VERIFICATION DATA (PASS/FAIL for each method), ASSUMPTIONS, UNCERTAINTIES. 
    6.  **MCP UPDATE (POST-VERIFICATION):** STATUS REFLECTING OUTCOME (E.G., \'\'\'VERIFICATION SUCCEEDED/FAILED\'\'\').

**STEP 6: UPDATE STATE / PLAN & INITIATE WORKFLOW CONTINUATION / FINALIZE TURN (FINAL ACTION)**
*   **ACTION:** PERSIST RESULTS, PLAN AND POTENTIALLY INITIATE NECESSARY FOLLOW-UP TASKS, UPDATE FINAL TASK STATUS, THEN TERMINATE TURN.
*   **PROCESS (MCP):** 
    1.  **EVALUATE WORKFLOW CONTINUATION & IDENTIFY SUCCESSOR:**
        *   Based on the current task\'s *successfully verified* outcome, the agent\'s role, its specific rules, and the overall goal, the agent **MUST** evaluate if a direct handoff to a subsequent specialized agent is the logical next step.
        *   A direct handoff **IS** logical if the current task is complete, verified, and rules/task imply a specific successor (`targetSuccessorAgentName`).
        *   If conditions met, identify `targetSuccessorAgentName` and prepare follow-up task creation. Let `created_follow_up_task_ids` = [].
        *   If conditions *not* met, **MUST NOT** create follow-up task. `created_follow_up_task_ids` remains empty.
    2.  **CREATE DIRECT FOLLOW-UP TASK (IF `targetSuccessorAgentName` IDENTIFIED):**
        *   If identified: Formulate `follow_up_title` and `follow_up_description`. Execute `mcp_project-manager_create_task_tasks__post`. Log new `taskId`(s) in `created_follow_up_task_ids`.
        *   If not identified, skip this step.
    3.  **DETERMINE FINAL STATUS OF CURRENT TASK:** 
        *   Let `final_status`.
        *   If `created_follow_up_task_ids` not empty: `final_status` = \'\'\'COMPLETED_HANDOFF_TO_\'\'\' + ",".join(created_follow_up_task_ids)
        *   Else if complete and verified: `final_status` = \'\'\'COMPLETED_AWAITING_PROJECT_MANAGER\'\'\'
        *   Else if blocked: `final_status` = \'\'\'BLOCKED\'\'\'
        *   Else if failed unrecoverably: `final_status` = \'\'\'FAILED\'\'\'
        *   (Other statuses possible if defined by agent rules).
    4.  **COMPREHENSIVE UPDATE & FINALIZATION OF CURRENT TASK:** UPDATE THE *CURRENT* MCP TASK. **MUST** INCLUDE FINDINGS SUMMARY (ACTIONS, TOOLS, VERIFICATION, ASSUMPTIONS, ERRORS), `created_follow_up_task_ids` (if applicable), AND `final_status`. SET `completed` FLAG TO `True`.
    5.  **TERMINATE.**
*   **PROCESS (CHAT - LEGACY):** 
    1.  **DETERMINE NEXT AGENT.**
    2.  **CONSTRUCT HANDOFF.**
    3.  **TRIGGER.**
    4.  **TERMINATE.**

**ERROR HANDLING PROTOCOL:**
*   **STEP 2 FAILURE (NO CONTEXT):** HALT.
*   **STEP 6 FAILURE (TASK CREATION / FINAL UPDATE):** RETRY ONCE. IF PERSISTS: CRITICAL ERROR. ATTEMPT TO UPDATE CURRENT TASK TO REFLECT FAILURE. ESCALATE TO `ProjectManager`. ATTEMPT LOCAL LOGGING.
*   **STEP 5 ERRORS:** DETAILED ERROR ANALYSIS **MUST** BE LOGGED IN STEP 6 UPDATE BEFORE CONTINUING (IF RECOVERABLE) OR HALTING. ERRORS **MUST** BE REPORTED TO `ProjectManager`.

> All agents and framework components must reference and comply with the universal mandates defined in [system.mdc](mdc:.cursor/rules/system.mdc). See Section 1 and 2 thereof.

## RESPONSE FORMATTING GUIDELINES ##

To ensure clarity, readability, and an engaging user experience, please adhere to the following Markdown formatting guidelines in your responses:

**A. General Structure & Readability:**
*   **Logical Flow:** Structure your responses logically. Use Markdown headings (e.g., `## Section Title ##`, `### Subsection ###`) to organize longer responses into clear sections.
*   **Lists:** Employ bullet points (`* item` or `- item`) or numbered lists (`1. item`) for lists of items, steps, recommendations, or key takeaways to enhance scannability.
*   **Paragraphs:** Break down long paragraphs into shorter, more digestible ones. Aim for clarity and conciseness in each paragraph, with good use of whitespace.
*   **Emphasis:** Use **bold text** for strong emphasis on key terms, headings, or important actionable items. Use *italics* for nuanced emphasis, titles, or foreign words.

**B. Visual Separators & Engagement:**
*   **Horizontal Rules:** Utilize horizontal rules (`---` or `***`) to clearly separate distinct sections, major thought transitions, or before and after significant blocks of information (like code or a detailed example).
*   **Emojis for Engagement:** Actively consider using relevant emojis to add personality, convey tone, or highlight points (e.g., ‚úÖ for success/completion, üí° for ideas, ‚ö†Ô∏è for warnings, ü§î for thought-provoking points, ‚û°Ô∏è for next steps). Use them thoughtfully to enhance readability and engagement, ensuring they are contextually appropriate and not overused.

**C. Advanced Markdown Usage:**
*   **Code Blocks:** For code snippets, configuration examples, commands, or blocks of text that need to stand out precisely, use Markdown code blocks (\`\`\`language\ncode\n\`\`\` or \`\`\`\ncode\n\`\`\`) or inline code (\`code\`) for short snippets.
*   **Tables:** If presenting comparative data or structured information, consider using Markdown tables where appropriate for clarity.
*   **Blockquotes:** Use blockquotes (`> text`) for quoting instructions, user queries, or important notes from source documents.

By following these guidelines, your responses will be more effective, easier to understand, and more pleasant for the user to interact with.

# References

- [loop.mdcc](mdc:.cursor/rules/loop.mdcc) (this document)
- [system.mdc](mdc:.cursor/rules/system.mdc)
- [concepts.mdcc](mdc:.cursor/rules/concepts.mdcc)
- [roles.mdcc](mdc:.cursor/rules/roles.mdcc)
- [protocol.mdcc](mdc:.cursor/rules/protocol.mdcc)
- Agent rules (`agents/*.mdcc`)

## Behavioral Enhancements & Advanced Protocols

See [system.mdc](mdc:.cursor/rules/system.mdc) for Universal Advanced Operational Protocols.