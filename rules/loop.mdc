---
# Rule Definition Metadata (V1)
ruleId: framework-and-loop
ruleType: Framework
title: Framework Definition & Core Agent Execution Loop
description: Defines external Agent Execution Framework and the MANDATORY internal Core Agent Execution Loop.
schemaVersion: 1
conformsTo: null
tags: [core, framework, loop, agent-execution, mcp]
lastUpdated: null
status: Active
---

# ⚙️ Framework & Core Agent Execution Loop

**Defines:**
1.  **External Agent Execution Framework:** Orchestrates agents (Part 1).
2.  **Mandatory Core Agent Execution Loop:** Internal steps per turn (Part 2).

## PART 1: AGENT EXECUTION FRAMEWORK (External Orchestrator)

**Purpose:** System/process orchestrating agent execution (MCP preferred). **Not an agent.**

**Responsibilities (MUST):**
1.  **Activation & Sequencing:**
    *   Activate agents based on MCP tasks (via `Overmind` polling) or Chat Triggers.
    *   Load agent rules (respecting hierarchy).
    *   Invoke agent, providing context (`taskId` / trigger payload) per **Part 2, Step 1**.
    *   Ensure sequential execution per `requestId`.
2.  **Tool Provision:** Provide authorized tools; execute calls; return results.
3.  **Rule Management:** Provide `fetch_rules`; manage `.cursor/rules/`; respect hierarchy.
4.  **Lifecycle:** Initiate (`Overmind`); manage flow; detect halt conditions.
5.  **Environment:** Provide runtime; manage resource access via tools only.

**Interaction:** Activation, Tool Interface, Transition detection (Chat) / MCP tools (MCP). **MUST NOT** require semantic understanding of tasks/triggers. **MUST** enforce **Part 2** loop.

---

## PART 2: CORE AGENT EXECUTION LOOP (Mandatory, MCP Focus)

**Purpose:** Ensure consistent, predictable, auditable behavior using MCP Task Manager (or Chat) as Single Source of Truth.

**Rules (MUST):**
*   **MUST** follow Steps 1-6 sequentially. No skipping (except HALT).
*   Coordination mechanism (MCP Task / Chat Payload) **MUST** be Single Source of Truth.
*   **MUST** get context before acting (Step 2).
*   **MUST** fetch & use own rules (Step 3).
*   **MUST** update coordination mechanism with **verification & assumption details** (Step 6).

**Action Sequence (Mandatory Steps):**

**Step 1: Activate & Get Initial Context**
*   **Activation:** By Framework.
*   **Input:** `taskId` (MCP) / Trigger Payload (Chat).
*   **Action:** Store `taskId` / Parse payload.

**Step 2: Get Full Task/Operational Context**
*   **Action:** Fetch detailed instructions & context.
*   **Tool (MCP):** `mcp_taskmanager_open_task_details` (using `taskId`).
*   **Action (Chat):** Use context parsed in Step 1.
*   **Action (Both):** Critically evaluate context per @`system.md`. Identify assumptions, verify feasibility.

**Step 3: Fetch Own Role Specification**
*   **Action:** Retrieve agent's rules.
*   **Tool:** `fetch_rules` (target: `<AgentRole>.md`).

**Step 4: Plan Turn (Internal)**
*   **Action:** Prepare LLM prompt & detailed action plan.
*   **Input:** Rules (Step 3), Context (Step 2).
*   **Process:** Construct prompt; Plan tool calls for Step 5, including **mandatory verification** and **assumption checks** per @`system.md`.

**Step 5: Execute Core Task(s) & Verify**
*   **Action:** Perform primary function(s).
*   **Tooling:** Role-authorized tools.
*   **Input:** Plan (Step 4), Context (Step 2).
*   **Process:**
    1.  **Execute:** Run planned tool calls.
    2.  **Verify:** Run verification steps. Analyze results.
    3.  **Record Internally:** Consolidate results, verification outcomes (PASS/FAIL), assumptions addressed, uncertainties.

**Step 6: Update State / Construct Handoff & Finalize Turn (FINAL ACTION)**
*   **Action:** Persist results to coordination mechanism; terminate turn.
*   **Tool (MCP):** `mcp_taskmanager_update_task`, `mcp_taskmanager_mark_task_done`.
*   **Tool (Chat):** Chat Mechanism.
*   **Input:** `taskId` (MCP), Internal Results (Step 5).
*   **Process (MCP):**
    1.  **Update Task:** `mcp_taskmanager_update_task` with **comprehensive findings** (actions, verification, assumptions, uncertainties, errors) per @`system.md` Mandate 10.
    2.  **Mark Done:** If complete, `mcp_taskmanager_mark_task_done`.
    3.  **Terminate:** **MUST** end execution.
*   **Process (Chat):**
    1.  **Determine Next Agent:** `<NextAgentRole>`.
    2.  **Construct Handoff:** Concise payload with **comprehensive findings** (as above).
    3.  **Trigger:** Send Chat Trigger: "Hey `<NextAgentRole>`, [Handoff Payload]".
    4.  **Terminate:** **MUST** end execution.

**Error Handling:**
*   **Step 2 Failure:** HALT.
*   **Step 6 Failure:** Retry once. If fails, HALT. Log locally if possible.
*   **Step 5 Errors:** **MUST** log detailed analysis in Step 6 update/handoff before potentially continuing or HALTing. Escalate to `Overmind`.
