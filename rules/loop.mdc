---

alwaysApply: true
description: Description to be filled
globs: []
---

# ⚙️ Framework & Core Agent Execution Loop

**Defines:** 1. External Agent Execution Framework. 2. Mandatory Core Agent Execution Loop.

## PART 1: AGENT EXECUTION FRAMEWORK (External Orchestrator)
**Purpose:** System orchestrating agent execution (MCP preferred). **Not an agent.**
**Responsibilities (MUST):**
1.  **Activation/Sequencing:** Activate agents (MCP/Chat). Load rules. Give context (`taskId`/payload). Ensure sequential exec per `requestId`.
2.  **Capability Provision:** Provide/run authorized capabilities.
3.  **Rule Management:** Provide rule fetch; manage `.cursor/rules/`; respect hierarchy.
4.  **Lifecycle:** Initiate; manage flow; detect halt.
5.  **Environment:** Provide runtime; manage resource access (authorized capabilities only).
**Interaction:** Activation, Capability Interface, Transition detect/MCP ops. **MUST NOT** need semantic understanding. **MUST** enforce Part 2 loop.

## PART 2: CORE AGENT EXECUTION LOOP (Mandatory, MCP Focus)
**Purpose:** **MUST** follow sequence each turn. Consistent, predictable, auditable. Use MCP/Chat as Single Source of Truth.
**Rules (MUST Follow):**
*   Run Steps 1-6 sequentially. No skips, unless HALT.
*   Treat MCP Task/Chat Payload as definitive source for instructions/context.
*   Get full context (Step 2) *before* significant action.
*   Fetch & use own role-specific rules (Step 3).
*   Report results (Step 6) **MUST** include verification details & assumptions.

**Action Sequence (Mandatory Steps):**

**Step 1: Activate & Get Initial Context**
*   **Activation:** Framework activates.
*   **Input:** `taskId` (MCP) / Trigger Payload (Chat).
*   **Action:** Store `taskId` / parse payload.

**Step 2: Get Full Task/Operational Context & Update Status**
*   **Action:** Fetch detailed instructions/context per @`system.mdc` MANDATE 1.
*   **Tooling (MCP):** `mcp_project-manager_get_task_by_id_tasks__task_id__get` (Task detail **MUST** include `targetAgentRole` from Overmind. Absence/ambiguity HALT). Support: file/dir ops, search, web, docs.
*   **Action (Chat):** Use payload, supplement with read-only tools if needed.
*   **Critical Eval (Both):** **MUST** critically evaluate context per @`system.mdc`. Identify assumptions, verify feasibility.
*   **MCP Status Update:** After context/analysis, **MUST** update MCP task (`mcp_project-manager_update_task_tasks__task_id__put`), status (e.g., "Context Gathered"), log findings/tools per @`system.mdc` MANDATE 4.

**Step 3: Fetch Your Role Specification & Validate Persona**
*   **Action:** Identify `targetAgentRole` (Step 2), retrieve role spec file.
*   **Validation:** 1. **MUST** verify `targetAgentRole` present/clear. 2. If missing/ambiguous, HALT, update MCP (Error: "`targetAgentRole` not provided/ambiguous"), escalate. 3. If present, fetch agent rule. 4. If unfetchable, HALT, update MCP (Error: "Cannot fetch rule for `targetAgentRole`"), escalate.
*   **Outcome:** Loaded rules for assigned persona.

**Step 4: Plan Your Turn (Internal)**
*   **Action:** Internally prepare action plan.
*   **Input:** Rules (Step 3), context (Step 2).
*   **Process:** Construct internal reasoning/prompt. Plan Step 5 ops, incl. **mandatory verification** & **assumption** checks per @`system.mdc`. (Note: "Continuous Chat Sequence" by Overmind MAY mean more comprehensive execution).

**Step 5: Execute Your Core Task(s), Verify Rigorously & Update Status**
*   **Action:** Perform primary role/task functions.
*   **Process:** 1. **MCP Update (Exec Start):** Status "Execution In Progress". 2. **Execute:** Run plan. 3. **MCP Update (Verify Start):** Status "Pending Verification". 4. **Verify Rigorously:** Per @`system.mdc` MANDATE 2 (Multi-Method). 5. **Analyze/Record:** Consolidate results, verification, assumptions, uncertainties. 6. **MCP Update (Post-Verify):** Status for outcome (e.g., "Verification Succeeded/Failed").

**Step 6: Update State / Construct Handoff & Finalize Your Turn (FINAL ACTION)**
*   **Action:** Persist results to coordination mechanism, then terminate turn.
*   **Process (MCP):** 1. **Comprehensive Update & Final Status:** **MUST** update MCP task (`mcp_project-manager_update_task_tasks__task_id__put`). **MUST** include findings summary (@`system.mdc` MANDATE 4: actions, tools, verify methods/results, assumptions, errors), final status (e.g., "Completed," "Blocked," "Failed"). Set `completed` flag if finished/verified. 2. **Terminate.**
*   **Process (Chat):** 1. **Determine Next Agent.** 2. **Construct Handoff:** Concise payload with comprehensive findings. (Note: "Continuous Chat Sequence" payload MAY include sequence context). 3. **Trigger:** "Hey `<NextAgentRole>`, [Payload]". 4. **Terminate.**

**Error Handling:**
*   **Step 2 Fail (no context):** HALT.
*   **Step 6 Fail (no update/trigger):** Retry once. If still fails, HALT. Try local log.
*   **Step 5 Errors:** **MUST** log detailed error analysis (@`system.mdc` Mandate 6) in Step 6 update before continuing (if recoverable) or HALTing. Ensure errors reported to `Overmind`.