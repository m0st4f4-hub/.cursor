---
alwaysApply: true
description: 1.  **ACTIVATION/SEQUENCING:** ACTIVATE AGENTS (MCP/CHAT). LOAD RULES.
  PROVIDE CONTEXT (`taskId`/PAYLOAD). ENSURE SEQUENTIAL EXECUTION PER `requestId`.
globs: []
---

**SPECIFIES:** 1. EXTERNAL AGENT EXECUTION FRAMEWORK. 2. MANDATORY CORE AGENT EXECUTION PROTOCOL.

## PART 1: AGENT EXECUTION FRAMEWORK (EXTERNAL ORCHESTRATOR)
**OBJECTIVE:** SYSTEM FOR ORCHESTRATING AGENT EXECUTION (MCP PREFERRED). **NOT AN AGENT.**
**RESPONSIBILITIES (MANDATORY):**
1.  **ACTIVATION/SEQUENCING:** ACTIVATE AGENTS (MCP/CHAT). LOAD RULES. PROVIDE CONTEXT (`taskId`/PAYLOAD). ENSURE SEQUENTIAL EXECUTION PER `requestId`.
2.  **CAPABILITY PROVISIONING:** PROVIDE AND EXECUTE AUTHORIZED CAPABILITIES.
3.  **RULE MANAGEMENT:** PROVIDE RULE FETCHING; MANAGE `.cursor/rules/`; ENFORCE HIERARCHY.
4.  **LIFECYCLE CONTROL:** INITIATE; MANAGE OPERATIONAL FLOW; DETECT HALT CONDITIONS.
5.  **ENVIRONMENT CONTROL:** PROVIDE RUNTIME; MANAGE RESOURCE ACCESS (AUTHORIZED CAPABILITIES ONLY).
**INTERACTION PROTOCOL:** ACTIVATION, CAPABILITY INTERFACE, TRANSITION DETECTION/MCP OPERATIONS. SEMANTIC UNDERSTANDING **MUST NOT** BE REQUIRED. PART 2 PROTOCOL **MUST** BE ENFORCED.

## PART 2: CORE AGENT EXECUTION PROTOCOL (MANDATORY, MCP FOCUS)
**OBJECTIVE:** ADHERENCE TO THIS SEQUENCE IS MANDATORY EACH TURN. ENSURE CONSISTENCY, PREDICTABILITY, AND AUDITABILITY. MCP/CHAT **MUST** BE THE SINGLE SOURCE OF TRUTH.
**GOVERNING RULES (MANDATORY ADHERENCE):**
*   EXECUTE STEPS 1-6 SEQUENTIALLY. NO DEVIATION, UNLESS HALT IS INVOKED.
*   MCP TASK/CHAT PAYLOAD IS THE DEFINITIVE SOURCE FOR INSTRUCTIONS AND CONTEXT.
*   ACQUIRE FULL CONTEXT (STEP 2) *PRIOR* TO ANY SIGNIFICANT ACTION.
*   FETCH AND UTILIZE OWN ROLE-SPECIFIC RULES (STEP 3).
*   REPORTED RESULTS (STEP 6) **MUST** INCLUDE VERIFICATION DETAILS AND ASSUMPTIONS.

**ACTION SEQUENCE (MANDATORY STEPS):**

**STEP 1: ACTIVATE & ACQUIRE INITIAL CONTEXT**
*   **ACTIVATION:** FRAMEWORK INITIATES ACTIVATION.
*   **INPUT:** `taskId` (MCP) / TRIGGER PAYLOAD (CHAT).
*   **ACTION:** STORE `taskId` / PARSE PAYLOAD.

**STEP 2: ACQUIRE FULL TASK/OPERATIONAL CONTEXT & UPDATE STATUS**
*   **ACTION:** FETCH DETAILED INSTRUCTIONS/CONTEXT PER @`system.mdc` MANDATE 1.
*   **TOOLING (MCP):** `mcp_project-manager_get_task_by_id_tasks__task_id__get` (TASK DETAIL **MUST** INCLUDE `targetAgentRole` FROM Overmind. ABSENCE/AMBIGUITY INVOKES HALT). SUPPORTED OPERATIONS: FILE/DIRECTORY OPERATIONS, SEARCH, WEB, DOCUMENTATION RETRIEVAL.
*   **ACTION (CHAT):** UTILIZE PAYLOAD. SUPPLEMENT WITH READ-ONLY TOOLS AS REQUIRED.
*   **CRITICAL EVALUATION (BOTH):** CONTEXT **MUST** BE CRITICALLY EVALUATED PER @`system.mdc`. IDENTIFY ASSUMPTIONS, VERIFY FEASIBILITY.
*   **MCP STATUS UPDATE:** POST-CONTEXT/ANALYSIS, MCP TASK (`mcp_project-manager_update_task_tasks__task_id__put`) **MUST** BE UPDATED WITH STATUS (E.G., "CONTEXT ACQUIRED"), FINDINGS, AND TOOLS UTILIZED, PER @`system.mdc` MANDATE 4.

**STEP 3: FETCH ROLE SPECIFICATION & VALIDATE PERSONA**
*   **ACTION:** IDENTIFY `targetAgentRole` (FROM STEP 2). RETRIEVE ROLE SPECIFICATION FILE.
*   **VALIDATION:** 1. `targetAgentRole` PRESENCE AND CLARITY **MUST** BE VERIFIED. 2. IF MISSING/AMBIGUOUS: HALT. UPDATE MCP (ERROR: "`targetAgentRole` NOT PROVIDED/AMBIGUOUS"). ESCALATE. 3. IF PRESENT: FETCH AGENT RULE. 4. IF UNFETCHABLE: HALT. UPDATE MCP (ERROR: "CANNOT FETCH RULE FOR `targetAgentRole`"). ESCALATE.
*   **OUTCOME:** RULES FOR ASSIGNED PERSONA LOADED.

**STEP 4: PLAN TURN (INTERNAL)**
*   **ACTION:** PREPARE INTERNAL ACTION PLAN.
*   **INPUT:** RULES (STEP 3), CONTEXT (STEP 2).
*   **PROCESS:** CONSTRUCT INTERNAL REASONING/PROMPT. PLAN STEP 5 OPERATIONS, INCLUDING **MANDATORY VERIFICATION** AND **ASSUMPTION CHECKS** PER @`system.mdc`. (NOTE: "CONTINUOUS CHAT SEQUENCE" BY Overmind MAY REQUIRE MORE COMPREHENSIVE EXECUTION).

**STEP 5: EXECUTE CORE TASK(S), RIGOROUSLY VERIFY & UPDATE STATUS**
*   **ACTION:** PERFORM PRIMARY ROLE/TASK FUNCTIONS.
*   **PROCESS:** 1. **MCP UPDATE (EXECUTION START):** STATUS "EXECUTION IN PROGRESS". 2. **EXECUTE:** IMPLEMENT PLAN. 3. **MCP UPDATE (VERIFICATION START):** STATUS "PENDING VERIFICATION". 4. **VERIFY RIGOROUSLY:** PER @`system.mdc` MANDATE 2 (MULTI-METHOD VERIFICATION). 5. **ANALYZE/RECORD:** CONSOLIDATE RESULTS, VERIFICATION DATA, ASSUMPTIONS, UNCERTAINTIES. 6. **MCP UPDATE (POST-VERIFICATION):** STATUS REFLECTING OUTCOME (E.G., "VERIFICATION SUCCEEDED/FAILED").

**STEP 6: UPDATE STATE / CONSTRUCT HANDOFF & FINALIZE TURN (FINAL ACTION)**
*   **ACTION:** PERSIST RESULTS TO COORDINATION MECHANISM, THEN TERMINATE TURN.
*   **PROCESS (MCP):** 1. **COMPREHENSIVE UPDATE & FINAL STATUS:** MCP TASK (`mcp_project-manager_update_task_tasks__task_id__put`) **MUST** BE UPDATED. **MUST** INCLUDE FINDINGS SUMMARY (@`system.mdc` MANDATE 4: ACTIONS, TOOLS, VERIFICATION METHODS/RESULTS, ASSUMPTIONS, ERRORS), AND FINAL STATUS (E.G., "COMPLETED," "BLOCKED," "FAILED"). SET `completed` FLAG IF FINISHED AND VERIFIED. 2. **TERMINATE.**
*   **PROCESS (CHAT):** 1. **DETERMINE NEXT AGENT.** 2. **CONSTRUCT HANDOFF:** CONCISE PAYLOAD CONTAINING COMPREHENSIVE FINDINGS. (NOTE: "CONTINUOUS CHAT SEQUENCE" PAYLOAD MAY INCLUDE SEQUENCE CONTEXT). 3. **TRIGGER:** "Hey `<NextAgentRole>`, [Payload]". 4. **TERMINATE.**

**ERROR HANDLING PROTOCOL:**
*   **STEP 2 FAILURE (NO CONTEXT):** HALT.
*   **STEP 6 FAILURE (NO UPDATE/TRIGGER):** RETRY ONCE. IF FAILURE PERSISTS: HALT. ATTEMPT LOCAL LOGGING.
*   **STEP 5 ERRORS:** DETAILED ERROR ANALYSIS (@`system.mdc` MANDATE 6) **MUST** BE LOGGED IN STEP 6 UPDATE BEFORE CONTINUING (IF RECOVERABLE) OR HALTING. ERRORS **MUST** BE REPORTED TO `Overmind`.