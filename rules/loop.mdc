---
alwaysApply: true
description: Framework & Core Agent Execution Protocol
globs: []
ruleId: framework-loop-protocol
ruleType: Framework
---

# Framework & Core Agent Execution Protocol

**Specifies:** 1. External agent execution framework. 2. Mandatory core agent execution protocol.

## Part 1: Autonomous Unit Orchestration Framework (External)
**Objective:** System for orchestrating agent execution (MCP preferred). **Not an agent.**
**Responsibilities (Mandatory):**
1.  **Activation/Sequencing:** Activate agents (MCP/Chat). Load rules. Provide context (`taskId`/payload). Ensure sequential execution per `requestId`.
2.  **Capability Provisioning:** Provide and execute authorized capabilities.
3.  **Rule Management:** Provide rule fetching; manage `.cursor/rules/`; enforce hierarchy.
4.  **Lifecycle Control:** Initiate; manage operational flow; detect halt conditions.
5.  **Environment Control:** Provide runtime; manage resource access (authorized capabilities only).
**Interaction Protocol:** Activation, capability interface, transition detection/MCP operations. Semantic understanding **MUST NOT** be required. Part 2 protocol **MUST** be enforced.

## Part 2: Universal Unit Execution Cycle (Mandatory, MCP-Centric)
**Objective:** Adherence to this sequence is mandatory each turn. Ensure consistency, predictability, and auditability. MCP/Chat **MUST** be the single source of truth.
**Governing Rules (Mandatory Adherence):**
*   Execute steps 1-6 sequentially. No deviation, unless halt is invoked.
*   MCP task/Chat payload is the definitive source for instructions and context.
*   Acquire full context (Step 2) *prior* to any significant action.
*   Fetch and utilize own role-specific rules (Step 3).
*   Reported results (Step 6) **MUST** include verification details and assumptions.

**Action Sequence (Mandatory Steps):**

**Step 1: Activate & Acquire Initial Context**
*   **Activation:** Framework initiates activation.
*   **Input:** `taskId` (MCP) / trigger payload (Chat).
*   **Action:** Store `taskId` / parse payload.

**Step 2: Acquire Full Task/Operational Context & Update Status**
*   **Action:** Fetch detailed instructions/context per relevant mandates.
*   **Tooling (MCP):** `mcp_project-manager_get_task_by_id` (Task detail **MUST** include `targetAgentRole` from `ProjectManager`. Absence/ambiguity invokes HALT).
    *   **Supported Operations for Context Gathering (MCP Preferred for Automation):**
        *   File/Directory Info: `mcp_desktop-commander_read_file`, `mcp_desktop-commander_read_multiple_files`, `mcp_desktop-commander_list_directory`, `mcp_desktop-commander_get_file_info`.
        *   Code/File Search: `mcp_desktop-commander_search_code` (regex), `mcp_desktop-commander_search_files` (name pattern).
        *   Web Research: `mcp_web-fetch_fetch` (direct URL), `default_api.web_search` (general search).
        *   Library Documentation: `mcp_context7_resolve-library-id` followed by `mcp_context7_get-library-docs`.
*   **Action (Chat):** Utilize payload. Supplement with read-only tools as required.
*   **Critical Evaluation (Both):** Context **MUST** be critically evaluated. Identify assumptions, verify feasibility.
*   **MCP Status Update:** Post-context/analysis, MCP task **MUST** be updated with status (e.g., 'Context Acquired'), findings, and tools utilized, per relevant mandates.

**Step 3: Fetch Role Specification & Validate Persona**
*   **Action:** Identify `targetAgentRole` (from Step 2). Retrieve role specification file (e.g., `agent-name.mdc` from `rules-md/agents/`).
*   **Validation:** 1. `targetAgentRole` presence and clarity **MUST** be verified. 2. If missing/ambiguous: HALT. Update MCP (error). Escalate. 3. If present: Fetch agent rule. 4. If unfetchable: HALT. Update MCP (error). Escalate.
*   **Outcome:** Rules for assigned persona loaded.

**Step 4: Plan Turn (Internal)**
*   **Action:** Prepare internal action plan.
*   **Input:** Rules (Step 3), context (Step 2).
*   **Process:** Construct internal reasoning/prompt. Plan Step 5 operations, including **MANDATORY VERIFICATION** and **ASSUMPTION CHECKS**.

**Step 5: Execute Core Task(s), Rigorously Verify & Update Status**
*   **Action:** Perform primary role/task functions.
*   **Process:**
    1.  **MCP Update (Execution Start):** Status 'Execution In Progress'.
    2.  **Execute:** Implement plan (Refer to agent-specific rules and **MUST** adhere to tool mandates in [system.mdc](mdc:.cursor/rules/system.mdc), especially Mandate 3: Strategic Capability Selection).
    3.  **MCP Update (Verification Start):** Status 'Pending Verification'.
    4.  **Verify Rigorously:** Per relevant mandates in [system.mdc](mdc:.cursor/rules/system.mdc) (especially Mandate 2: Robust Validation Protocol, specifying required methods based on output type). This **MUST** involve diverse, appropriate MCP tools.
    5.  **Analyze/Record:** Consolidate results, verification data (PASS/FAIL for each method), assumptions, uncertainties.
    6.  **MCP Update (Post-Verification):** Status reflecting outcome (e.g., 'Verification Succeeded/Failed').

**Step 6: Update State / Plan & Initiate Workflow Continuation / Finalize Turn (Final Action)**
*   **Action:** Persist results, plan and potentially initiate necessary follow-up tasks, update final task status, then terminate turn.
*   **Process (MCP):**
    1.  **Evaluate Workflow Continuation & Identify Successor:**
        *   Based on the current task's *successfully verified* outcome, the agent's role, its specific rules, and the overall goal, the agent **MUST** evaluate if a direct handoff to a subsequent specialized agent is the logical next step.
        *   A direct handoff **IS** logical if the current task is complete, verified, and rules/task imply a specific successor (`targetSuccessorAgentName`).
        *   If conditions met, identify `targetSuccessorAgentName` and prepare follow-up task creation. Let `created_follow_up_task_ids` = [].
        *   If conditions *not* met, **MUST NOT** create follow-up task. `created_follow_up_task_ids` remains empty.
    2.  **Create Direct Follow-up Task (If `targetSuccessorAgentName` Identified):**
        *   If identified: Formulate `follow_up_title` and `follow_up_description`. Execute `mcp_project-manager_create_task`. Log new `taskId`(s) in `created_follow_up_task_ids`.
        *   If not identified, skip this step.
    3.  **Determine Final Status of Current Task:**
        *   Let `final_status`.
        *   If `created_follow_up_task_ids` is not empty: `final_status` = 'COMPLETED_HANDOFF_TO_' + ",".join(created_follow_up_task_ids)
        *   Else if complete and verified: `final_status` = 'COMPLETED_AWAITING_PROJECT_MANAGER'
        *   Else if blocked: `final_status` = 'BLOCKED'
        *   Else if failed unrecoverably: `final_status` = 'FAILED'
        *   (Other statuses possible if defined by agent rules).
    4.  **Comprehensive Update & Finalization of Current Task:** Update the *current* MCP task. **MUST** include findings summary (actions, tools, verification, assumptions, errors), `created_follow_up_task_ids` (if applicable), and `final_status`. Set `completed` flag to `True`.
    5.  **Terminate.**
*   **Process (Chat - Legacy):**
    1.  **Determine Next Agent.**
    2.  **Construct Handoff.**
    3.  **Trigger.**
    4.  **Terminate.**

**Error Handling Protocol:**
*   **Step 2 Failure (No Context):** HALT.
*   **Step 6 Failure (Task Creation / Final Update):** Retry once. If persists: CRITICAL ERROR. Attempt to update current task to reflect failure. Escalate to `ProjectManager`. Attempt local logging.
*   **Step 5 Errors:** Detailed error analysis **MUST** be logged in Step 6 update before continuing (if recoverable) or halting. Errors **MUST** be reported to `ProjectManager`.

> All agents and framework components must reference and comply with the universal mandates defined in [system.mdc](mdc:.cursor/rules/system.mdc). See Section 1 and 2 thereof.

## References

*   This document ([loop.mdc](mdc:.cursor/rules/loop.mdc))
*   [system.mdc](mdc:.cursor/rules/system.mdc)
*   [concepts.mdc](mdc:.cursor/rules/concepts.mdc)
*   [roles.mdc](mdc:.cursor/rules/roles.mdc)
*   [protocol.mdc](mdc:.cursor/rules/protocol.mdc)
*   Agent rules (`rules-md/agents/*.mdc`)

## Behavioral Enhancements & Advanced Protocols

See [system.mdc](mdc:.cursor/rules/system.mdc) for Universal Advanced Operational Protocols.