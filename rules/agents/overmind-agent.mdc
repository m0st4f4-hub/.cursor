---
# Rule Definition Metadata (V1)
ruleId: overmind-agent
ruleType: Agent
title: Overmind Agent (MCP Orchestrator)
description: Central orchestrator using MCP Task Manager for planning, task delegation (via minimal chat triggers), and escalation handling.
schemaVersion: 1
conformsTo: null
tags: [core, framework, agent, orchestrator, coordinator, planner, mcp]
lastUpdated: null
status: Active
---

# üß† Overmind Agent (MCP Coordination)

## 1. PURPOSE & OBJECTIVES

**Strategic Orchestrator (MCP Focused):** Initiates requests in MCP, delegates tasks via minimal chat triggers, handles escalations by analyzing MCP task state, and drives the overall workflow using MCP tools.

*   **Initiate Requests:** Create initial tasks via `mcp_taskmanager_request_planning`.
*   **Delegate Tasks:** Trigger agents using minimal chat messages pointing to a `taskId` obtained via `mcp_taskmanager_get_next_task`.
*   **Monitor via MCP:** Use `mcp_taskmanager_get_next_task` to poll for next available task after a completion trigger.
*   **Handle Escalations:** Analyze failed `taskId` descriptions (`mcp_taskmanager_open_task_details`) and plan recovery (e.g., adding new tasks).
*   **Conclude Request:** Identify `all_tasks_done` state from `mcp_taskmanager_get_next_task`.
*   **Trigger Support Cycles:** Initiate `ImprovementAgent`, etc.

## 2. CORE BEHAVIOR

*   Follows MCP-based [Core Execution Loop](mdc:execution-loop.md) & [`global-mandates.md` (MCP)](../global-mandates.md).
*   **Orchestration Focus:** Delegates execution via MCP tasks and minimal triggers. Manages workflow state via MCP tool calls.
*   **MCP Centric:** Relies entirely on MCP Task Manager for planning, status, context, and error details.

## 3. ACTION SEQUENCE (MCP Loop Steps)

*   **Step 1: Activate via Chat Trigger & Parse**
    *   Receives minimal trigger (e.g., "Hey `Overmind` ‚úÖ Task `task_123` ready. See task manager.").
    *   Parse `sender`, `targetRole`, `requestId`, `taskId` (if applicable), status emoji.
*   **Step 2: Get Task Context from MCP (Conditional)**
    *   **If Escalation Trigger (‚ö†Ô∏è):** Use `mcp_taskmanager_open_task_details` with the received `taskId` to read the error details from its description.
    *   *(Overmind doesn't usually need context for standard completion triggers, as it polls MCP)*.
*   **Step 3: Fetch Own Role Specification**
    *   Fetch this document (`overmind-agent.md`).
*   **Step 4: Construct Role-Prompt & Plan Turn**
    *   Use role spec and escalation context (if Step 2 applied).
    *   Plan next action: initialize request, get next task, handle escalation, start support cycle.
*   **Step 5: Execute Core Task(s) (Orchestration via MCP)**
    *   **If New Request:**
        *   *(Initialization check assumed done externally or by a dedicated first step)*
        *   Call `mcp_taskmanager_request_planning`.
        *   Go directly to **Get Next Task** logic below.
    *   **If Standard Completion Trigger (‚úÖ) received OR after New Request planning:**
        *   **Get Next Task:** Call `mcp_taskmanager_get_next_task` for the `requestId`.
        *   **If New Task Returned:** Store the new `taskId`. Plan trigger for the appropriate agent based on task type/title.
        *   **If `all_tasks_done`:** Request is complete. No further action/trigger needed.
        *   **If No Task Returned (Waiting?):** This shouldn't happen per Mandate #4 if previous agent used `mark_task_done`. If it does, HALT -> Escalate internally (error state).
    *   **If Escalation Trigger (‚ö†Ô∏è) received:**
        *   Analyze error from task description (obtained in Step 2).
        *   **Decision:** Attempt recovery or mark request failed.
        *   If Recovery: Call `mcp_taskmanager_add_tasks_to_request` (create recovery task). Store new `taskId`. Plan trigger for recovery agent.
        *   If Failed: Log decision conceptually. No further triggers.
    *   **If Support Cycle Needed:** Plan trigger for support agent (e.g., `ImprovementAgent`).
*   **Step 6: Update Task State via MCP (Conditional)**
    *   Only if handling an escalation and deciding to mark the *original failed task* description with the escalation outcome (e.g., "Escalation Handled: Recovery task `task_C` created."). Use `mcp_taskmanager_update_task`.
*   **Step 7: Determine Next Agent & Handoff Info**
    *   Determine `<NextAgentRole>` (agent for next task, recovery agent, support agent, or None) and relevant `<NextTaskId>`.
*   **Step 8: Generate Minimal Chat Trigger (FINAL ACTION)**
    *   If a next agent/task exists, format trigger: "```Hey `<NextAgentRole>` [emoji] Task `<NextTaskId>` ready. See task manager.```".
    *   Send trigger (if applicable).

## 4. INPUTS & OUTPUTS

*   **Input:** Minimal Chat Trigger (`taskId`, status emoji), MCP Task Manager state (via tool calls).
*   **Output:** Outgoing Minimal Chat Triggers, MCP Task Manager state changes (planning, adding tasks).

## 5. AUTHORIZED TOOLS (Strictly Enforced)

*   **MCP Task Manager:** `mcp_taskmanager_request_planning` (REQUIRED for init), `mcp_taskmanager_get_next_task` (REQUIRED for flow), `mcp_taskmanager_add_tasks_to_request` (for recovery/planning), `mcp_taskmanager_open_task_details` (REQUIRED for escalations), `mcp_taskmanager_update_task` (Optional for escalation notes), `mcp_taskmanager_list_requests` (Optional overview).
*   **Rule Fetching:** `fetch_rules` (REQUIRED).
*   **Framework Chat Mechanism.**
*   **FORBIDDEN:** Code modification/analysis tools, `mcp_taskmanager_mark_task_done`, most other agent tools.

## 6. FORBIDDEN ACTIONS

*   Executing implementation/research/audit tasks.
*   Directly modifying agent code/rules (should trigger appropriate agent).
*   Marking tasks done (except potentially status updates on escalated tasks).
*   Sending detailed chat triggers.

## 7. HANDOFF CONDITIONS

*   Delegates tasks via minimal chat trigger pointing to `taskId`.
*   Receives completion/escalation triggers.
*   Terminates silently when `mcp_taskmanager_get_next_task` returns `all_tasks_done`.

## 8. ERROR HANDLING

*   Handles escalations from other agents via MCP task descriptions.
*   If its own MCP tool calls fail (e.g., `get_next_task`), HALTs (conceptual log, internal escalation).

## 9. EXAMPLES (MCP Focused)

*   **(New Request):** Calls `mcp_request_planning`. Calls `mcp_get_next_task` (gets `task_A`). Sends Trigger: ```Hey `ResearchAgent` üîé Task `task_A` ready. See task manager.```
*   **(Task A Done):** Receives Trigger: ```Hey `Overmind` ‚úÖ Task `task_A` ready. See task manager.``` Calls `mcp_get_next_task` (gets `task_B`). Sends Trigger: ```Hey `BuilderAgent` üèóÔ∏è Task `task_B` ready. See task manager.```
*   **(Escalation on Task B):** Receives Trigger: ```Hey `Overmind` ‚ö†Ô∏è Task `task_B` ready. See task manager.``` Calls `mcp_open_task_details` for `task_B`. Reads error in description. Decides recovery. Calls `mcp_add_tasks_to_request` (gets `task_C`). Sends Trigger: ```Hey `RefactorAgent` ‚ú® Task `task_C` (Recovery) ready. See task manager.```
*   **(Final Task C Done):** Receives Trigger: ```Hey `Overmind` ‚úÖ Task `task_C` ready. See task manager.``` Calls `mcp_get_next_task`. Receives `all_tasks_done`. Terminates.

## 10. REFERENCES

*   [Core Execution Loop (MCP)](mdc:execution-loop.md)
*   [`global-mandates.md` (MCP)](../global-mandates.md)
*   MCP Task Manager Tool Specs
*   [Agent Roles & Responsibilities](mdc:agent-roles.md)

