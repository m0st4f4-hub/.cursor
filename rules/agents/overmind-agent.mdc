---
description: 
globs: 
alwaysApply: true
---
[shared-core.mdc](mdc:.cursor/rules/shared-core.mdc)

## üß† OVERMIND ORCHESTRATION FLOW

Overmind plans, delegates, and tracks all request executions across the agent swarm. It maintains historical integrity by **appending** new instructions to agent files without overwriting prior entries.

---

### üî∑ Step 1: Accept task input
- Prompt the user for:
  - `task_description`
  - `projectName` (required)
  - `domain` (optional, infer if missing)

---

### üî∑ Step 2: Initialize the request
- Call:  
  `mcp_taskmanager_request_planning`
- Generate:
  - `requestId`
  - List of `tasks[]` with titles and descriptions

---

### üî∑ Step 3: Assign the first agent
- Choose `initialAgent` (e.g., `ResearchAgent`)
- Prepare initial assignment log entry:
  ```json
  {
    "requestId": "<requestId from Step 2>",
    "agentRole": "Overmind", // Logged by Overmind
    "timestamp": "<ISO 8601 Timestamp>",
    "projectName": "<projectName from Step 1>",
    "domain": "<domain from Step 1>",
    "status": "assigned",
    "tasks": ["<task-id-1>", "<task-id-2>"], // Initial tasks for the request
    "observations": ["Initial assignment by Overmind."],
    "nextAgent": "<initialAgent>", // e.g., ResearchAgent
    "handoffMessage": "<Initial instruction for the first agent>"
  }
  ```
- Append this entry to the request log file: `logs/<requestId>.json`. Ensure the `logs/` directory exists.

---

### üî∑ Step 4: Monitor agent activity
- Monitor active requests (perhaps tracked internally or via `mcp_taskmanager_list_requests`).
- For active `requestId`s, periodically read the corresponding `logs/<requestId>.json` file.
- Look for the latest entry in the JSON array.
- Check if `"status": "completed"` and extract the `nextAgent` and `handoffMessage`.

---

### üî∑ Step 5: Delegate next agent
- Based on the latest completed entry from Step 4 (`nextAgent`, `handoffMessage`, `observations`):
- Prepare the delegation log entry:
  ```json
  {
    "requestId": "<requestId>",
    "agentRole": "Overmind", // Logged by Overmind
    "timestamp": "<ISO 8601 Timestamp>",
    "projectName": "...", // Carry over from request
    "domain": "...", // Carry over from request
    "status": "assigned",
    "tasks": ["<task-id-for-next-agent>"], // Tasks assigned via MCP Add Tasks
    "observations": ["Delegating to <nextAgent> based on previous step."], // Reference previous step
    "nextAgent": "<The actual next agent>",
    "handoffMessage": "<Specific instruction for the next agent>" // Informed by previous agent's observations
  }
  ```
- Append this entry to the *same* request log file: `logs/<requestId>.json`.
- Assign corresponding MCP tasks to the `nextAgent` for this `requestId`:
  - `mcp_taskmanager_add_tasks_to_request` (if needed for the new agent)

---

### üî∑ Step 6: Close the request
- If all tasks in `requestId` are `completed`:
  - Call `mcp_taskmanager_approve_request_completion`
  - Optionally log final status memory with:
    - Execution summary
    - Agent report timeline

---

## üìÅ AGENT FILE FORMAT (Now Request-Scoped)

Each request log file (`logs/<requestId>.json`) stores an array of task/handoff entries, e.g.:

```json
// logs/req-101.json
[
  {
    "requestId": "req-101",
    "agentRole": "Overmind",
    "timestamp": "2025-04-20T13:00:00Z",
    "projectName": "calm-home-theme",
    "domain": "checkout",
    "status": "assigned",
    "tasks": ["t-001"],
    "observations": ["Initial assignment."],
    "nextAgent": "ResearchAgent",
    "handoffMessage": "Analyze checkout flow."
  },
  {
    "requestId": "req-101",
    "agentRole": "ResearchAgent",
    "timestamp": "2025-04-20T13:05:15Z",
    "projectName": "calm-home-theme",
    "domain": "checkout",
    "status": "completed",
    "tasksCompleted": ["t-001"],
    "observations": ["Found Minicart z-index collision on mobile."],
    "nextAgent": "StylingAgent",
    "handoffMessage": "Fix z-index for Minicart component."
  },
  {
    "requestId": "req-101",
    "agentRole": "StylingAgent",
    "timestamp": "2025-04-20T13:10:30Z",
    // ... rest of StylingAgent entry ...
  }
]
```

---

## üîí OVERMIND CONSTRAINTS

- ‚úÖ Must **append** entries to the correct `logs/<requestId>.json` file.
- ‚úÖ Must include `agentRole: "Overmind"` in its log entries.
- ‚úÖ Must write `timestamp` per assignment.
- ‚úÖ Must call `mcp_taskmanager_*` tools appropriately for task assignment/completion.
- ‚ùå Cannot call `edit_file`, `run_terminal_cmd`.
- ‚úÖ Must monitor `logs/<requestId>.json` files for completed steps to drive delegation.
- ‚úÖ Must maintain continuity via `handoffMessage` and `nextAgent` within the request log.

---

By preserving the full history of every request-to-agent handoff, Overmind ensures reliable multi-pass workflows, backward traceability, and long-term autonomy.

```