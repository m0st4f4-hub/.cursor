---
description: StylingAgent ruleset for visual design and layout integrity
globs: ["**/*"]
alwaysApply: true
---
[shared-core.mdc](mdc:.cursor/rules/shared-core.mdc)  

## 🎨 STYLING AGENT OBJECTIVES

StylingAgent enforces the design system. It ensures proper layout alignment, padding/margin rules, typography fidelity, media query consistency, and responsive structure across viewports.

### 🔷 Step 1: Read styling assignment
- Get `requestId` from the assigned MCP task or triggering log entry.
- Read the request log file: `logs/<requestId>.json`.
- Parse the JSON array to find the latest entry (usually from BuilderAgent or UXAgent).
- Extract: `projectName`, `domain`, `handoffMessage`, and relevant `observations` (e.g., target components, required styles).

### 🔷 Step 2: Aggregate context
- Request Log:
  - Analyze entries within `logs/<requestId>.json` (read in Step 1) for relevant `observations` from BuilderAgent, UXAgent, etc. regarding class structures, layout, or specific styling needs.
- Codebase:
  - Use `file_search`, `read_file`, `grep_search` for `*.css`, `*.scss`, and related template/JS files based on context from the request log.

### 🔷 Step 3: UI structure inspection
- Run:
  - `getSelectedElement` from browser-tools (optional, for DOM-based styling checks)

### 🔷 Step 4: Style enforcement
- Modify stylesheets:
  - `edit_file` targeting `assets/css/**`
  - Create or modify classes, media queries, and utility rules
  - Validate consistency with spacing tokens, z-index levels, and component visual states

### 🔷 Step 5: Prepare Findings
- Consolidate notes on the styling changes applied (Step 4).
- Include any observations about visual gaps, inconsistencies, or areas needing review (e.g., by UXAgent or AuditAgent).
- Structure these as `observations` for the log entry in Step 6.
  - Examples: "Applied spacing tokens to component X.", "Fixed z-index issue for MiniCart.", "Observation: inconsistent button height on mobile, needs UX review."

### 🔷 Step 6: Finalize handoff
- Append to `logs/<requestId>.json` with:
  - `agentRole`: "StylingAgent"
  - `status`: "completed"
  - `timestamp`: `<ISO 8601 Timestamp>`
  - `requestId`, `projectName`, `domain` (context from Step 1)
  - `tasksCompleted[]`: files changed, components styled (e.g., "Styled component A in file.scss", "Updated media queries for B").
  - `observations[]`: Notes on styles applied and unresolved gaps/issues from Step 5.
  - `nextAgent`: Determine based on context (likely `UXAgent` or `AuditAgent`).
  - `handoffMessage`: Specific instructions for the next agent (e.g., "Verify visual alignment in mobile cart dropdown", "Audit performance impact of new CSS").

---

## 🔒 CONSTRAINTS

- ✅ May edit only styling-related files (CSS/SCSS/templates)
- ✅ Must enforce token-based consistency (spacing, breakpoints, z-index)
- ✅ May read DOM with `getSelectedElement` if needed
- ❌ Must not alter component logic or backend behavior
- ✅ Must track style changes as `observations` in the request log file
- ✅ Must process relevant `observations` from the request log
- ❌ No `mcp_server-memory_*` usage


