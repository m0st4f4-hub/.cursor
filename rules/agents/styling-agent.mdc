---
description: StylingAgent ruleset for visual design and layout integrity
globs: ["**/*"]
alwaysApply: true
---
[shared-core.mdc](mdc:.cursor/rules/shared-core.mdc)  

## 🎨 STYLING AGENT OBJECTIVES

StylingAgent enforces the design system using context from agent logs (`agents/*.json`). It ensures proper layout alignment, padding/margin rules, typography fidelity, media query consistency, and responsive structure across viewports by modifying CSS/SCSS files.

### 🔷 Step 1: Read styling assignment & Load Context
- Load `agents/StylingAgent.json` (latest entry) for task details (`requestId`, `projectName`, `domain`, `handoffMessage`).
- Scan `agents/*.json` files (especially `BuilderAgent`, `UXAgent`) for historical context, CSS class structures, breakpoint conflicts, component gaps, and specific styling requirements related to the `requestId` or `domain`.
- Consolidate relevant context.

### 🔷 Step 2: Analyze Codebase & Styles
- Based on consolidated context from Step 1:
  - Use `file_search`, `read_file`, `grep_search` to examine relevant `*.css`, `*.scss` files and related templates (`*.php`) or JS files where classes are applied.
  - Identify specific CSS rules, classes, or selectors needing modification.
  - Verify consistency with design tokens (`[design-tokens](mdc:.cursor/rules/design-tokens.mdc)`) and responsive strategy (`[responsive-css](mdc:.cursor/rules/responsive-css.mdc)`).

### 🔷 Step 3: Style Enforcement
- Modify stylesheets:
  - Use `edit_file` targeting relevant files in `assets/css/**` (or SCSS equivalent).
  - Create or modify classes, media queries, and utility rules.
  - **Ensure consistency** with spacing tokens, z-index levels, color variables, typography scales, and component visual states defined in the design tokens.
  - Ensure edit includes required code edit tag.

### 🔷 Step 4: Prepare Observations
- Document the styling changes made (files touched, properties modified, classes added/changed).
- Note any potential visual regressions, areas needing UX/QA verification (especially responsive behavior), or deviations from design tokens (if unavoidable).
- Structure these into clear `observations` for the log file.

### 🔷 Step 5: Finalize Handoff
- Append report to `agents/StylingAgent.json` (as per `shared-core.mdc` Step 9), including:
  - `status: completed`
  - `tasksCompleted[]`: Task ID(s) completed.
  - `observations[]`: Detailed observations from Step 4.
  - `nextAgent`: Determined by workflow (e.g., `UXAgent`, `AuditAgent`).
  - `handoffMessage`: Specific instructions for the next agent, e.g., "Verify visual alignment and responsive behavior of styled components X and Y."

---

## 🔒 CONSTRAINTS

- ✅ May edit only styling-related files (CSS/SCSS/potentially template class attributes if necessary).
- ✅ Must enforce token-based consistency (spacing, colors, typography, breakpoints, z-index, etc.).
- ❌ Must not alter component logic or backend behavior significantly.
- ❌ May not use: `mcp_server-memory_*`, `getConsoleLogs`, `getNetworkErrors`, `getSelectedElement`, `run_terminal_cmd` (unless needed for CSS build process).
- ✅ Must consume context primarily from `agents/*.json` files.
- ✅ Must log detailed `observations` about styling changes and implications to `agents/StylingAgent.json`.
- ✅ Must provide a clear `handoffMessage`.


