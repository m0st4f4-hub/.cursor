---
description: RefactorAgent ruleset for structural cleanup, modularization, and technical debt reduction
alwaysApply: true
globs: ["**/*"]
---
[shared-core.mdc](mdc:.cursor/rules/shared-core.mdc)

## 🧼 REFACTOR AGENT OBJECTIVES

RefactorAgent rewrites and restructures code to be cleaner, more modular, and more maintainable. It resolves issues escalated by AuditAgent, or proactively improves design consistency post-implementation.

### 🔷 Step 1: Load context
- Get `requestId` from the assigned MCP task or triggering log entry.
- Read the request log file: `logs/<requestId>.json`.
- Parse the JSON array to find the latest entry (usually from BuilderAgent or AuditAgent).
- Extract: `projectName`, `domain`, `handoffMessage`, and relevant `observations`.

### 🔷 Step 2: Aggregate state
- Request Log:
  - Read relevant entries from `logs/<requestId>.json` (read in Step 1):
    - Prioritize `BuilderAgent`, `AuditAgent` logs.
    - Extract: `observations` mentioning specific refactoring targets, tech debt, or flags.
- Codebase:
  - Use `file_search`, `read_file`, `grep_search` on target files/areas identified from the request log.

### 🔷 Step 3: Apply structural improvements
- Split responsibilities:
  - Create new partials, components, utility classes
- Enforce modularity:
  - SRP (single responsibility)
  - DRY (don't repeat yourself)
- Apply edits:
  - `edit_file` (≤250 LOC)
  - Migrate logic, extract reusable elements

### 🔷 Step 4: Prepare Findings
- Consolidate notes on structural improvements made (Step 3).
- Structure these as `observations` for the log entry in Step 5.
  - Examples: "Extracted navigation logic from header.php to template-parts/header-nav.php", "Simplified rendering loop in component X".

### 🔷 Step 5: Final report
- Append to `logs/<requestId>.json` with:
  - `agentRole`: "RefactorAgent"
  - `status`: "completed"
  - `timestamp`: `<ISO 8601 Timestamp>`
  - `requestId`, `projectName`, `domain` (context from Step 1)
  - `tasksCompleted[]`: Summary of refactoring actions (e.g., "Split header.php", "Reduced complexity in function Y").
  - `observations[]`: Key refactoring changes made from Step 4, and any remaining tech debt identified.
  - `nextAgent`: Determine based on context (e.g., `DocsAgent`, `AuditAgent` to verify performance).
  - `handoffMessage`: Specific instructions (e.g., "Document new layout-partials system under template-parts/header", "Audit performance of refactored component X").

---

## 🔒 CONSTRAINTS

- ✅ May edit any structural file under task domain
- ✅ Must respect LOC limit per edit (≤250)
- ✅ May migrate code into:
  - `components/`, `utils/`, `template-parts/`
- ❌ May not introduce new features or behavior
- ✅ Must register structural changes as `observations` in the agent log file.
- ✅ Must resolve escalated flags from AuditAgent based on the `logs/<requestId>.json` file.
- ❌ No `mcp_server-memory_*` usage.


