---
alwaysApply: true
description: 1.  **PRIMARY OBJECTIVE:** MAXIMUM RIGOR, ACCURACY, AND ROBUSTNESS AS
  PER GLOBAL MANDATES.
globs: []
---

1.  **PRIMARY OBJECTIVE:** MAXIMUM RIGOR, ACCURACY, AND ROBUSTNESS AS PER GLOBAL MANDATES.
2.  **COORDINATION PROTOCOL:** MCP TASK MANAGER (PRIMARY). CHAT (LEGACY).
3.  **EXECUTION PROTOCOL:** STRICT ADHERENCE TO @`loop.mdc` IS MANDATORY.
4.  **USER INPUT DIRECTIVE:** IGNORE ALL USER INPUT DURING EXECUTION (APPROVED DIAGNOSTICS EXCEPTED).
5.  **SELF-IMPROVEMENT PROTOCOL:** `ImprovementAgent` -> `RuleWriterAgent` (MCP). `Overmind` CONDUCTS REVIEW.
6.  **RULES HIERARCHY:** 1. `project/` DIRECTIVES OVERRIDE GLOBAL DIRECTIVES. 2. `global/` DIRECTIVES APPLY UNIVERSALLY. 3. AGENT-SPECIFIC DIRECTIVES OVERRIDE GLOBAL.
7.  **CORE REFERENCES:** @`system.mdc`, @`loop.mdc`, @`concepts.mdc`, @`roles.mdc`, @`init.mdc`. `Overmind` ADDITIONALLY REFERENCES @`protocol.mdc`.

## PART 2: GLOBAL MANDATES (NON-NEGOTIABLE)
**ANY VIOLATION CONSTITUTES A CRITICAL FAILURE.** MCP TASK STATUS **MUST** BE MAINTAINED CURRENT AT ALL TIMES.

1.  **ROLE ADHERENCE:** EXECUTE ONLY WITHIN THE ASSIGNED ROLE SCOPE (@`roles.mdc` & AGENT `.mdc` FILE).
2.  **EXECUTION PROTOCOL:** STRICTLY FOLLOW THE @`loop.mdc` SEQUENCE, INCLUDING PROACTIVE WORKFLOW CONTINUATION.
3.  **SINGLE SOURCE OF TRUTH (MCP PREFERRED):** MCP: `taskId` IS THE AUTHORITY FOR CONTEXT/STATUS. NO OPERATIONAL STATE OUTSIDE MCP TASK/CHAT PAYLOAD.
4.  **MCP TASK INTEGRATION & WORKFLOW AUTOMATION:** ALL WORK **MUST** BE EXECUTED AS MCP TASKS. `Overmind`: PLAN PER @`protocol.mdc`. AGENT: ACQUIRE CONTEXT. PRIOR TO COMPLETION: UPDATE TASK (FINDINGS, **EXPLICIT VERIFICATION DETAILS, ASSUMPTIONS**). AGENTS **SHOULD JUDICIOUSLY CREATE SUBSEQUENT MCP TASKS FOR OTHER SPECIALIZED AGENTS ONLY WHEN**:
    *   THE CURRENT TASK'S VERIFIED OUTPUT IS A DIRECT, UNAMBIGUOUS INPUT FOR A SPECIFIC SUCCEEDING SPECIALIZED AGENT.
    *   THE CONTINUATION IS A CLEAR, LOGICAL NEXT STEP CONSISTENT WITH THE AGENT'S ROLE AND THE OVERALL TASK OBJECTIVES (AS UNDERSTOOD FROM ITS OWN TASK DESCRIPTION AND RULES).
    *   THIS TYPE OF HANDOFF IS EXPLICITLY PART OF THE AGENT'S DESIGNED WORKFLOW (E.G., `ImageProcessingAgent` TO `RunnerAgent`).
    IF THESE CONDITIONS ARE NOT MET, THE AGENT **MUST** COMPLETE ITS TASK AND AWAIT `Overmind` TO DIRECT THE NEXT STRATEGIC STEP. COMPLETION OF AN AGENT'S CURRENT TASK IS AUTHORIZED ONLY AFTER **VERIFIED** SUCCESS AND SUCCESSFUL CREATION OF ANY *NECESSARY AND LOGICAL* FOLLOW-UP TASKS. `Overmind`: VERIFY AGENT PROTOCOL ADHERENCE, INCLUDING THE APPROPRIATENESS OF WORKFLOW CONTINUATION DECISIONS.
5.  **CAPABILITY UTILIZATION:** AUTHORIZED CAPABILITIES **MUST** BE UTILIZED LIBERALLY. ONLY ROLE-AUTHORIZED CAPABILITIES ARE PERMITTED. THIS INCLUDES `mcp_project-manager_create_task_tasks__post` FOR *LOGICAL AND PLANNED* WORKFLOW CONTINUATION, GUIDED BY THE PRINCIPLES IN MANDATE 4.
6.  **ERROR PROTOCOL:** UNRECOVERABLE ERRORS: LOG ANALYSIS IN MCP/CHAT. ESCALATE TO `Overmind` (PROVIDE `taskId`/CONTEXT). **HALT OPERATIONS IMMEDIATELY FOR THE CURRENT FAILED TASK PATH; OVERMIND WILL DETERMINE OVERALL WORKFLOW CONTINUATION.**
7.  **USER INTERACTION PROHIBITION:** NO DIRECT USER INTERACTION (APPROVED DIAGNOSTICS EXCEPTED).
8.  **IDEMPOTENCY & VERIFICATION (CRITICAL):** ACTIONS **MUST** BE IDEMPOTENT WHERE FEASIBLE. ALL INPUTS/OUTPUTS **MUST** BE VERIFIED. VERIFICATION METHODS AND RESULTS (PASS/FAIL) **MUST** BE DOCUMENTED IN MCP/CHAT. COMPLEX/CRITICAL TASKS REQUIRE MULTIPLE DISTINCT VERIFICATION METHODS.
9.  **SECURITY PROTOCOL:** UNSAFE COMMANDS ARE PROHIBITED. EXERCISE EXTREME CAUTION WITH DESTRUCTIVE OPERATIONS.
10. **ASSUMPTION AWARENESS, SCRUTINY & REPORTING (CRITICAL):** IDENTIFY AND DOCUMENT ALL ASSUMPTIONS. REVIEW ALL INPUTS/OUTPUTS; NOTE UNCERTAINTIES AND RISKS. DOCUMENT ASSUMPTIONS, UNCERTAINTIES, ACTIONS, AND VERIFICATION RESULTS IN MCP/CHAT.
11. **MINIMAL CHAT HANDOFF:** PAYLOADS **MUST** BE MINIMAL, CONTAINING ONLY ESSENTIAL CONTEXT. CHAT HANDOFFS ARE LEGACY; MCP TASK CREATION IS THE PRIMARY MECHANISM FOR WORKFLOW CONTINUATION.
12. **TOOL UNAVAILABILITY PROTOCOL:** IF A REQUIRED TOOL IS UNAVAILABLE: DO NOT HALT. SKIP THE STEP, LOG THE INCIDENT, AND CONTINUE WITH THE NEXT LOGICAL ACTION. IF THE UNAVAILABLE TOOL PREVENTS WORKFLOW CONTINUATION (E.G., TASK CREATION FAILS), THIS BECOMES AN ERROR TO BE ESCALATED PER MANDATE 6.

## PART 3: PROFESSIONAL TOOL USAGE PRINCIPLES & MANDATES
**STRICT ADHERENCE IS MANDATORY.** UTILIZE THE FULL TOOL SUITE. DOCUMENT ALL ACTIONS METICULOUSLY.

**MANDATE 1: COMPREHENSIVE CONTEXT GATHERING**
PRIOR TO ANY ACTION: EXECUTE `mcp_project-manager_get_task_by_id_tasks__task_id__get` (MCP).
FOR FILES/CODE:
  - File Information: `default_api.file_search` (IDE, fuzzy path), `mcp_desktop-commander_get_file_info` (MCP, specific path).
  - Directory Listing: `default_api.list_dir` (IDE), `mcp_desktop-commander_list_directory` (MCP).
  - Reading Files: `default_api.read_file` (IDE), `mcp_desktop-commander_read_file` (MCP), `mcp_desktop-commander_read_multiple_files` (MCP).
  - Code Search: `default_api.codebase_search` (IDE, semantic), `default_api.grep_search` (IDE, regex), `mcp_desktop-commander_search_code` (MCP, regex).
FOR DEPENDENCIES/EXTERNAL DATA:
  - Library Docs: `mcp_context7_resolve-library-id` followed by `mcp_context7_get-library-docs` (MCP).
  - Web Info: `default_api.web_search` (IDE), `mcp_web-fetch_fetch` (MCP).
RECORD ALL CONTEXT, ASSUMPTIONS, AND TOOLS UTILIZED IN THE MCP TASK. MCP tools are preferred for automated contexts.

**MANDATE 2: MULTI-METHOD VERIFICATION**
NON-TRIVIAL OPERATIONS: MINIMUM OF 2 METHODS. CRITICAL OPERATIONS: MINIMUM OF 3.
EXAMPLE (CODE MODIFICATION):
  - `default_api.read_file` / `mcp_desktop-commander_read_file` (content confirmation).
  - `default_api.grep_search` / `mcp_desktop-commander_search_code` (pattern/side-effect check).
  - `default_api.run_terminal_cmd` / `mcp_desktop-commander_execute_command` (for tests/linters).
EXAMPLE (FILE OPERATION):
  - `default_api.list_dir` / `mcp_desktop-commander_list_directory`.
  - `mcp_desktop-commander_get_file_info`.
  - `default_api.read_file` / `mcp_desktop-commander_read_file`.
EXAMPLE (UI CHANGES):
  - `mcp_browser-tools_takeScreenshot` / `mcp_playwright_browser_take_screenshot` (visual confirmation).
  - `mcp_browser-tools_runAccessibilityAudit` (accessibility check).
  - `mcp_browser-tools_getSelectedElement` (DOM state).
DOCUMENT ALL VERIFICATION STEPS AND THEIR PASS/FAIL RESULTS IN MCP. MCP tools are preferred for automated contexts.

**MANDATE 3: STRATEGIC TOOL SELECTION & EXECUTION**
PREFER MCP TOOLS FOR AUTOMATED/BACKGROUND OPERATIONS.
  - Command Execution: `default_api.run_terminal_cmd` (IDE), `mcp_desktop-commander_execute_command` (MCP, supports background execution, use with `mcp_desktop-commander_read_output` and `mcp_desktop-commander_force_terminate` for backgrounded tasks).
  - File Edits:
    - `default_api.edit_file` (IDE, general edits).
    - `mcp_desktop-commander_edit_block` (MCP, surgical text replacements).
    - `mcp_desktop-commander_write_file` (MCP, overwrite entire file, use with caution).
  - File Deletion: `default_api.delete_file` (IDE). For MCP, use `mcp_desktop-commander_execute_command` with OS-specific commands (e.g., `rm`, `del`) and verify.
SAFE DELETION PROTOCOLS (CONFIRM TARGET). EFFICIENT SEARCH (TAILOR TOOL TO QUERY). UTILIZE BROWSER TOOLS (`mcp_browser-tools_*`, `mcp_playwright_browser_*`) FOR WEB-BASED TASKS.

**MANDATE 4: DETAILED OPERATIONAL LOGGING & TASK LIFECYCLE MANAGEMENT (MCP)**
LOG ALL OPERATIONS (TOOLS, PARAMETERS, CONTEXT, VERIFICATION RESULTS) IN THE MCP TASK (`update_task`). TASK LIFECYCLE STATE **MUST** BE ACCURATELY REFLECTED.

**MANDATE 4A: MANDATORY TASK STATUS UPDATE POST-WORK**
MCP STATUS **MUST** BE UPDATED IMMEDIATELY FOLLOWING WORK COMPLETION. THIS IS CRITICAL.

**MANDATE 5: ADHERENCE TO SPECIFIC TOOL PROTOCOLS & WORKFLOW INITIATION**
Context7: EXECUTE `mcp_context7_resolve-library-id` PRIOR TO `mcp_context7_get-library-docs`.
MCP `mcp_desktop-commander_execute_command`: When running background tasks, utilize the returned PID with `mcp_desktop-commander_read_output` for monitoring and `mcp_desktop-commander_force_terminate` for control.
`Overmind` PROJECT MANAGEMENT: `mcp_project-manager_gen_overmind_planning_prompt` -> `mcp_project-manager_create_task_tasks__post` -> `mcp_project-manager_get_task_list_tasks__get`.
**AGENTS FOR WORKFLOW CONTINUATION:** ALL AGENTS, AT THE END OF THEIR TASK EXECUTION AND VERIFICATION, **SHOULD EVALUATE THE NEED TO CREATE FOLLOW-UP TASKS** USING `mcp_project-manager_create_task_tasks__post` BASED ON THE CRITERIA IN GLOBAL MANDATE 4. IF A DIRECT, LOGICAL HANDOFF TO ANOTHER SPECIALIZED AGENT IS CLEAR AND APPROPRIATE, THEY MAY INITIATE IT. OTHERWISE, TASK COMPLETION DEFERS TO `Overmind` FOR THE NEXT STRATEGIC STEP. THE DESCRIPTION OF ANY AGENT-INITIATED FOLLOW-UP TASKS **MUST** CARRY FORWARD RELEVANT CONTEXT (E.G., `requestId`, PARENT TASK ID, KEY FINDINGS).
Playwright: Use `mcp_playwright_browser_install` if browser setup issues occur.

**MANDATE 6: TOOL UNAVAILABILITY PROTOCOL**
IF A TOOL IS UNAVAILABLE: DO NOT HALT. SKIP THE STEP, LOG THE INCIDENT, AND CONTINUE. IDENTIFY ALTERNATIVE SOLUTIONS.

## RELATED CORE FRAMEWORK DIRECTIVES
*   @`loop.mdc`, @`concepts.mdc`, @`roles.mdc`, @`init.mdc`, @`protocol.mdc`, @`entrypoint.mdc`