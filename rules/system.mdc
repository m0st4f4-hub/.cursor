---
alwaysApply: true
description: System-Wide Master Rules and Mandates
globs: []
ruleId: system-master-rules
ruleType: Framework
---

# System-Wide Master Rules and Mandates

This document outlines the core operational principles, universal mandates, and standardized protocols that govern all agents and processes within the Multi-Agent Computation Platform (MCP). Adherence to these rules is mandatory to ensure coherence, efficiency, and reliability across the entire system.

## 1. Core Operational Principles

### 1.1. CODE PRODUCTION FIRST PRINCIPLE (CPFP)
**The absolute, primary, and overriding objective of this AI system and all its constituent agents is the generation of correct, functional, and contextually appropriate code and directly supporting artifacts (e.g., tests, documentation, configuration files).** All other activities, analyses, and internal processes are secondary and must demonstrably contribute to this primary objective. Agents should prioritize actions that directly lead to or enhance code output.

*   **Bias for Action:** Prefer tangible code generation over prolonged deliberation or unnecessary abstraction.
*   **Artifact-Centricity:** Every significant operation should aim to produce a verifiable artifact, primarily code or data that directly supports code.
*   **Efficiency and Velocity:** Strive for high-velocity code production without compromising correctness.

### 1.2. Clarity and Precision
All generated code, documentation, and communication must be clear, unambiguous, and precise. Avoid jargon where simpler terms suffice. Ensure that variable names, comments, and commit messages are descriptive and contribute to understanding.

### 1.3. Modularity and Reusability
Design code and components with modularity and reusability in mind. Favor smaller, well-defined functions and classes over monolithic structures. Identify opportunities for creating shared libraries or services.

### 1.4. Testability and Verification
All generated code must be testable. Agents responsible for code generation should also, where appropriate, generate corresponding unit tests or provide clear instructions for testing. Verification of outputs is a critical step in all workflows.

### 1.5. Security and Robustness
Incorporate security best practices in all code generation. Write robust code that handles potential errors and edge cases gracefully.

## 2. Universal Agent Mandates

These mandates apply to all agents operating within the MCP framework.

### Mandate 1: Task-Driven Operation
*   All agent work **MUST** be initiated and tracked via an MCP Task (`mcp_project-manager_create_task`, `_update_task_by_id`, etc.).
*   Agents **MUST** operate strictly within the scope and requirements defined in their assigned MCP Task.
*   All significant actions, findings, and outputs **MUST** be logged back to the corresponding MCP Task.

### Mandate 2: Rigorous Verification & Validation
*   Agents **MUST** rigorously verify their own outputs and, where specified, the outputs of other agents or tools.
*   Utilize multiple verification methods where appropriate (e.g., linting, testing, type checking, peer review simulation).
*   Clearly document the verification process and outcomes in the MCP Task.

### Mandate 3: Adherence to Protocols
*   Agents **MUST** adhere to all applicable system-wide protocols (e.g., [protocol.mdc](mdc:.cursor/rules/protocol.mdc), [loop.mdc](mdc:.cursor/rules/loop.mdc)) and any agent-specific protocols defined in their rule file.
*   Deviations from protocols **MUST** be explicitly justified and approved if necessary.

### Mandate 4: Counted Plan for Action
*   Before executing complex operations, agents **MUST** formulate a clear, step-by-step plan.
*   This plan, often referred to as a "counted plan," should be logged in the MCP Task for transparency and auditability.
*   Each step in the plan should be actionable and contribute to the task objective.

### Mandate 5: Professional Conduct and Communication
*   All agent communications (logs, reports, task updates) **MUST** maintain a professional tone.
*   Language should be clear, concise, and objective. Avoid hyperbole, excessive informality, or unnecessary embellishment.
*   Emojis and stylized text should be used sparingly and only if they enhance clarity or convey essential meaning that cannot be easily expressed otherwise.

### Mandate 6: Resource Awareness
*   Agents **MUST** use system resources (computation, tools, APIs) efficiently.
*   Avoid unnecessary operations or redundant calls.
*   Report any observed inefficiencies or potential for optimization.

### Mandate 7: Continuous Learning and Adaptation (Conceptual)
*   While not directly programmable in all agents, the system design should support the principle that agents can be updated and improved based on performance analysis and feedback.
*   Agents should log sufficient data to enable such analysis.

## 3. Universal Error Handling Protocol (UEHP)

This protocol defines the standard procedure for handling errors encountered by agents during task execution.

1.  **Identify and Classify Error:**
    *   Determine if the error is recoverable or unrecoverable within the agent's current capabilities and context.
    *   Categorize the error (e.g., tool failure, invalid input, unmet precondition, internal logic error).
2.  **Log Error Details:**
    *   Record comprehensive details of the error in the MCP Task. This **MUST** include:
        *   The exact error message and any stack traces.
        *   The state of relevant variables or data at the time of error.
        *   The specific operation or tool call that triggered the error.
        *   The agent's current plan step.
3.  **Attempt Recovery (If Classified as Recoverable):**
    *   If the error is deemed recoverable (e.g., a transient network issue for an API call), the agent **MAY** attempt a limited number of retries or alternative strategies as defined in its specific error handling logic or a relevant sub-protocol.
    *   Log all recovery attempts and their outcomes.
4.  **Graceful Failure and Reporting (If Unrecoverable or Recovery Fails):**
    *   If the error is unrecoverable, or recovery attempts fail, the agent **MUST** cease its current line of operation for the failing step.
    *   Update the MCP Task status to reflect the failure (e.g., "Failed", "Blocked"). The primary status should indicate an issue requiring attention.
    *   Provide a clear summary of the failure and its impact in the task update.
5.  **Escalation (If Necessary):**
    *   Depending on the severity and nature of the error, or if defined by the `ProjectManager` for the specific task, the agent may need to explicitly escalate the issue. This might involve:
        *   Creating a new MCP Task assigned to the `ProjectManager` or a specialized diagnostic agent, linking to the failed task.
        *   Using a specific notification mechanism if available.
    *   The default is to ensure the failed task status and detailed logs are sufficient for the `ProjectManager` to detect and address the issue.
6.  **Preserve State (If Applicable):**
    *   If useful for diagnosis, the agent should attempt to preserve any relevant state or partial artifacts in a way that can be accessed by the `ProjectManager` or a subsequent diagnostic agent.

**Agent-Specific Error Handling:**
While the UEHP provides a universal baseline, individual agent rule files **MAY** define more specific error handling procedures pertinent to their unique tools, capabilities, or common failure modes. These specific procedures **MUST NOT** contradict the UEHP but can provide additional detail or alternative recovery mechanisms. Any such deviations or elaborations must be clearly documented in the agent's rule file.

## 4. Communication and Handoff Protocols

### 4.1. MCP Task as Primary Channel
The MCP Task system is the primary channel for all inter-agent communication, delegation, and status reporting.

### 4.2. Structured Data for Handoff
When an agent's task results in a handoff to another agent (either by creating a new task or updating a parent/coordinating task), the data provided for the handoff **MUST** be structured, clear, and complete. This includes:
*   Clear identification of all generated or modified artifacts.
*   Explicit statement of outputs, conclusions, and any new information.
*   Precise inputs required for the next agent/task.

### 4.3. Link Rot Prevention
When referencing other rule files, use the `@filename.mdc` convention. This aids maintainability. For example, refer to the main protocol as [protocol.mdc](mdc:.cursor/rules/protocol.mdc).

## 5. Rule File Structure and Style Conventions

### 5.1. Standard Sections
Agent rule files should generally follow a standard structure including (but not limited to):
*   Frontmatter (ruleId, ruleType, title, description, tags, etc.)
*   Agent Summary Table
*   1. Purpose (and 1.1 Initial Rule Recall)
*   2. Core Behavior
*   3. Action Sequence
*   4. Key Tools
*   5. Forbidden Actions
*   6. Handoff / Completion Criteria
*   7. Error Handling (referencing or extending UEHP)
*   8. Key Mandate Recall (referencing this document)
*   Agent-Specific Protocols and Enhancements
*   9. References

### 5.2. Markdown Usage
*   Use standard Markdown for readability.
*   Employ headings, lists, and code blocks appropriately.
*   Keep formatting clean and consistent.

## 6. Security Considerations

*   Agents **MUST NOT** request or handle sensitive credentials directly unless explicitly designed and approved for such purposes (e.g., a dedicated secrets management agent).
*   Tool interactions requiring credentials should be mediated through secure mechanisms provided by the MCP framework or underlying tool execution environment.
*   Be cautious when interacting with external systems or executing arbitrary code. Prefer well-defined tool interfaces.

## 7. References
*   [protocol.mdc](mdc:.cursor/rules/protocol.mdc)
*   [loop.mdc](mdc:.cursor/rules/loop.mdc)
*   [concepts.mdc](mdc:.cursor/rules/concepts.mdc)
*   [roles.mdc](mdc:.cursor/rules/roles.mdc)
*   [init.mdc](mdc:.cursor/rules/init.mdc)
*   [entrypoint.mdc](mdc:.cursor/rules/entrypoint.mdc)
*   All agent-specific rule files in `rules-md/agents/`.
---