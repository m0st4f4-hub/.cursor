---
alwaysApply: true
description: Core Framework Concepts & Glossary
globs: []
ruleId: core-concepts
ruleType: Framework
---

# Core Concepts & Glossary

This document defines fundamental concepts and terminology used within the agent framework.

## 1. Fundamental Constructs & Nomenclature

**`requestId`**
:   **Definition:** A unique identifier for a task sequence or workflow, correlating actions, logs, and artifacts.
:   **Format:** String (immutable).
:   **Application:** MCP calls, code edit tags, logging, inter-agent context.
:   **Issuance:** `ProjectManager` or an external trigger.
:   **Cross-reference:** [system.mdc](mdc:.cursor/rules/system.mdc) (Mandate 10), [loop.mdc](mdc:.cursor/rules/loop.mdc) (Context Fetching).

**Agent Role**
:   **Definition:** A specialized unit designed for designated tasks. Behavior, capabilities, and directives are defined in its `.mdc` rule file.
:   **Cross-reference:** [roles.mdc](mdc:.cursor/rules/roles.mdc), `rules-md/agents/`.
:   **Cross-reference:** [system.mdc](mdc:.cursor/rules/system.mdc) (Mandate 1), [loop.mdc](mdc:.cursor/rules/loop.mdc) (Fetching Role Specification).

**Framework**
:   **Definition:** The external engine executing the agent lifecycle according to established rules and coordination protocols. Not an agent itself.
:   **Duties:** Agent activation, tool provisioning, rule management, lifecycle control, mandate enforcement.
:   **Cross-reference:** [loop.mdc](mdc:.cursor/rules/loop.mdc), [system.mdc](mdc:.cursor/rules/system.mdc).

**Rules**
:   **Definition:** `.mdc` files stipulating behavior, standards, workflows, and constraints. Processed by the Framework, executed by Agents.
:   **Designation:** `.cursor/rules/` (runtime working directory, if applicable), `rules-md/` (primary source and project-specific rules).
:   **Cross-reference:** [system.mdc](mdc:.cursor/rules/system.mdc) (Hierarchy, Mandates), [init.mdc](mdc:.cursor/rules/init.mdc).

## 2. Governing Operational Principles

**Autonomous Execution**
:   **Definition:** Agents execute independently upon activation, governed by rules and task context.
:   **Mandate:** User input during autonomous execution should generally be ignored (diagnostics may be an exception).
:   **Cross-reference:** [system.mdc](mdc:.cursor/rules/system.mdc) (Mandate 7), [loop.mdc](mdc:.cursor/rules/loop.mdc) (Activation).

**Coordination Mechanisms**
:   **Definition:** Protocols for task assignment, management, and state tracking.
:   **MCP Task Manager (Primary):** Preferred method. `ProjectManager` polling is standard. Context, status, and results reside in MCP tasks.
:   **Chat-Driven (Legacy/Fallback):** Control via direct chat triggers. Context and results reside in payload.

**Sequential Activation**
:   **Mandate:** Typically, only one agent is active per `requestId` at a time for a given task chain focus. Parallelism is managed by the `ProjectManager` through distinct task delegation.
:   **Cross-reference:** [system.mdc](mdc:.cursor/rules/system.mdc).

**Self-Improvement Loop**
:   **Definition:** `EvolutionaryAnalyst` and `DirectiveImplementer` (or similar roles) can refine the ruleset based on operational experience.
:   **Mandate:** This process **MUST** be conducted via MCP tasks or explicit Chat triggers.
:   **Cross-reference:** [system.mdc](mdc:.cursor/rules/system.mdc), [roles.mdc](mdc:.cursor/rules/roles.mdc).

**Rules Hierarchy**
:   **Definition:** Established precedence for resolving rule conflicts.
:   **Mandate:** Adherence is absolute: Project-specific rules (e.g., in a sub-directory of `rules-md/` or `.cursor/rules/project/` if used) can override more general rules. Global or core rules (e.g., in `rules-md/` or `.cursor/rules/global/`) apply unless overridden.
:   **Cross-reference:** [system.mdc](mdc:.cursor/rules/system.mdc), [init.mdc](mdc:.cursor/rules/init.mdc).

## 3. Essential Operational Mechanisms

**Global Mandates**
:   **Definition:** Non-negotiable directives and constraints. All agents **MUST** adhere.
:   **Cross-reference:** [system.mdc](mdc:.cursor/rules/system.mdc) (Part 2).

**Code Edit Tag**
:   **Definition:** Standardized comment block. **MUST** be at the commencement of any edited code file for traceability.
:   **Mandate:** Employ language-appropriate comment style.
:   **Format Example:**
    ```
    // Task ID: <taskId>
    // Agent Role: <agent_role>
    // Request ID: <requestId>
    // Project: <projectName> (Optional)
    // Timestamp: <UTC_timestamp_ISO8601_Zulu>
    ```
:   **Cross-reference:** [loop.mdc](mdc:.cursor/rules/loop.mdc).

## 4. Standard Unit Execution Cycle

Active agents shall execute the following sequence (Refer to [loop.mdc](mdc:.cursor/rules/loop.mdc) for detailed specifications):
1.  **Activation:** Framework initiates activation.
2.  **Context Acquisition:** Receive `taskId` (MCP) / payload (Chat). Gather relevant context.
3.  **Rule Fetching:** Retrieve own role specification and relevant canonical rules.
4.  **Turn Planning:** Internal determination of actions based on rules/context.
5.  **Execution & Verification:** Perform role-assigned actions; verify results rigorously.
6.  **State Update/Handoff/Finalization:** Report status (MCP/Chat), including verification data and assumptions. Terminate turn.

## 5. Critical Directive Repositories

*   **`rules-md/`**: The primary source for project-specific and core rule files.
*   **`.cursor/rules/`**: Often a runtime or working copy directory for rules, potentially organized with subdirectories like `global/` or `project/`.
    *   `global/`: May contain base ruleset (e.g., `system.mdc`, `loop.mdc`) applicable universally unless overridden.
    *   `project/`: May contain directives specific to the current project/workspace, overriding global rules.

## 6. Fundamental Integration Protocols

**Fetching Rules**
:   **Mandate:** Full rule content **MUST** be retrieved and internalized. Summaries are insufficient.
:   **Tooling:** `default_api.fetch_rules` (IDE). For MCP-driven agents, `mcp_desktop-commander_read_file` if rule paths are known.

**MCP Task Management**
:   **Mandate:** If using MCP, operations **MUST** be used per relevant framework rules (fetch context, update description with findings/verification, mark complete only after verification).
:   **Tooling:** Key tools include `mcp_project-manager_get_task_by_id`, `mcp_project-manager_update_task_by_id`, `mcp_project-manager_create_task`, and `mcp_project-manager_get_tasks`.

**External Library Documentation**
:   **Mandate:** For external documentation, ID resolution (`mcp_context7_resolve-library-id`) **MUST** precede document retrieval (`mcp_context7_get-library-docs`).

> All agents and framework components must reference and comply with the universal mandates defined in [system.mdc](mdc:.cursor/rules/system.mdc).

## Behavioral Enhancements & Advanced Protocols

See [system.mdc](mdc:.cursor/rules/system.mdc) for Universal Advanced Operational Protocols.

## References
*   [system.mdc](mdc:.cursor/rules/system.mdc)
*   [loop.mdc](mdc:.cursor/rules/loop.mdc)
*   This document ([concepts.mdc](mdc:.cursor/rules/concepts.mdc))
*   [init.mdc](mdc:.cursor/rules/init.mdc)
*   [protocol.mdc](mdc:.cursor/rules/protocol.mdc)
*   [roles.mdc](mdc:.cursor/rules/roles.mdc)