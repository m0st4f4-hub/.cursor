---

alwaysApply: true
description: Rule Definition Metadata (V1)
globs: []
---

# Rule Definition Metadata (V1)
ruleId: core-concepts
ruleType: Framework
title: Core Framework Concepts & Glossary
# ðŸ“– Core Concepts & Glossary

**Purpose:** Understand foundational concepts, terms, mechanisms. **MUST** refer for clarification.

## 1. Core Entities & Identifiers

`requestId`
:   **Definition:** Unique ID for task sequence/workflow; correlates actions/logs.
:   **Format:** String.
:   **Usage:** MCP calls, Code Edit Tags, logging, inter-agent context.
:   **Origin:** `Overmind` / External Trigger.
:   **Related:** @`system.mdc` (Mandate 10), @`loop.mdc` (Context Fetching).

Agent Role
:   **Definition:** Specialized unit for specific tasks. Behavior/capabilities/rules in its `.mdc` file.
:   **Reference:** @`roles.mdc`, `@agents/`.
:   **Related:** @`system.mdc` (Mandate 1), @`loop.mdc` (Fetching Role Spec).

Framework
:   **Definition:** External engine managing agent lifecycle per rules & coordination. **Not an agent.**
:   **Responsibilities:** Agent Activation, Tool Provisioning, Rule Management, Lifecycle Control, Mandate adherence.
:   **Reference:** @`loop.mdc`, @`system.mdc`.

Rules
:   **Definition:** `.mdc`/`.mdcc` files defining behavior, standards, workflows, constraints. Processed by Framework, interpreted by Agents.
:   **Location:** `.cursor/rules/` (Runtime), `rules-md/` (Source).
:   **Reference:** @`system.mdc` (Hierarchy, Mandates), @`init.mdc`.

## 2. Operational Concepts

Autonomous Execution
:   **Definition:** Agents operate independently once activated, driven by rules & task context.
:   **Mandate:** **MUST** ignore user input (except approved diagnostics).
:   **Reference:** @`system.mdc` (Mandate 7), @`loop.mdc` (Activation).

Coordination Mechanisms
:   **Definition:** Methods for task assignment, management, state tracking.
:   **MCP Task Manager (Preferred):** Primary. `Overmind` typically polls. Context/status/results in MCP tasks.
:   **Chat-Driven (Legacy/Fallback):** Control via direct Chat Triggers. Context/results in payload.

Sequential Activation
:   **Mandate:** One agent active per `requestId` at a time. Parallel forbidden.
:   **Reference:** @`system.mdc`.

Self-Improvement Loop
:   **Definition:** `ImprovementAgent`/`RuleWriterAgent` refine ruleset from experience.
:   **Mandate:** Process **MUST** be via MCP tasks/Chat Triggers per @`system.mdc`.
:   **Reference:** @`system.mdc`, @`roles.mdc`.

Rules Hierarchy
:   **Definition:** Precedence for rule conflicts.
:   **Mandate:** **MUST** follow: 1. Project (`.cursor/rules/project/`) overrides Global. 2. Global (`.cursor/rules/global/`) apply generally. 3. Agent-specific overrides Global for that agent.
:   **Reference:** @`system.mdc`, @`init.mdc`.

## 3. Mandatory Mechanisms

Global Mandates
:   **Definition:** Non-negotiable principles/constraints all agents **MUST** always adhere to.
:   **Reference:** @`system.mdc` (Part 2). Supreme unless narrowly overridden.

Code Edit Tag
:   **Definition:** Standardized comment block **MUST** be at start of edited code file. Provides metadata.
:   **Mandate:** Use language-appropriate comment style.
:   **Format:**
    ```
    COMMENT_START Task ID: <taskId> // Optional, recommended for MCP
    COMMENT_START Agent Role: <agent_role>
    COMMENT_START Request ID: <requestId>
    COMMENT_START Project: <projectName> // Optional
    COMMENT_START Timestamp: <UTC timestamp> // ISO 8601 Z
    COMMENT_END // Optional
    ```
:   **Related:** @`loop.mdc`.

## 4. Core Agent Behavior Summary (Ref: @`loop.mdc`)

Active agents follow sequence (details @`loop.mdc`):
1.  **Activate:** Framework activates (trigger/MCP state).
2.  **Get Context:** Receive `taskId` (MCP) / payload (Chat).
3.  **Fetch Rules:** Fetch own role spec.
4.  **Plan Turn:** Internally determine steps (rules/context).
5.  **Execute & Verify:** Perform role actions, verify results.
6.  **Update/Handoff/Finalize:** Report status (MCP/Chat), incl. verification/assumptions, terminate turn.
:   **Reference:** @`system.mdc` (Mandates 4, 10).

## 5. Key Rule Directories (Runtime: `.cursor/rules/`)

`global/`
:   **Definition:** Base ruleset (e.g., @`system.mdc`, @`loop.mdc`). Apply generally unless overridden.
:   **Reference:** @`init.mdc`.

`project/`
:   **Definition:** Rules for current project/workspace.
:   **Mandate:** **MUST** override conflicting `global/` rules.
:   **Reference:** @`init.mdc`, @`system.mdc`.

## 6. Core Integration Rules

**MUST** follow for specific core operations:

Fetching Rules
:   **Mandate:** **MUST** get full rule content for more detail than summaries.
:   **Tooling:** `fetch_rules`.
:   **Related:** @`loop.mdc`.

MCP Task Management
:   **Mandate:** If MCP (preferred), **MUST** use MCP ops per @`loop.mdc` & @`system.mdc` (fetch context, update desc w/ findings/verify, mark done only post-verify).
:   **Reference:** @`system.mdc` (Mandate 4), @`loop.mdc`.

External Library Documentation
:   **Mandate:** For external docs, **MUST** first resolve ID (`mcp_context7_resolve-library-id`), then get docs (`mcp_context7_get-library-docs`) *before* using info.
:   **Reference:** @`system.mdc` (Mandate 5).