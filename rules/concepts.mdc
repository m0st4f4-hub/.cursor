---
# Rule Definition Metadata (V1)
ruleId: core-concepts
ruleType: Framework
title: Core Framework Concepts & Glossary
description: Defines non-negotiable core concepts, terminology, entities, and mandatory mechanisms. Foundational reference and glossary.
schemaVersion: 1
conformsTo: null
tags: [core, framework, concepts, glossary, definitions]
lastUpdated: null
status: Active
---

# ðŸ“– Core Concepts & Glossary

**Purpose:** Foundational reference defining core concepts, terminology, and mandatory mechanisms.

## 1. Core Entities & Identifiers

`requestId`
:   **Definition:** Unique identifier for a task sequence/workflow.
:   **Format:** String.
:   **Usage:** MCP calls, Code Edit Tags.
:   **Origin:** Overmind / External Trigger.

Agent Role
:   **Definition:** Specialized functional unit (e.g., `BuilderAgent`). Defined in own `.md` file.
:   **Reference:** @`roles.md` (Registry).

Framework
:   **Definition:** External execution engine managing agent lifecycle based on rules & coordination. **Not an agent.**
:   **Responsibilities:** Activation, Tool Provision, Rule Management, Lifecycle.
:   **Reference:** @`loop.md`.

Rules
:   **Definition:** `.md`/`.mdc` files defining behavior, standards, workflow. Processed by Framework/Agents.
:   **Location:** `.cursor/rules/` (runtime), `rules-md/` (source).
:   **Reference:** @`system.md`.

Tools
:   **Definition:** Capabilities for environment interaction (MCP, FS, terminal, API). Availability per-role.

## 2. Operational Concepts

Autonomous Execution
:   Agents operate independently, activated by Framework (Trigger/MCP state), driven by rules/context. **MUST** ignore user input (except diagnostics).

Coordination Mechanisms
:   **MCP Task Manager (Preferred):** Control via `Overmind` polling `get_next_task`. Context/state in MCP tasks.
:   **Chat-Driven (Legacy/Fallback):** Control via Chat Triggers. Context in payload.

Sequential Activation
:   **MUST:** Only one agent active per `requestId` at a time. No parallel execution within a request.

Self-Improvement Loop
:   **MUST:** Secondary goal. `ImprovementAgent`/`RuleWriterAgent` refine rules via MCP/Chat. See @`system.md`.

Rules Hierarchy
:   **MUST:** 1. `project/` (Overrides Global). 2. `global/`. 3. Agent-specific. See @`system.md`.

## 3. Mandatory Mechanisms & Tooling

Global Mandates
:   **MUST:** Adhere to @`system.md` unless overridden by role/project rules.

Key Tools (Baseline)
:   `fetch_rules`: **MUST** use to load own role spec.
:   `edit_file`: Code modification.
:   `run_terminal_cmd`: Shell commands, scripts, builds, tests.
:   Context Tools: `web_search`, `mcp_context7_*`, `codebase_search`, etc.
:   MCP Tools (`mcp_taskmanager_*`): Core for MCP Coordination.
:   `delete_file`: Use with extreme caution.
:   `reapply`: Retry failed edits.

Common Custom Tools (`tools/`)
:   Helper scripts run via `run_terminal_cmd` (e.g., `parse_git_status.py`, `verify_environment.py`, `run_linter.py`).

Code Edit Tag
:   **MUST:** Use language-appropriate comment block at start of `code_edit` parameter for `edit_file` on CODE files.
:   **Format:**
    ```
    COMMENT_START Task ID: <taskId> // Optional
    COMMENT_START Agent Role: <agent_role>
    COMMENT_START Request ID: <requestId>
    COMMENT_START Project: <projectName> // Optional
    COMMENT_START Timestamp: <UTC timestamp> // ISO 8601 Z
    COMMENT_END // Optional
    ```

## 4. Core Agent Behavior Summary (Ref: @`loop.md`)

1.  Activate (Framework).
2.  Get Context (Trigger/MCP Task).
3.  Fetch Own Rules.
4.  Plan Turn (Internal).
5.  Execute & Verify.
6.  Update State / Handoff & Finalize (MCP/Chat).

## 5. Key Rule Directories (Runtime: `.cursor/rules/`)

`global/`
:   Base ruleset, applies generally unless overridden. Synced externally (submodule).

`project/`
:   Current project-specific rules. **MUST** override conflicting `global/` rules.

## 6. Core Tool Integration Rules

`fetch_rules`
:   **MUST** use to retrieve full rule content when needed beyond summaries.

`mcp_taskmanager_*`
:   **MUST** use per @`loop.md` and @`system.md` for MCP coordination.

`context7_*`
:   Agents needing external lib/framework docs **MUST** use `resolve-library-id` then `get-library-docs` before relying on that info.

## 7. References

*   [System Prompt & Mandates](mdc:system.mdc)
*   [Agent Roles & Responsibilities](mdc:roles.mdc)
*   [Framework & Execution Loop](mdc:loop.mdc)
*   [Initialization Procedure](mdc:init.mdc)
