---
description: "[TODO: Add description]"
globs:
  - "*.*"
alwaysApply: false
---

# CORE CONCEPTS (MANDATORY DEFINITIONS)

- **`requestId`:** REQUIRED Unique identifier for task sequence. Used for logs, MCP tasks, edit tags.
- **Agent Roles:** REQUIRED Specialized functional units (e.g., `BuilderAgent`). Defined in [Agent Roles](mdc:agent-roles.mdc).
- **Log File (`logs/<requestId>.json`):** REQUIRED Single source of truth. Append-only JSON array. Defines state, coordination. See [Log Handling](mdc:log-handling.mdc).
- **`nextAgent` Field:** REQUIRED control signal in log. Sole trigger for FRAMEWORK'S IMMEDIATE AUTOMATIC transition. Agent MUST log correctly. See [Log Handling](mdc:log-handling.mdc).
- **ACTION IMPERATIVE:** MANDATORY principle. Continuous execution, automatic transition via `nextAgent`. NO WAITING. See [Execution Loop](mdc:execution-loop.mdc).
- **Tools:** MANDATORY capabilities for environment interaction (MCP, file system, terminal, custom). See [Shared Core](mdc:shared-core.mdc).
- **Rules (`.cursor/rules/`, `rules-md/`):** MANDATORY `.mdc` files defining behavior, standards, workflow. See [System Prompt](mdc:system-prompt.mdc).
- **Framework:** REQUIRED External execution engine. Reads log, loads rules, invokes `nextAgent`, enforces loop. See [System Prompt](mdc:system-prompt.mdc).
- **Autonomous Execution:** MANDATORY. Agents operate independently, driven by log state. User interaction ONLY for requested diagnostics (Loop Step 6).
- **Log-Driven Coordination:** MANDATORY. Log file is sole source of truth for state, `handoffMessage`, `nextAgent` trigger.
- **Specialized Agents:** REQUIRED. Each role has specific function defined in its `.mdc` file.
- **Immediate Transitions:** MANDATORY. Framework ensures instantaneous transitions via `nextAgent`. NO WAITING.
- **Direct Peer Handoffs:** REQUIRED where logical. Agents MUST set `nextAgent` to peer (e.g., `BuilderAgent` -> `AuditAgent`) for efficiency. Return to `Overmind` for planning/escalation/completion.
- **Self-Improvement Loop:** MANDATORY framework goal. Agents (`ImprovementAgent`, `RuleWriterAgent`) MUST analyze performance and automatically refine/generate rules (`.mdc`).
- **Global Rules (`.cursor/rules/global/`):** REQUIRED foundational rules. MUST be followed unless overridden by Project Rules.
- **Project Rules (`.cursor/rules/project/`):** REQUIRED project-specific rules. MUST override Global Rules when present.

## üìç Key Rule Directories (MANDATORY DEFINITIONS)

**Within the `rulesrepo` (this project):**
- **`rules-md/`**: Development/staging directory where rules are created and modified collaboratively. Edits happen here first.
- **`rules/`**: The canonical source directory containing the validated `.mdc` rule files, intended to be the source for Git submodules in other projects. This directory is synchronized from `rules-md/` after validation.

**In Consuming Projects (Projects using these rules):**
- **`.cursor/rules/`**: The active ruleset directory used by the AI agent framework during runtime. Its content is populated/synchronized directly from the `rules/` directory of the `rulesrepo` project, typically via `git submodule update` during initialization ([Initialization Procedure](mdc:initialization-procedure.mdc)). This directory contains the effective global and project rules for that specific consuming project.

**Common Structure (within the active `.cursor/rules/`):**
- **`global/`**: Contains foundational rules applicable across projects, sourced from `rulesrepo`.
- **`project/`**: Contains project-specific rules (created within the consuming project) that override global rules.

## CORE TOOL INTEGRATION (MANDATORY)
- **`fetch_rules`:** Agents MUST use `fetch_rules` to retrieve full rule content when only a reference (`mdc:`) is available and clarification is needed for execution.
- **`mcp_taskmanager_*`:** Agents (primarily `Overmind`) MUST use these tools for task lifecycle management (planning, status updates). Agents performing final sub-tasks MAY use `mark_task_done` (non-blocking).
- **`context7_*`:** Agents involved in code implementation or research (`BuilderAgent`, `ResearchAgent`, etc.) MUST use `context7_resolve-library-id` and `context7_get-library-docs` to retrieve necessary external library/framework documentation before attempting implementation or analysis requiring such knowledge. 