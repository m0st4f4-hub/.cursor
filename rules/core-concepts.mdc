---
description: Provides definitions for key terminology and concepts used throughout the agent framework documentation, complementing shared-core.md.
globs: 
alwaysApply: false
---

# ðŸ“– Core Framework Concepts & Glossary

## 1. PURPOSE & OBJECTIVES

This document provides definitions for fundamental concepts and terminology used within the Chat/Wiki agent framework. It supplements the definitions in [Shared Core Concepts & Rules](mdc:shared-core.md) and serves as a quick reference glossary.

## 2. KEY CONCEPTS & DEFINITIONS

*   **`requestId`:**
    *   See [Shared Core Concepts & Rules](mdc:shared-core.md#2-core-concepts--definitions).
*   **Agent Roles:**
    *   See [Shared Core Concepts & Rules](mdc:shared-core.md#2-core-concepts--definitions). Also see [Agent Roles & Responsibilities](mdc:agent-roles.md) for the registry.
*   **Knowledge Wiki (`wiki/<requestId>-<description>.md`):**
    *   See [Shared Core Concepts & Rules](mdc:shared-core.md#2-core-concepts--definitions). Also see [Wiki Handling](mdc:wiki-handling.md) for protocol details.
*   **Chat Trigger:** REQUIRED control signal via platform chat message. Sole trigger for Agent activation and handoff. Agent MUST generate trigger message as final action. See [Execution Loop](mdc:execution-loop.md).
*   **ACTION IMPERATIVE:** MANDATORY principle. Continuous execution triggered by chat, context from wiki, rules from `fetch_rules`. NO WAITING. See [Execution Loop](mdc:execution-loop.md).
*   **Tools:** MANDATORY capabilities for environment interaction (MCP, file system, terminal, custom). See [Shared Core](mdc:shared-core.mdc).
*   **Rules (`.cursor/rules/`, `rules-md/`):** MANDATORY `.mdc` files defining behavior, standards, workflow. See [System Prompt](mdc:system-prompt.md).
*   **Framework:** REQUIRED External execution engine. Parses chat triggers, provides tools, facilitates agent execution based on fetched rules and wiki context. See [System Prompt](mdc:system-prompt.md).
*   **Autonomous Execution:** MANDATORY. Agents operate independently, activated by chat triggers, driven by wiki state. User interaction ONLY for requested diagnostics (Loop Step 5).
*   **Wiki-Driven Coordination:**
    *   The principle that the Knowledge Wiki (files within the `wiki/` directory) is the sole mechanism for sharing detailed context, findings, goals, and errors between agents.
*   **Specialized Agents:**
    *   The design pattern of breaking down complex tasks into functions performed by distinct Agent Roles, each with a specific purpose and ruleset.
*   **Sequential Activation:**
    *   The mandatory execution flow where only one agent is active at a time for a given `requestId`, triggered sequentially by Chat messages. Parallel execution within a single request chain is forbidden.
*   **Direct Peer Handoffs:**
    *   The recommended practice for an agent to trigger another specialized agent directly via Chat Trigger when the workflow logically follows (e.g., `BuilderAgent` -> `AuditAgent`), minimizing unnecessary steps through `Overmind`. Return to `Overmind` for planning, escalation, or completion reporting.
*   **Self-Improvement Loop:**
    *   The mandated secondary goal of the framework where agents (`ImprovementAgent`, `RuleWriterAgent`) collaborate via the Wiki and Chat Triggers to analyze past performance and automatically refine or generate rules. See [System Prompt](mdc:system-prompt.md).
*   **Global Rules (`.cursor/rules/global/`):**
    *   Foundational rules providing core behaviors and capabilities, typically shared across projects. See [System Prompt](mdc:system-prompt.md).
*   **Project Rules (`.cursor/rules/project/`):**
    *   Project-specific rules that MUST override conflicting Global Rules, enabling customization. See [System Prompt](mdc:system-prompt.md).

## 3. KEY RULE DIRECTORIES (RUNTIME STRUCTURE)

*   **`.cursor/rules/`**: The root directory containing the active ruleset used by the AI agent framework during execution within the current project. This directory's structure and content are managed by the [Initialization Procedure](mdc:initialization-procedure.md) and potentially `RulesSyncAgent`.
*   **`global/` (within `.cursor/rules/`)**: Contains the base ruleset providing foundational agent behaviors and capabilities. These rules are typically synchronized from a shared, external source (e.g., via Git submodule) and apply generally across projects unless overridden.
*   **`project/` (within `.cursor/rules/`)**: Contains rules specific to the *current* project. These rules are created and maintained within this project (potentially by agents like `AgentGeneratorAgent` or `RuleWriterAgent`) and **MUST** override any conflicting rules found in the `global/` directory.

## 4. CORE TOOL INTEGRATION RULES (MANDATORY)

*   **`fetch_rules`:** Agents MUST use `fetch_rules` to retrieve the full content of referenced rules (`mdc:...`) when the definition is required for detailed understanding or execution beyond the summary provided in registry files like `agent-roles.md`.
*   **`mcp_taskmanager_*`:** Primarily used by `Overmind` for task lifecycle management. Agents completing specific sub-tasks MAY use `mark_task_done` but MUST treat it as non-blocking and proceed immediately to Wiki update and Chat Trigger.
*   **`context7_*`:** Agents involved in implementation or detailed analysis requiring external library/framework knowledge (e.g., `BuilderAgent`, `ResearchAgent`) MUST use `mcp_context7_resolve-library-id` followed by `mcp_context7_get-library-docs` *before* attempting implementation or analysis relying on that external documentation.

## 5. REFERENCES

*   [Shared Core Concepts & Rules](mdc:shared-core.md)
*   [System Prompt](mdc:system-prompt.md)
*   [Agent Roles & Responsibilities](mdc:agent-roles.md)
*   [Wiki Handling](mdc:wiki-handling.md)
*   [Execution Loop](mdc:execution-loop.md)
*   [Initialization Procedure](mdc:initialization-procedure.md)
*   [Framework Definition](mdc:framework.md) 