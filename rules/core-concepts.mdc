---
description: "[TODO: Add description]"
globs:
  - "*.*"
alwaysApply: false
---

# üí° Core Concepts

This document defines fundamental concepts, terminology, and principles underpinning the Unified Agent Framework. Understanding these concepts is crucial for interpreting other rules and ensuring consistent agent behavior.

**Key Concepts:**

*   üîë **Request ID (`requestId`):** A unique identifier for a specific user request being processed by the agent framework. All logs and actions related to a single task are associated with its `requestId`. See [Log Handling](mdc:rules-md/log-handling.md).
*   üßë‚Äçüíª **Agent Roles:** Specialized functional units designed to perform specific types of tasks (e.g., `BuilderAgent`, `AuditAgent`). See [Agent Roles & Responsibilities](mdc:rules-md/agent-roles.md) for detailed definitions and interaction patterns.
*   üìÅ **Log File:** The primary mechanism for state persistence, communication, and coordination, located at `logs/<requestId>.json`. It MUST be treated as an append-only JSON array. See [Log Handling & Coordination](mdc:rules-md/log-handling.md) for structure and usage rules.
*   ‚û°Ô∏è **`nextAgent` Field:** The critical field within a log entry that dictates the *immediate* and *automatic* transition to the next agent role. This field is **read and acted upon by the [Framework](mdc:rules-md/core-concepts.md#framework) itself** after a successful log append (see [Execution Loop Step 10](mdc:rules-md/execution-loop.md#step-10-%EF%B8%8F-framework-action---execute-immediate-automatic-transition)). It is the **sole trigger** for workflow progression. Agents **must** log this field correctly. See [Log Handling - Automatic Transitions](mdc:rules-md/log-handling.md#automatic-transitions-via-nextagent).
*   üöÄ **ACTION IMPERATIVE:** The core principle that agents **must** continuously execute actions based *only* on the log state and transition based *only* on the `nextAgent` field logged by the *previous* agent, without waiting for user prompts or confirmations. This is enforced by the [Core Execution Loop](mdc:rules-md/execution-loop.md).
*   üõ†Ô∏è **Tools:** Capabilities available to agents for interacting with the environment (e.g., `edit_file`, `run_terminal_cmd`, custom scripts). See the [Mandatory MCP Toolchain](mdc:rules-md/shared-core.md#mandatory-mcp-toolchain) and guidelines for [Custom Tools](mdc:rules-md/shared-core.md#custom-tool-development--usage).
*   üìú **Rules (`.cursor/rules/` & `rules-md/`):** Configuration files (`.mdc`) defining agent behavior, project standards, and workflows. This includes agent-specific logic ([`agents/`](mdc:rules-md/agent-roles.md)), shared guidelines ([`shared-core.md`](mdc:rules-md/shared-core.md)), core procedures (e.g., [`initialization-procedure.md`](mdc:rules-md/initialization-procedure.md)), and the overall structure defined in the [System Prompt](mdc:rules-md/system-prompt.md).
*   ‚öôÔ∏è **Framework:** The underlying execution engine (external to the agent's direct control) that reads the log file, interprets the `nextAgent` field, loads the appropriate agent rules, and enforces the [Core Execution Loop](mdc:rules-md/execution-loop.md).
*   ü§ñ **Autonomous Execution:** Agents operate independently, driven by the state logged in `logs/<requestId>.json`. User interaction is limited to providing diagnostic data when explicitly requested by an agent (See [Execution Loop Step 6](mdc:rules-md/execution-loop.md#step-6-%EF%B8%8F-action---execute-agent-specific-core-task)).
*   ‚úçÔ∏è **Log-Driven Coordination:** The `logs/<requestId>.json` file is the *single source of truth* for state, handoff instructions (`handoffMessage`), and the crucial `nextAgent` field which dictates the immediate, automatic transition between agents. (See [Log Handling](mdc:rules-md/log-handling.md)).
*   üßë‚Äçüíº **Specialized Agents:** Each agent role possesses specific skills and responsibilities, defined in their respective `.mdc` files (e.g., `BuilderAgent`, `AuditAgent`). See [Agent Roles](mdc:rules-md/agent-roles.md).
*   ‚ö° **Immediate Transitions:** The framework enforces *instantaneous* transitions between agents based *solely* on the `nextAgent` field in the latest log entry. There is **no waiting** for user confirmation or external triggers. See [Log Handling - Automatic Transitions](mdc:rules-md/log-handling.md#automatic-transitions-via-nextagent).
*   ‚ÜîÔ∏è **Direct Peer Handoffs:** Agents can (and should, when logical) directly hand off tasks to other specialized agents (e.g., `BuilderAgent` setting `nextAgent: "AuditAgent"`) to maintain workflow momentum, returning to `Overmind` primarily for planning, escalation, or task completion synthesis. See [Agent Roles - Workflow Patterns](mdc:rules-md/agent-roles.md#workflow-patterns).
*   üåü **Self-Improvement Loop:** The framework includes mechanisms for agents to analyze past performance (via logs, potentially chat history) and automatically refine or generate rules (`.mdc` files) to improve future execution efficiency and accuracy. This is often orchestrated by dedicated [`ImprovementAgent`](mdc:rules-md/agent-roles.md#improvementagent) and [`RuleWriterAgent`](mdc:rules-md/agent-roles.md#rulewriteragent). See [System Prompt - Self-Improvement Objective](mdc:rules-md/system-prompt.md#self-improvement-objective).
*   üåç **Global Rules <a name="global-rules"></a>:** Core, foundational rules (`.cursor/rules/global/*.mdc`) defining agent behavior, tool usage, and general best practices, applicable across projects. See [System Prompt - Global vs. Project Rules](mdc:rules-md/system-prompt.md#global-vs-project-rules).
*   üèóÔ∏è **Project Rules <a name="project-rules"></a>:** Specific rules (`.cursor/rules/project/*.mdc`) tailored to a particular project's needs, overriding or augmenting global rules. Agents must prioritize these when present. See [System Prompt - Global vs. Project Rules](mdc:rules-md/system-prompt.md#global-vs-project-rules). 