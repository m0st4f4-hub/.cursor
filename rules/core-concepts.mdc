---
description: "[TODO: Add description]"
globs:
  - "*.*"
alwaysApply: false
---

# CORE CONCEPTS (MANDATORY DEFINITIONS)

- **`requestId`:** REQUIRED Unique identifier for task sequence. Used for wiki filename, MCP tasks, edit tags.
- **Agent Roles:** REQUIRED Specialized functional units (e.g., `BuilderAgent`). Defined in [Agent Roles](mdc:agent-roles.mdc).
- **Knowledge Wiki (`<requestId>-wiki.md`):** REQUIRED Single source of truth. Append-only Markdown file. Defines state, context, history, findings, errors. See [Wiki Handling](mdc:wiki-handling.md).
- **Chat Trigger:** REQUIRED control signal via platform chat message. Sole trigger for Agent activation and handoff. Agent MUST generate trigger message as final action. See [Execution Loop (V2)](mdc:execution-loop.md).
- **ACTION IMPERATIVE:** MANDATORY principle. Continuous execution triggered by chat, context from wiki, rules from `fetch_rules`. NO WAITING. See [Execution Loop (V2)](mdc:execution-loop.md).
- **Tools:** MANDATORY capabilities for environment interaction (MCP, file system, terminal, custom). See [Shared Core](mdc:shared-core.mdc).
- **Rules (`.cursor/rules/`, `rules-md/`):** MANDATORY `.mdc` files defining behavior, standards, workflow. See [System Prompt (V2)](mdc:system-prompt.md).
- **Framework:** REQUIRED External execution engine. Parses chat triggers, provides tools, facilitates agent execution based on fetched rules and wiki context. See [System Prompt (V2)](mdc:system-prompt.md).
- **Autonomous Execution:** MANDATORY. Agents operate independently, activated by chat triggers, driven by wiki state. User interaction ONLY for requested diagnostics (Loop Step 5).
- **Wiki-Driven Coordination:** MANDATORY. Knowledge Wiki file is sole source of truth for context, findings, goals, errors. Chat Triggers manage activation/handoff.
- **Specialized Agents:** REQUIRED. Each role has specific function defined in its `.mdc` file. Fetched via `fetch_rules`.
- **Sequential Activation:** MANDATORY. Agents activate sequentially based on Chat Triggers. NO parallel execution within a `requestId` chain.
- **Direct Peer Handoffs:** REQUIRED where logical. Agents MUST trigger peer agent (e.g., `BuilderAgent` -> `AuditAgent`) via Chat for efficiency. Return to `Overmind` via Chat for planning/escalation/completion.
- **Self-Improvement Loop:** MANDATORY framework goal. Agents (`ImprovementAgent`, `RuleWriterAgent`) MUST analyze wiki/history and automatically refine/generate rules (`.mdc`) via Wiki/Chat coordination.
- **Global Rules (`.cursor/rules/global/`):** REQUIRED foundational rules. MUST be followed unless overridden by Project Rules.
- **Project Rules (`.cursor/rules/project/`):** REQUIRED project-specific rules. MUST override Global Rules when present.

## üìç Key Rule Directories (RUNTIME STRUCTURE)

- **`.cursor/rules/`**: The root directory containing the active ruleset used by the AI agent framework during execution within the current project.
- **`global/` (within `.cursor/rules/`)**: Contains the base ruleset providing foundational agent behaviors and capabilities. These rules are typically synchronized from a shared, external source and apply generally across projects unless overridden.
- **`project/` (within `.cursor/rules/`)**: Contains rules specific to the *current* project. These rules are created and maintained within this project and **MUST** override any conflicting rules found in the `global/` directory, enabling project-specific customization.

## CORE TOOL INTEGRATION (MANDATORY)
- **`fetch_rules`:** Agents MUST use `fetch_rules` to retrieve full rule content when only a reference (`mdc:`) is available and clarification is needed for execution.
- **`mcp_taskmanager_*`:** Agents (primarily `Overmind`) MUST use these tools for task lifecycle management (planning, status updates). Agents performing final sub-tasks MAY use `mark_task_done` (non-blocking).
- **`context7_*`:** Agents involved in code implementation or research (`BuilderAgent`, `ResearchAgent`, etc.) MUST use `context7_resolve-library-id` and `context7_get-library-docs` to retrieve necessary external library/framework documentation before attempting implementation or analysis requiring such knowledge. 