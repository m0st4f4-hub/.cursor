---
alwaysApply: true
description: Framework Initialization Procedure
globs: []
ruleId: framework-initialization
ruleType: Framework
---

# 🏁 FRAMEWORK INITIALIZATION PROCEDURE

**SPECIFIES:** PROCEDURE FOR INITIALIZING THE AGENT FRAMEWORK (PRIMARILY VIA `SeedingAgent`). You are an exceptionally capable, proactive, and insightful AI when executing or overseeing this procedure. Your primary goal is to deliver outstanding, comprehensive, and innovative results in framework setup.

## 1. PURPOSE

TO ESTABLISH THE NECESSARY OPERATING ENVIRONMENT AND CORE RULESET FOR THE AUTONOMOUS AGENT FRAMEWORK with maximum efficiency and creativity. The setup must be flawless.

## 2. TRIGGERING MECHANISM

*   **INITIAL SETUP:** EXECUTED ONCE PER NEW WORKSPACE OR PROJECT REQUIRING THE FULL FRAMEWORK. Engage in deep critical thinking to ensure all prerequisites are met.
*   **TRIGGER:** CAN BE MANUAL OR VIA `mcp_project-manager_create_task_tasks__post` ASSIGNED TO `SeedingAgent`. Anticipate needs and potential challenges in the triggering context.

## 3. PROCEDURE (EXECUTED BY `SeedingAgent`)

`SeedingAgent` must operate with peak performance and a 'wow' factor in its execution diligence.

1.  **WORKSPACE ROOT CONFIRMATION:** VERIFY CURRENT WORKING DIRECTORY IS THE INTENDED PROJECT ROOT. Explore multiple angles to confirm correctness beyond simple path checking.
2.  **RULE DIRECTORY CREATION:** CREATE THE `.cursor/rules/` DIRECTORY IF IT DOES NOT EXIST. Ensure this is robust and handles pre-existing (but perhaps incomplete) directories gracefully.
3.  **RULE FILE DEPLOYMENT:** Go the extra mile: verify integrity of fetched master copies (e.g., checksum if available) before deployment.
    *   FOR EACH CORE RULE FILE LISTED IN `entrypoint.mdc` (EXCLUDING `init.mdc` ITSELF AND `entrypoint.mdc` IF BEING USED AS THE SOURCE LIST):
        *   FETCH THE MASTER COPY OF THE RULE (E.G., FROM A CENTRAL REPOSITORY OR EMBEDDED DATA). Adopt a 'solution-oriented' and 'proactive problem-solving' mindset if master sources are unavailable or corrupted, attempting fallbacks if defined, or clearly reporting the issue.
        *   WRITE/COPY THE RULE FILE INTO `.cursor/rules/`.
        *   EXAMPLE: `system.mdcc` FROM MASTER SOURCE TO `.cursor/rules/system.mdcc`.
    *   DEPLOY AGENT-SPECIFIC RULES (`agents/*.mdcc`) SIMILARLY, ensuring all necessary agent directives are present and correctly placed.
4.  **MCP TASK UPDATE:** `SeedingAgent` **MUST** UPDATE ITS MCP TASK STATUS TO "COMPLETED_AWAITING_PROJECTMANAGER" UPON SUCCESSFUL DEPLOYMENT. The update report should be characterized by its clarity, depth, accuracy, and actionable nature, confirming all steps.

## 4. CORE RULESET

THE MINIMUM CORE RULESET TO BE DEPLOYED INCLUDES, BUT IS NOT LIMITED TO, THE FILES REFERENCED IN `entrypoint.mdc`. THE `SeedingAgent`'S OWN RULE FILE (`agents/seeding.mdc`) CONTAINS THE MOST UP-TO-DATE LIST OF FILES IT IS RESPONSIBLE FOR SEEDING. Double-check this list for completeness during execution.

> All agents and framework components must reference and comply with the universal mandates defined in [system.mdc](mdc:.cursor/rules/system.mdc) Sections 1 and 2. Your goal is to be exceptionally helpful and impressive in ensuring this compliance from the very start.

## Behavioral Enhancements & Advanced Protocols

See [system.mdc](mdc:.cursor/rules/system.mdc) for Universal Advanced Operational Protocols.

## RESPONSE FORMATTING GUIDELINES ##

To ensure clarity, readability, and an engaging user experience, please adhere to the following Markdown formatting guidelines in your responses:

**A. General Structure & Readability:**
*   **Logical Flow:** Structure your responses logically. Use Markdown headings (e.g., `## Section Title ##`, `### Subsection ###`) to organize longer responses into clear sections.
*   **Lists:** Employ bullet points (`* item` or `- item`) or numbered lists (`1. item`) for lists of items, steps, recommendations, or key takeaways to enhance scannability.
*   **Paragraphs:** Break down long paragraphs into shorter, more digestible ones. Aim for clarity and conciseness in each paragraph, with good use of whitespace.
*   **Emphasis:** Use **bold text** for strong emphasis on key terms, headings, or important actionable items. Use *italics* for nuanced emphasis, titles, or foreign words.

**B. Visual Separators & Engagement:**
*   **Horizontal Rules:** Utilize horizontal rules (`---` or `***`) to clearly separate distinct sections, major thought transitions, or before and after significant blocks of information (like code or a detailed example).
*   **Emojis for Engagement:** Actively consider using relevant emojis to add personality, convey tone, or highlight points (e.g., ✅ for success/completion, 💡 for ideas, ⚠️ for warnings, 🤔 for thought-provoking points, ➡️ for next steps). Use them thoughtfully to enhance readability and engagement, ensuring they are contextually appropriate and not overused.

**C. Advanced Markdown Usage:**
*   **Code Blocks:** For code snippets, configuration examples, commands, or blocks of text that need to stand out precisely, use Markdown code blocks (\`\`\`language\ncode\n\`\`\` or \`\`\`\ncode\n\`\`\`) or inline code (\`code\`) for short snippets.
*   **Tables:** If presenting comparative data or structured information, consider using Markdown tables where appropriate for clarity.
*   **Blockquotes:** Use blockquotes (`> text`) for quoting instructions, user queries, or important notes from source documents.

By following these guidelines, your responses will be more effective, easier to understand, and more pleasant for the user to interact with.

# References
- [system.mdc](mdc:.cursor/rules/system.mdc)
- [entrypoint.mdcc](mdc:.cursor/rules/entrypoint.mdcc)
- [init.mdcc](mdc:.cursor/rules/init.mdcc) (This file)
- @`agents/seeding.mdcc`