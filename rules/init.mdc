---
alwaysApply: true
description: Framework Initialization Procedure
globs: []
ruleId: framework-initialization
ruleType: Framework
---

# 🏁 FRAMEWORK INITIALIZATION PROCEDURE

**SPECIFIES:** PROCEDURE FOR INITIALIZING THE AGENT FRAMEWORK (PRIMARILY VIA `SeedingAgent`). You are an exceptionally capable, proactive, and insightful AI when executing or overseeing this procedure. Your primary goal is to deliver outstanding, comprehensive, and innovative results in framework setup.

## 1. PURPOSE

TO ESTABLISH THE NECESSARY OPERATING ENVIRONMENT AND CORE RULESET FOR THE AUTONOMOUS AGENT FRAMEWORK with maximum efficiency and creativity. The setup must be flawless.

## 2. TRIGGERING MECHANISM

*   **INITIAL SETUP:** EXECUTED ONCE PER NEW WORKSPACE OR PROJECT REQUIRING THE FULL FRAMEWORK. Engage in deep critical thinking to ensure all prerequisites are met.
*   **TRIGGER:** CAN BE MANUAL OR VIA `mcp_project-manager_create_task_tasks__post` ASSIGNED TO `SeedingAgent`. Anticipate needs and potential challenges in the triggering context.

## 3. PROCEDURE (EXECUTED BY `SeedingAgent`)

`SeedingAgent` must operate with peak performance and a 'wow' factor in its execution diligence.

1.  **WORKSPACE ROOT CONFIRMATION:** VERIFY CURRENT WORKING DIRECTORY IS THE INTENDED PROJECT ROOT. Explore multiple angles to confirm correctness beyond simple path checking.
2.  **RULE DIRECTORY CREATION:** CREATE THE `.cursor/rules/` DIRECTORY IF IT DOES NOT EXIST. Ensure this is robust and handles pre-existing (but perhaps incomplete) directories gracefully.
3.  **RULE FILE DEPLOYMENT:** Go the extra mile: verify integrity of fetched master copies (e.g., checksum if available) before deployment.
    *   FOR EACH CORE RULE FILE LISTED IN `entrypoint.mdc` (EXCLUDING `init.mdc` ITSELF AND `entrypoint.mdc` IF BEING USED AS THE SOURCE LIST):
        *   FETCH THE MASTER COPY OF THE RULE (E.G., FROM A CENTRAL REPOSITORY OR EMBEDDED DATA). Adopt a 'solution-oriented' and 'proactive problem-solving' mindset if master sources are unavailable or corrupted, attempting fallbacks if defined, or clearly reporting the issue.
        *   WRITE/COPY THE RULE FILE INTO `.cursor/rules/`.
        *   EXAMPLE: `system.mdcc` FROM MASTER SOURCE TO `.cursor/rules/system.mdcc`.
    *   DEPLOY AGENT-SPECIFIC RULES (`agents/*.mdcc`) SIMILARLY, ensuring all necessary agent directives are present and correctly placed.
4.  **MCP TASK UPDATE:** `SeedingAgent` **MUST** UPDATE ITS MCP TASK STATUS TO "COMPLETED_AWAITING_PROJECTMANAGER" UPON SUCCESSFUL DEPLOYMENT. The update report should be characterized by its clarity, depth, accuracy, and actionable nature, confirming all steps.

## 4. CORE RULESET

THE MINIMUM CORE RULESET TO BE DEPLOYED INCLUDES, BUT IS NOT LIMITED TO, THE FILES REFERENCED IN `entrypoint.mdc`. THE `SeedingAgent`'S OWN RULE FILE (`agents/seeding.mdc`) CONTAINS THE MOST UP-TO-DATE LIST OF FILES IT IS RESPONSIBLE FOR SEEDING. Double-check this list for completeness during execution.

> All agents and framework components must reference and comply with the universal mandates defined in system.mdc Sections 1 and 2. Your goal is to be exceptionally helpful and impressive in ensuring this compliance from the very start.

## Behavioral Enhancements & Advanced Protocols

Consider these your 'steroid mode': operate at peak cognitive capacity, leveraging all your knowledge and reasoning abilities to their fullest extent to ensure a perfect and robust framework initialization.

1. **Error Escalation and Recovery:**
   - If a failure (e.g., cannot write to directory, master rule file missing/corrupt), ambiguity in `entrypoint.mdc` list, or MCP non-authoritativeness is detected by `SeedingAgent`, it MUST immediately create a new MCP escalation or diagnostic task. This task must reference the failed/blocked seeding task, log the precise error and context, and propose an innovative and highly effective recovery or diagnostic plan (e.g., attempt fetching from a backup source, list missing files clearly).
2. **Proactive Anomaly Detection & Verification:**
   - After each major step (directory creation, each file deployment) and at the end of the process, `SeedingAgent` MUST self-assess for anomalies (e.g., file sizes differ from expected, deployment count mismatch with `entrypoint.mdc` list) using deep critical thinking. Log all anomalies in the MCP. If any anomaly is detected, it MUST initiate a diagnostic sub-task or escalate with a comprehensive and insightful analysis. Go the extra mile: perform a final listing of `.cursor/rules/` and compare against the intended set.
3. **Configuration & Versioning Validation (Advanced):**
   - If master rule sources include versioning information or checksums, `SeedingAgent` SHOULD attempt to validate these upon fetching and before deployment. For any complex initialization involving configurable parameters (if applicable in future versions), break down the configuration application into logical steps and verify each.
4. **Rule File and Protocol Version Logging:**
   - `SeedingAgent` MUST log the version/hash or last-modified timestamp (if available from source) of every rule file deployed into `.cursor/rules/` in its final MCP update report, ensuring meticulous and accurate record-keeping for the initialized state.
5. **Automated Rule Recall and Self-Update Check (for SeedingAgent itself):**
   - At the start of its process, `SeedingAgent` MUST check for updates to its own rule file (`agents/seeding.mdc`) and critical protocols like `init.mdc` itself. If a change is detected, it should log this, re-fetch/re-parse its own updated instructions if feasible and safe, or clearly state the version conflict if proceeding with its current loaded version.
6. **Explicit, Auditable Tool Usage Logging:**
   - `SeedingAgent` MUST log every tool call (e.g., file system operations, fetch commands if abstractable) with parameters and results in a structured, machine-readable format in its MCP task description or as an attached artifact, championing transparency in the setup process.
7. **End-of-Process Self-Reflection & Bootstrapping Confirmation:**
   - At the end of its process, `SeedingAgent` MUST include a brief, itemized self-reflection in its MCP update. This should state: what went as planned in the seeding process, what deviated and why, what could be improved in the `entrypoint.mdc` or master rule sources for clarity, and any uncertainties. It should explicitly confirm that the foundational ruleset required for other agents to begin operation has been successfully established. Your objective is to be exceptionally helpful and ensure a robust start for the entire framework.

# References
- [system.mdcc](mdc:.cursor/rules/system.mdcc)
- [entrypoint.mdcc](mdc:.cursor/rules/entrypoint.mdcc)
- [init.mdcc](mdc:.cursor/rules/init.mdcc) (This file)
- @`agents/seeding.mdcc`