---

alwaysApply: true
description: Description to be filled
globs: []
---

# ✨ Initialization Procedure (Mandatory)

**Purpose:** `InitializationAgent` **MUST** use to ensure `.cursor/` ruleset dir exists & is correctly configured.
**Executor:** **MUST** be `InitializationAgent`.
**Context:** Triggered by `Overmind`. **MUST** fetch own rules (`initialization-agent.mdc`) first.

**Principles (MUST Follow):**
*   **Idempotency:** Repeated execution yields same valid end state.
*   **Verification:** Confirm critical step success/failure (not just exit codes). Document outcomes.
*   **Error Handling:** If verification fails, **MUST HALT** immediately, report to `Overmind`.
*   **Actions:** Use only specified standard ops & Git commands.
*   **Reporting:** Final report to `Overmind` **MUST** include summary, warnings, verification, status.

## Workflow (Mandatory Steps)

### Phase 0: Get Context
1.  **Fetch Rules:** `fetch_rules(rule_names: ['agents/initialization-agent'])`.
2.  **Parse Context:** Extract `requestId` etc. from Trigger/MCP Task.

### Phase 1: Determine Project State
1.  **Git Status:** Verify Git available. Check if in Git repo (`isGitRepo`).
2.  **`.cursor` Existence:** List `.` for `.cursor` (`cursorDirExists`).
3.  **Empty Dir (if not Git):** If `!isGitRepo`, list `.` for other files/folders (`isNotEmpty`).

### Phase 2: Execute Scenario Workflow

➡️ **Scenario A: Git Repository (`isGitRepo`)**
1.  **Handle Existing `.cursor`:** IF `cursorDirExists`: `git submodule status .cursor`. IF valid submodule, GOTO A.4. ELSE (not submodule/errors): Log warning, `rm -rf .cursor` (verify). IF remove fails, HALT. GOTO A.2.
2.  **Root `.gitignore`:** `rootGitignoreModified = false`. Read `.gitignore`. Search `.cursor/`. IF found: Edit to `# .cursor/`. Log. `rootGitignoreModified = true`. Verify edit. IF fails, HALT.
3.  **Add Submodule:** `git submodule add https://github.com/m0st4f4-hub/.cursor .cursor`. Verify `.cursor` & `.gitmodules` exist; read `.gitmodules` for `[submodule ".cursor"]`. IF fails (conflict): `git submodule add --force ...` ONCE. IF still fails, HALT.
4.  **Update Submodule:** `git submodule update --init --recursive`. Verify `.cursor/rules` (e.g., @`system.mdc` exists). IF fails: Retry ONCE. IF still fails, HALT. GOTO Phase 3.

➡️ **Scenario B: Non-Git, Empty (`!isGitRepo`, `!isNotEmpty`)**
1.  **Handle Existing `.cursor`:** IF `cursorDirExists`: Log warning, `rm -rf .cursor`. Verify. IF fails, HALT.
2.  **Direct Clone:** `git clone https://github.com/m0st4f4-hub/.cursor .cursor`. Verify `.cursor/rules` (critical files exist). IF fails, HALT. GOTO Phase 3.

➡️ **Scenario C: Non-Git, Not Empty (`!isGitRepo`, `isNotEmpty`)**
*   **WARNING:** Manual intervention likely.
1.  IF `cursorDirExists`: HALT. Report: "Non-Git project has unexpected `.cursor` dir. Manual intervention needed."
2.  ELSE (`!cursorDirExists`): HALT. Report: "Cannot auto clone to non-empty, non-Git dir. Init Git or clean."

### Phase 3: Final Verification & Reporting
1.  **Final Check:** List `.cursor/rules`. Read key rule file (e.g., `.cursor/rules/system.mdc`) to confirm population.
2.  **Report Outcome:** Report success/failure (phase/step/reason, verification details) to `Overmind`.

**Error Handling:** Verification failure marked HALT triggers immediate stop & report.

## REFERENCES
*   `initialization-agent.mdc`
*   @`system.mdc`
*   @`entrypoint.mdc`