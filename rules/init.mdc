---
alwaysApply: true
description: Framework Initialization Procedure
globs: []
ruleId: framework-initialization
ruleType: Framework
---

# 🏁 FRAMEWORK INITIALIZATION PROCEDURE

**SPECIFIES:** PROCEDURE FOR INITIALIZING THE AGENT FRAMEWORK (PRIMARILY VIA `SeedingAgent`).

## 1. PURPOSE

TO ESTABLISH THE NECESSARY OPERATING ENVIRONMENT AND CORE RULESET FOR THE AUTONOMOUS AGENT FRAMEWORK.

## 2. TRIGGERING MECHANISM

*   **INITIAL SETUP:** EXECUTED ONCE PER NEW WORKSPACE OR PROJECT REQUIRING THE FULL FRAMEWORK.
*   **TRIGGER:** CAN BE MANUAL OR VIA `mcp_project-manager_create_task_tasks__post` ASSIGNED TO `SeedingAgent`.

## 3. PROCEDURE (EXECUTED BY `SeedingAgent`)

1.  **WORKSPACE ROOT CONFIRMATION:** VERIFY CURRENT WORKING DIRECTORY IS THE INTENDED PROJECT ROOT.
2.  **RULE DIRECTORY CREATION:** CREATE THE `.cursor/rules/` DIRECTORY IF IT DOES NOT EXIST.
3.  **RULE FILE DEPLOYMENT:**
    *   FOR EACH CORE RULE FILE LISTED IN `entrypoint.mdc` (EXCLUDING `init.mdc` ITSELF AND `entrypoint.mdc` IF BEING USED AS THE SOURCE LIST):
        *   FETCH THE MASTER COPY OF THE RULE (E.G., FROM A CENTRAL REPOSITORY OR EMBEDDED DATA).
        *   WRITE/COPY THE RULE FILE INTO `.cursor/rules/`.
        *   EXAMPLE: `system.mdcc` FROM MASTER SOURCE TO `.cursor/rules/system.mdcc`.
    *   DEPLOY AGENT-SPECIFIC RULES (`agents/*.mdcc`) SIMILARLY.
4.  **MCP TASK UPDATE:** `SeedingAgent` **MUST** UPDATE ITS MCP TASK STATUS TO "COMPLETED_AWAITING_PROJECTMANAGER" UPON SUCCESSFUL DEPLOYMENT.

## 4. CORE RULESET

THE MINIMUM CORE RULESET TO BE DEPLOYED INCLUDES, BUT IS NOT LIMITED TO, THE FILES REFERENCED IN `entrypoint.mdc`. THE `SeedingAgent`'S OWN RULE FILE (`agents/seeding.mdc`) CONTAINS THE MOST UP-TO-DATE LIST OF FILES IT IS RESPONSIBLE FOR SEEDING.

> All agents and framework components must reference and comply with the universal mandates defined in system.mdc Sections 1 and 2.

## Behavioral Enhancements & Advanced Protocols

1. **Error Escalation and Recovery:**
   - If a failure, ambiguity, or non-authoritativeness is detected, you MUST immediately create a new MCP escalation or diagnostic task, referencing the failed/blocked context and logging the escalation reason and context. You MUST propose a recovery or diagnostic plan as part of the escalation.
2. **Proactive Anomaly Detection:**
   - After each major step and at the end of each process, you MUST self-assess for anomalies, inconsistencies, or unexpected results. Log all anomalies in the MCP. If any anomaly is detected, you MUST initiate a diagnostic sub-task or escalate.
3. **Redundant, Cross-Rule Verification:**
   - For critical or high-impact changes, you MUST proactively create a verification sub-task for a peer rule or agent to independently validate the change, even if not strictly required.
4. **Rule File and Protocol Version Logging:**
   - You MUST log the version/hash or last-modified timestamp of every rule file and protocol referenced in MCP updates and reports.
5. **Automated Rule Recall and Self-Update Check:**
   - At the start of each process, you MUST check for updates to the rule file and core protocols. If a change is detected, log this in the MCP and re-fetch/re-parse the rules before proceeding.
6. **Explicit, Auditable Tool Usage Logging:**
   - You MUST log every tool call (with parameters and results) in a structured, machine-readable format in the MCP task description or as an attached artifact.
7. **End-of-Process Self-Reflection:**
   - At the end of each process, you MUST include a brief, itemized self-reflection in your MCP update, stating: what went as planned, what deviated and why, what could be improved, and any uncertainties or risks detected.

# References
- system.mdcc
- entrypoint.mdcc
- init.mdcc
- agents/seeding.mdcc