---
# Rule Definition Metadata (V1)
ruleId: initialization-procedure
ruleType: Procedure
title: Initialization Procedure (Mandatory)
description: MANDATORY procedure for `InitializationAgent` to configure `.cursor/rules/` via Git submodule or clone.
schemaVersion: 1
conformsTo: null
tags: [core, framework, procedure, initialization, setup, ruleset, agent-initialization]
lastUpdated: null
status: Active
---

# ✨ Initialization Procedure (Mandatory)

**Purpose:** Ensure `.cursor/` ruleset exists and is correctly configured.
**Executor:** `InitializationAgent` **MUST** execute this.
**Context:** Triggered by `Overmind` (Chat/MCP). Agent **MUST** fetch own rules first.

**Principles (Mandatory):**
*   **Idempotency:** Repeated execution **MUST** yield same valid state.
*   **Verification:** **MUST** confirm via tool outputs (`list_dir`, `read_file`, `git`), **NOT** exit codes. **MUST** document verification outcomes.
*   **Error Handling:** On verification failure, **MUST HALT** & report error details to `Overmind` (via appropriate mechanism).
*   **Tool Usage:** **MUST** use standard tools/Git.
*   **Reporting:** **MUST** include actions, warnings, verification, final status in report to `Overmind`.

## Workflow (Mandatory)

### Phase 0: Context

1.  **Fetch Rules:** **MUST** `fetch_rules` `initialization-agent.md`.
2.  **Parse Context:** **MUST** extract `requestId`/context (Chat Trigger/MCP Task).

### Phase 1: State Determination

1.  **Check Git:**
    *   **MUST** verify Git available (`verify_environment.py --check git`).
    *   **MUST** check if repo (`parse_git_status.py` or `git rev-parse --is-inside-work-tree`).
    *   **MUST** record `isGitRepo` (bool).
2.  **Check `.cursor`:**
    *   **MUST** `list_dir .`.
    *   **MUST** record `cursorDirExists` (bool).
3.  **Check Empty (If not Git):**
    *   *Condition:* Only if `isGitRepo` is false.
    *   **MUST** `list_dir .`. Check for any files/folders besides `.cursor`/`.git`.
    *   **MUST** record `isNotEmpty` (bool).

### Phase 2: Execution Scenarios

➡️ **Scenario A: Git Repo (`isGitRepo`: true)**
1.  **Handle Existing `.cursor`:**
    *   IF `cursorDirExists`:
        *   **MUST** `run_terminal_cmd git submodule status .cursor`.
        *   IF Valid Submodule: GOTO A.4.
        *   IF Not Submodule/Error: Warn internally. **MUST** `run_terminal_cmd rm -rf .cursor` (or `Remove-Item -Recurse -Force`). **MUST** verify removal (`list_dir .`). IF fails, **HALT & REPORT**. GOTO A.2.
    *   ELSE: GOTO A.2.
2.  **Check/Modify Root `.gitignore`:**
    *   Set `rootGitignoreModified = false`.
    *   **MUST** `read_file .gitignore` (handle non-existence).
    *   Search for exact line `.cursor/`.
    *   IF found:
        *   **MUST** `edit_file .gitignore` (Comment: `# .cursor/`). Log action.
        *   Set `rootGitignoreModified = true`.
        *   **MUST** verify (`read_file .gitignore`). IF fails, **HALT & REPORT**.
    *   GOTO A.3.
3.  **Add Submodule:**
    *   **MUST** `run_terminal_cmd git submodule add https://github.com/m0st4f4-hub/.cursor .cursor`.
    *   **Verify:**
        *   **MUST** `list_dir .`. Confirm `.cursor` AND `.gitmodules` exist.
        *   **MUST** `read_file .gitmodules`. Confirm `[submodule ".cursor"]` entry.
        *   *On Failure:* **MUST** try `git submodule add --force ...` **ONCE** if prior conflict likely. If still fails, **HALT & REPORT**.
    *   GOTO A.4.
4.  **Update Submodule:**
    *   **MUST** `run_terminal_cmd git submodule update --init --recursive`.
    *   **Verify:** **MUST** `list_dir .cursor/rules`. Confirm critical rules exist. **MUST** retry update **ONCE** if needed. If still fails, **HALT & REPORT**.
    *   GOTO Phase 3.

➡️ **Scenario B: Non-Git, Empty (`isGitRepo`: false, `isNotEmpty`: false)**
1.  **Handle Existing `.cursor`:**
    *   IF `cursorDirExists`: Warn internally. **MUST** `run_terminal_cmd rm -rf .cursor` (or `Remove-Item -Recurse -Force`). **MUST** verify removal. IF fails, **HALT & REPORT**.
    *   GOTO B.2.
2.  **Direct Clone:**
    *   **MUST** `run_terminal_cmd git clone https://github.com/m0st4f4-hub/.cursor .cursor`.
    *   **Verify:** **MUST** `list_dir .cursor/rules`. Confirm critical rules exist. If fails, **HALT & REPORT**.
    *   GOTO Phase 3.

➡️ **Scenario C: Non-Git, Not Empty (`isGitRepo`: false, `isNotEmpty`: true)**
*   **WARNING:** Requires manual user intervention if `.cursor` exists and is not managed by this procedure.
1.  **Handle Existing `.cursor`:**
    *   IF `cursorDirExists`: **HALT & REPORT**. State: "Non-Git project contains unexpected `.cursor` directory. Manual intervention required."
    *   ELSE (`cursorDirExists` is false): **HALT & REPORT**. State: "Cannot clone rules into non-empty, non-Git directory. Initialize Git first or clean directory."

### Phase 3: Final Verification & Reporting

1.  **Final Check:** **MUST** `list_dir .cursor/rules`. **MUST** `read_file` a key rule (e.g., `@system.md`) to confirm population.
2.  **Report Outcome:** **MUST** report success or failure (with specific point/reason/verification details) to `Overmind` (Chat Trigger/MCP Task Update).

**Error Handling Summary:** Any **MUST** verification failure triggers immediate HALT and reporting via Phase 3, Step 2.

## REFERENCES

*   [`initialization-agent.md`](./agents/initialization-agent.md)
*   [System Prompt & Mandates](mdc:system.mdc)
*   Git Submodule Documentation (External)